{"version":3,"file":"scripts/main.89b65809df5c1207ea41.js","mappings":"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","sources":["webpack://video-calls/webpack/runtime/chunk loaded","webpack://video-calls/./src/core/constants/index.ts","webpack://video-calls/./src/modules/user/services/constants/index.ts","webpack://video-calls/./src/modules/user/services/post-authorization-service.ts","webpack://video-calls/./src/modules/user/services/get-authorization-refresh-service.ts","webpack://video-calls/./src/core/services/logout-service.ts","webpack://video-calls/./src/core/utils/axios-instance.ts","webpack://video-calls/./src/core/services/add-message-to-channel.ts","webpack://video-calls/./src/core/services/get-approvals.ts","webpack://video-calls/./src/core/services/get-channel-messages.ts","webpack://video-calls/./src/core/services/get-channels.ts","webpack://video-calls/./src/core/services/get-invites.ts","webpack://video-calls/./src/core/services/get-users.ts","webpack://video-calls/./src/modules/friends/store/actions.ts","webpack://video-calls/./src/modules/friends/services/get-friends-service.ts","webpack://video-calls/./src/modules/user/store/actions.ts","webpack://video-calls/./src/modules/registration/services/registration-service.ts","webpack://video-calls/./src/core/services/server-loading-service.ts","webpack://video-calls/./src/modules/user/services/get-users-service.ts","webpack://video-calls/./src/modules/user/store/user.ts","webpack://video-calls/./src/modules/user/store/sagas.ts","webpack://video-calls/./src/core/store/sagas.ts","webpack://video-calls/./src/core/store/index.ts","webpack://video-calls/./src/modules/user/store/selectors.ts","webpack://video-calls/./src/core/components/button/button.tsx","webpack://video-calls/./src/core/components/text-field/text-field.tsx","webpack://video-calls/./src/core/theme/index.ts","webpack://video-calls/./src/core/assets/images/authorization-image.jpg","webpack://video-calls/./src/core/layouts/authorization-layout/authorization-layout.tsx","webpack://video-calls/./src/modules/authorization/pages/authorization/authorization.tsx","webpack://video-calls/./src/modules/registration/pages/registration/registration.tsx","webpack://video-calls/./src/core/routes/public-routes/public-routes.tsx","webpack://video-calls/./src/core/components/navigation/navigation.tsx","webpack://video-calls/./src/core/components/user-control/user-control.tsx","webpack://video-calls/./src/core/utils/socket.ts","webpack://video-calls/./src/core/components/user/user.tsx","webpack://video-calls/./src/core/layouts/friends-layout/friends-layout.tsx","webpack://video-calls/./src/modules/friends/pages/friends/friends.tsx","webpack://video-calls/./src/core/components/messages/messages.tsx","webpack://video-calls/./src/modules/profile/pages/profile/profile.tsx","webpack://video-calls/./src/core/layouts/channels-layout/channels-layout.tsx","webpack://video-calls/./src/modules/channels/pages/channels/channels.tsx","webpack://video-calls/./src/core/components/user-friends/user-friends.tsx","webpack://video-calls/./src/core/components/all-friends/all-friends.tsx","webpack://video-calls/./src/core/components/friends-online/friends-online.tsx","webpack://video-calls/./src/core/components/user-add-to-friends/user-add-to-friends.tsx","webpack://video-calls/./src/core/components/friends-invites/friends-invites.tsx","webpack://video-calls/./src/core/components/user-approvals/user-approvals.tsx","webpack://video-calls/./src/core/components/friends-approvals/friends-approvals.tsx","webpack://video-calls/./src/core/components/user-add-invite-to-friends/user-add-invite-to-friends.tsx","webpack://video-calls/./src/core/components/add-to-friends/add-to-friends.tsx","webpack://video-calls/./src/core/routes/private-routes/private-routes.tsx","webpack://video-calls/./src/core/components/app/app.tsx","webpack://video-calls/./src/core/components/loader/loader.tsx","webpack://video-calls/./src/core/containers/app-container/app-container.tsx","webpack://video-calls/./src/index.tsx","webpack://video-calls/webpack/bootstrap","webpack://video-calls/webpack/runtime/compat get default export","webpack://video-calls/webpack/runtime/define property getters","webpack://video-calls/webpack/runtime/global","webpack://video-calls/webpack/runtime/hasOwnProperty shorthand","webpack://video-calls/webpack/runtime/make namespace object","webpack://video-calls/webpack/runtime/publicPath","webpack://video-calls/webpack/runtime/jsonp chunk loading","webpack://video-calls/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export const DeviceWidth = {\n  Desktop: 1440,\n  Tablet: 768,\n  Mobile: 320,\n};\n\nexport const Retina = {\n  Dppx: 1.5,\n  Dpi: 144,\n};\n\nexport const API_URL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:8080'\n    : 'https://ioinitid-video-calls-server.herokuapp.com';\n\nexport const APPLICATION_URL =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://ioinitid.github.io/video-calls';\n","import { API_URL } from 'core/constants';\n\nexport const ApiUrl = {\n  Authorization: '/authorization',\n  AuthorizationRefresh: `${API_URL}/api/refresh`,\n};\n","import { axiosInstance } from 'core/utils/axios-instance';\nimport { AuthorizationResponse } from 'core/types';\nimport { postAuthorizationAction } from 'modules/user/store/actions';\nimport { ApiUrl } from 'modules/user/services/constants';\n\n/**\n * Service for user authorization.\n */\nconst postAuthorizationService = (params: ReturnType<typeof postAuthorizationAction>['payload']) => {\n  return axiosInstance.request<AuthorizationResponse>({\n    method: 'POST',\n    data: params,\n    url: ApiUrl.Authorization,\n  });\n};\n\nexport { postAuthorizationService };\n","import axios from 'axios';\nimport { AuthorizationResponse } from '../../../core/types';\nimport { ApiUrl } from './constants';\n\n/**\n * Service for authorization refresh.\n */\nconst getAuthorizationRefreshService = () => {\n  return axios.request<AuthorizationResponse>({\n    method: 'GET',\n    withCredentials: true,\n    url: ApiUrl.AuthorizationRefresh,\n  });\n};\n\nexport { getAuthorizationRefreshService };\n","import { axiosInstance } from '../utils/axios-instance';\n\nconst logoutService = async () => {\n  await axiosInstance.post('/logout');\n};\n\nexport { logoutService };\n","import axios from 'axios';\nimport { getAuthorizationRefreshService } from 'modules/user/services';\nimport { API_URL } from '../constants';\nimport { logoutService } from '../services/logout-service';\n\nconst axiosInstance = axios.create({\n  withCredentials: true,\n  baseURL: `${API_URL}/api`,\n});\n\naxiosInstance.interceptors.request.use((config) => {\n  if (config.headers) {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n  }\n\n  return config;\n});\n\naxiosInstance.interceptors.response.use(\n  (config) => {\n    return config;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401) {\n      try {\n        const response = await getAuthorizationRefreshService();\n\n        localStorage.setItem('token', response.data.accessToken);\n\n        return axiosInstance.request(originalRequest);\n      } catch (error) {\n        console.log(error);\n\n        await logoutService();\n\n        localStorage.removeItem('token');\n\n        // location.href = APPLICATION_URL; // TODO: Добавить переход на авторизацию\n      }\n    }\n\n    throw error;\n  }\n);\n\nexport { axiosInstance };\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const addMessageToChannel = createAsyncThunk(\n  'user/addMessageToChannel',\n  async ({ channel, message }: { channel: string; message: string }) => {\n    const response = await axiosInstance.post('/add-message-to-channel', { channel, message });\n\n    return response.data;\n  }\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getApprovals = createAsyncThunk('user/getApprovals', async () => {\n  const response = await axiosInstance.get('/approvals');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getChannelMessages = createAsyncThunk(\n  'user/getChannelMessages',\n  async ({ channel }: { channel: string }) => {\n    const response = await axiosInstance.post('/get-channel-messages', { channel });\n\n    return response.data;\n  }\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getChannels = createAsyncThunk('user/getChannels', async () => {\n  const response = await axiosInstance.get('/get-channels');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getInvites = createAsyncThunk('user/getInvites', async () => {\n  const response = await axiosInstance.get('/invites');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { UserResponse } from '../../modules/user/store/types';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getUsers = createAsyncThunk('user/getUsers', async () => {\n  const response = await axiosInstance.get<UserResponse[]>('/users');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getFriendsService } from '../services';\n\nexport const getFriendsAction = createAsyncThunk('user/getFriendsAction', getFriendsService);\n","import { axiosInstance } from '../../../core/utils/axios-instance';\n\nconst getFriendsService = async () => {\n  const response = await axiosInstance.get('/friends');\n\n  return response.data;\n};\n\nexport { getFriendsService };\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { registrationService } from '../../registration/services';\nimport { logoutService, serverLoadingService } from '../../../core/services';\nimport { getUsersService } from 'modules/user/services';\n\n/**\n * Action for authorization.\n */\nexport const postAuthorizationAction =\n  createAction<{ email: string; password: string }>('user/postAuthorizationAction');\n\n/**\n * Action for authorization refresh.\n */\nexport const getAuthorizationRefreshAction = createAction('user/getAuthorizationRefreshAction');\n\nexport const registrationAction = createAsyncThunk('user/registrationAction', registrationService);\nexport const logoutAction = createAsyncThunk('user/logoutAction', logoutService);\nexport const serverLoadingAction = createAsyncThunk('user/serverLoadingAction', serverLoadingService);\nexport const getUsersAction = createAsyncThunk('user/getUsersAction', getUsersService);\n","import { axiosInstance } from 'core/utils/axios-instance';\nimport { AuthorizationResponse } from 'core/types';\n\nconst registrationService = async ({ email, name, password }: { email: string; name: string; password: string }) => {\n  const response = await axiosInstance.post<AuthorizationResponse>('/registration', { email, name, password });\n\n  return response.data;\n};\n\nexport { registrationService };\n","import { axiosInstance } from '../utils/axios-instance';\n\nconst serverLoadingService = async () => {\n  const response = await axiosInstance.get('/server-loading');\n\n  return response.data;\n};\n\nexport { serverLoadingService };\n","import { axiosInstance } from 'core/utils/axios-instance';\nimport { UserResponse } from 'modules/user/store/types';\n\nconst getUsersService = async ({ searchValue }: { searchValue: string }) => {\n  const response = await axiosInstance.post<UserResponse[]>('/users', { searchValue });\n\n  return response.data;\n};\n\nexport { getUsersService };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { addMessageToChannel } from '../../../core/services/add-message-to-channel';\nimport { getApprovals } from '../../../core/services/get-approvals';\nimport { getChannelMessages } from '../../../core/services/get-channel-messages';\nimport { getChannels } from '../../../core/services/get-channels';\nimport { getInvites } from '../../../core/services/get-invites';\nimport { getUsers } from '../../../core/services/get-users';\nimport { AuthorizationResponse } from '../../../core/types';\nimport { getFriendsAction } from '../../friends/store/actions';\nimport { getUsersAction, logoutAction, registrationAction, serverLoadingAction } from './actions';\nimport { ChannelResponse, MessageResponse, UserResponse, UserState } from './types';\n\nconst initialState: UserState = {\n  id: '',\n  email: '',\n  name: '',\n  status: '',\n  token: localStorage.getItem('token') || '',\n  isAuthorizated: false,\n  users: [],\n  friends: [],\n  invites: [],\n  approvals: [],\n  isCall: false,\n  isIncomingCall: false,\n  isCallAccepted: false,\n  isCallCanceled: false,\n  channels: [],\n  channelMessages: [],\n  isLoading: false,\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setAuthorization: (state: UserState, { payload }: PayloadAction<AuthorizationResponse>) => {\n      state.id = payload.user.id;\n      state.email = payload.user.email;\n      state.name = payload.user.name;\n      state.status = payload.user.status;\n      state.token = payload.accessToken;\n      state.isAuthorizated = true;\n      localStorage.setItem('token', payload.accessToken);\n    },\n    setIsCall: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCall = payload;\n    },\n    setIsIncomingCall: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isIncomingCall = payload;\n    },\n    setIsCallAccepted: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCallAccepted = payload;\n    },\n    setIsCallCanceled: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCallCanceled = payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getUsers.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.users = payload;\n    });\n    builder.addCase(getFriendsAction.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.friends = payload;\n    });\n    builder.addCase(getInvites.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.invites = payload;\n    });\n    builder.addCase(getApprovals.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.approvals = payload;\n    });\n    builder.addCase(getChannels.fulfilled, (state: UserState, { payload }: PayloadAction<ChannelResponse[]>) => {\n      state.channels = payload;\n    });\n    builder.addCase(getChannelMessages.fulfilled, (state: UserState, { payload }: PayloadAction<MessageResponse[]>) => {\n      state.channelMessages = payload;\n    });\n    builder.addCase(addMessageToChannel.fulfilled, (state: UserState, { payload }: PayloadAction<MessageResponse>) => {\n      state.channelMessages = [...state.channelMessages, payload];\n    });\n    builder.addCase(\n      registrationAction.fulfilled,\n      (state: UserState, { payload }: PayloadAction<AuthorizationResponse>) => {\n        state.id = payload.user.id;\n        state.email = payload.user.email;\n        state.name = payload.user.name;\n        state.status = payload.user.status;\n        state.token = payload.accessToken;\n        state.isAuthorizated = true;\n        localStorage.setItem('token', payload.accessToken);\n      }\n    );\n    builder.addCase(logoutAction.fulfilled, (state: UserState) => {\n      state.id = '';\n      state.email = '';\n      state.name = '';\n      state.token = '';\n      state.status = '';\n      state.isAuthorizated = false;\n      localStorage.removeItem('token');\n    });\n    builder.addCase(serverLoadingAction.pending, (state: UserState) => {\n      state.isLoading = true;\n    });\n    builder.addCase(serverLoadingAction.fulfilled, (state: UserState) => {\n      state.isLoading = false;\n    });\n    builder.addCase(getUsersAction.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.users = payload;\n    });\n  },\n});\n\nexport const { setAuthorization, setIsCall, setIsIncomingCall, setIsCallAccepted, setIsCallCanceled } =\n  userSlice.actions;\n\nexport const userReducer = userSlice.reducer;\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { getAuthorizationRefreshAction, postAuthorizationAction } from './actions';\nimport { setAuthorization } from './user';\nimport { getAuthorizationRefreshService, postAuthorizationService } from 'modules/user/services';\n\n/**\n * Saga for user authorization.\n */\nconst postAuthorizationSaga = function* ({ payload }: ReturnType<typeof postAuthorizationAction>): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof postAuthorizationService>> = yield call(\n      postAuthorizationService,\n      payload\n    );\n    yield put(setAuthorization(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user authorization.\n */\nconst getAuthorizationRefreshSaga = function* (): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof getAuthorizationRefreshService>> = yield call(\n      getAuthorizationRefreshService\n    );\n    yield put(setAuthorization(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user module sagas.\n */\nconst userSaga = function* (): SagaIterator {\n  yield all([\n    takeEvery(postAuthorizationAction.type, postAuthorizationSaga),\n    takeEvery(getAuthorizationRefreshAction.type, getAuthorizationRefreshSaga),\n  ]);\n};\n\nexport { userSaga };\n","import { all, fork } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { userSaga } from 'modules/user/store/sagas';\n\nconst sagas = [userSaga];\n\n/**\n * Saga for all modules sagas.\n */\nconst rootSaga = function* (): SagaIterator {\n  yield all(sagas.map((saga) => fork(saga)));\n};\n\nexport { rootSaga };\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { userReducer } from 'modules/user/store';\nimport { rootSaga } from 'core/store/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport { store };\n","import { RootState } from '../../../core/store/types';\n\nexport const userIdSelector = (state: RootState) => state.user.id;\nexport const userEmailSelector = (state: RootState) => state.user.email;\nexport const userTokenSelector = (state: RootState) => state.user.token;\nexport const userIsAuthorizatedSelector = (state: RootState) => state.user.isAuthorizated;\nexport const userUsersSelector = (state: RootState) => state.user.users;\nexport const userFriendsSelector = (state: RootState) => state.user.friends;\nexport const userInvitesSelector = (state: RootState) => state.user.invites;\nexport const userApprovalsSelector = (state: RootState) => state.user.approvals;\nexport const userNameSelector = (state: RootState) => state.user.name;\nexport const userStatusSelector = (state: RootState) => state.user.status;\nexport const userIsCallSelector = (state: RootState) => state.user.isCall;\nexport const userIsIncomingCallSelector = (state: RootState) => state.user.isIncomingCall;\nexport const userIsCallAcceptedSelector = (state: RootState) => state.user.isCallAccepted;\nexport const userIsCallCanceledSelector = (state: RootState) => state.user.isCallCanceled;\nexport const userChannelsSelector = (state: RootState) => state.user.channels;\nexport const userChannelMessagesSelector = (state: RootState) => state.user.channelMessages;\nexport const userIsLoadingSelector = (state: RootState) => state.user.isLoading;\n","import { Button as MUIButton, ButtonProps as MUIButtonProps } from '@mui/material';\nimport { memo } from 'react';\n\nconst Button = ({ children, ...props }: MUIButtonProps) => {\n  return (\n    <MUIButton disableElevation {...props}>\n      {children}\n    </MUIButton>\n  );\n};\n\nexport const ButtonMemoized = memo(Button);\n","import { memo } from 'react';\nimport { TextField as MUITextField, TextFieldProps as MUITextFieldProps } from '@mui/material';\n\nconst TextField = ({ ...props }: MUITextFieldProps) => {\n  return <MUITextField {...props} />;\n};\n\nexport const TextFieldMemoized = memo(TextField);\n","import { createTheme, colors } from '@mui/material';\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      light: colors.indigo.A400,\n      main: colors.indigo[500],\n      dark: colors.indigo[800],\n    },\n  },\n});\n","export default __webpack_public_path__ + \"assets/images/authorization-image.6642b50856b9fc50fde3936da1774bf9.jpg\";","import { Box } from '@mui/material';\nimport { memo, ReactElement } from 'react';\n\nconst AuthorizationLayout = ({ children }: { children: ReactElement }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100%',\n      }}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport const AuthorizationLayoutMemoized = memo(AuthorizationLayout);\n","import { memo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button } from 'core/components/button';\nimport { TextField } from 'core/components/text-field';\nimport { Box, InputAdornment, IconButton, Typography, Link } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { theme } from 'core/theme';\nimport { useNavigate } from 'react-router-dom';\nimport { postAuthorizationAction } from 'modules/user/store/actions';\nimport authorizationImage from 'core/assets/images/authorization-image.jpg';\nimport { AuthorizationLayout } from 'core/layouts/authorization-layout';\nimport { css } from '@emotion/css';\n\nconst Authorization = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  return (\n    <AuthorizationLayout>\n      <Box\n        sx={{\n          display: 'grid',\n          width: '920px',\n          gridTemplateColumns: '448px 472px',\n          borderRadius: '20px',\n          border: `1px solid ${theme.palette.grey[300]}`,\n          overflow: 'hidden',\n        }}\n      >\n        <Box>\n          <img\n            className={css`\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n            `}\n            src={authorizationImage}\n            alt=\"Илюстрация.\"\n          />\n        </Box>\n        <Box sx={{ padding: '48px 56px', backgroundColor: `${theme.palette.common.white}` }}>\n          <Box sx={{ display: 'grid', rowGap: '16px' }}>\n            <Box sx={{ display: 'grid', rowGap: '32px' }}>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"h5\">Войти в свой профиль</Typography>\n                <Box sx={{ display: 'grid', rowGap: '24px' }}>\n                  <TextField\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Логин\"\n                    value={email}\n                    onChange={(event) => setEmail(event.target.value)}\n                    placeholder=\"Введите ваш email\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type={isShowPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Пароль\"\n                    value={password}\n                    onChange={(event) => setPassword(event.target.value)}\n                    placeholder=\"Введите ваш пароль\"\n                    autoComplete=\"off\"\n                    fullWidth\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={() => setIsShowPassword(!isShowPassword)}>\n                            {isShowPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Box>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                onClick={() => {\n                  dispatch(postAuthorizationAction({ email, password }));\n                }}\n              >\n                Войти\n              </Button>\n            </Box>\n            <Typography variant=\"subtitle2\">\n              У Вас ещё нет профиля?{' '}\n              <Link\n                sx={{ cursor: 'pointer' }}\n                underline=\"hover\"\n                onClick={(event) => {\n                  event.preventDefault();\n\n                  navigate('/registration');\n                }}\n              >\n                Зарегистрироваться\n              </Link>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </AuthorizationLayout>\n  );\n};\n\nexport const AuthorizationMemoized = memo(Authorization);\n","import { memo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box, Typography, TextField, InputAdornment, IconButton, Link } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { theme } from 'core/theme';\nimport { Button } from 'core/components/button';\nimport { useNavigate } from 'react-router-dom';\nimport { registrationAction } from 'modules/user/store/actions';\nimport authorizationImage from 'core/assets/images/authorization-image.jpg';\nimport { AuthorizationLayout } from 'core/layouts/authorization-layout';\nimport { css } from '@emotion/css';\n\nconst Registration = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  return (\n    <AuthorizationLayout>\n      <Box\n        sx={{\n          display: 'grid',\n          width: '920px',\n          gridTemplateColumns: '448px 472px',\n          borderRadius: '20px',\n          border: `1px solid ${theme.palette.grey[300]}`,\n          overflow: 'hidden',\n        }}\n      >\n        <Box>\n          <img\n            className={css`\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n            `}\n            src={authorizationImage}\n            alt=\"Илюстрация.\"\n          />\n        </Box>\n        <Box sx={{ padding: '48px 56px', backgroundColor: `${theme.palette.common.white}` }}>\n          <Box sx={{ display: 'grid', rowGap: '16px' }}>\n            <Box sx={{ display: 'grid', rowGap: '24px' }}>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"h5\">Создать учётную запись</Typography>\n                <Box sx={{ display: 'grid', rowGap: '24px' }}>\n                  <TextField\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Адрес электронной почты\"\n                    value={email}\n                    onChange={(event) => setEmail(event.target.value)}\n                    placeholder=\"Введите ваш email\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    label=\"Имя пользователя\"\n                    value={name}\n                    onChange={(event) => setName(event.target.value)}\n                    placeholder=\"Введите ваше имя\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type={isShowPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Пароль\"\n                    value={password}\n                    onChange={(event) => setPassword(event.target.value)}\n                    placeholder=\"Введите ваш пароль\"\n                    autoComplete=\"off\"\n                    fullWidth\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={() => setIsShowPassword(!isShowPassword)}>\n                            {isShowPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Box>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"caption\" color={theme.palette.grey[500]}>\n                  Регистрируясь, Вы соглашаетесь с{' '}\n                  <Link sx={{ cursor: 'pointer' }} underline=\"hover\">\n                    политикой обработки персональных данных\n                  </Link>\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={() => {\n                    dispatch(registrationAction({ email, name, password }));\n                  }}\n                >\n                  Зарегистрироваться\n                </Button>\n              </Box>\n            </Box>\n            <Typography variant=\"subtitle2\">\n              <Link\n                sx={{ cursor: 'pointer' }}\n                underline=\"hover\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  navigate('/authorization');\n                }}\n              >\n                Уже зарегистрированы?\n              </Link>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </AuthorizationLayout>\n  );\n};\n\nexport const RegistrationMemoized = memo(Registration);\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Authorization } from 'modules/authorization/pages/authorization';\nimport { Registration } from 'modules/registration/pages/registration';\n\nconst PublicRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"authorization\" element={<Authorization />} />\n      <Route path=\"registration\" element={<Registration />} />\n      <Route path=\"*\" element={<Navigate to=\"authorization\" />} />\n    </Routes>\n  );\n};\n\nexport const PublicRoutesMemoized = memo(PublicRoutes);\n","import { memo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Group, Dashboard, Settings } from '@mui/icons-material';\nimport { Box, Divider, Tooltip } from '@mui/material';\nimport { theme } from '../../theme';\n\nconst Navigation = () => {\n  const navigate = useNavigate();\n\n  //  TODO: Добавить Drawer компонент\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        rowGap: '24px',\n        height: '100%',\n        alignContent: 'start',\n        padding: '25px 16px',\n        justifyContent: 'center',\n      }}\n    >\n      <Box sx={{ display: 'grid', rowGap: '16px' }}>\n        <Tooltip title=\"Друзья\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/friends')}\n          >\n            <Group />\n          </Box>\n        </Tooltip>\n        <Tooltip title=\"Каналы\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/channels')}\n          >\n            <Dashboard />\n          </Box>\n        </Tooltip>\n      </Box>\n      <Divider />\n      <Tooltip title=\"Профиль\" arrow placement=\"right\">\n        <Box\n          sx={{\n            display: 'grid',\n            padding: '8px',\n            backgroundColor: theme.palette.grey[400],\n            cursor: 'pointer',\n            borderRadius: '8px',\n            justifyContent: 'center',\n            width: '40px',\n          }}\n          onClick={() => navigate('/profile')}\n        >\n          <Settings />\n        </Box>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport const NavigationMemoized = memo(Navigation);\n","import { memo } from 'react';\nimport { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { MicOff, Settings, VideocamOff } from '@mui/icons-material';\nimport { useSelector } from 'react-redux';\nimport { userIdSelector, userNameSelector, userStatusSelector } from '../../../modules/user/store/selectors';\n\nconst UserControl = () => {\n  const userName = useSelector(userNameSelector);\n  const userId = useSelector(userIdSelector);\n  const userStatus = useSelector(userStatusSelector);\n\n  return (\n    <Box sx={{ display: 'grid', alignItems: 'center', backgroundColor: theme.palette.grey[300], padding: '12px 20px' }}>\n      <Box sx={{ display: 'grid', columnGap: '8px', gridTemplateColumns: '40px 1fr 104px' }}>\n        {/* Аватар пользователя */}\n        <Box\n          sx={{\n            '.MuiBadge-badge': {\n              border: `1px solid ${theme.palette.common.white}`,\n            },\n            '.MuiBadge-colorSuccess': {\n              backgroundColor: theme.palette.success.light,\n            },\n            '.MuiBadge-colorError': {\n              backgroundColor: theme.palette.error.light,\n            },\n          }}\n        >\n          <Badge\n            overlap=\"circular\"\n            variant=\"dot\"\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            color={userStatus === 'online' ? 'success' : 'error'}\n          >\n            <Avatar sx={{ backgroundColor: colors.deepPurple[500] }}></Avatar>\n          </Badge>\n        </Box>\n        {/* Имя пользователя */}\n        <Box>\n          <Typography variant=\"body2\">{userName}</Typography>\n          <Typography sx={{ color: theme.palette.grey[500] }} variant=\"caption\">\n            #{userId.slice(-4)}\n          </Typography>\n        </Box>\n        {/* Кнопки управления */}\n        <Box sx={{ display: 'grid', columnGap: '16px', gridTemplateColumns: 'repeat(3, 24px)', alignItems: 'center' }}>\n          <MicOff sx={{ color: theme.palette.grey[700] }} />\n          <VideocamOff sx={{ color: theme.palette.grey[700] }} />\n          <Settings sx={{ color: theme.palette.grey[700] }} />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserControlMemoized = memo(UserControl);\n","import { io } from 'socket.io-client';\nimport { API_URL } from '../constants';\n\nconst socket = io(API_URL, {\n  transports: ['websocket'],\n});\n\nexport { socket };\n","import { memo } from 'react';\nimport { Avatar, colors, Badge, Box, Typography, IconButton } from '@mui/material';\nimport { theme } from '../../theme';\nimport { DeleteOutline } from '@mui/icons-material';\nimport { socket } from '../../utils/socket';\nimport { useSelector } from 'react-redux';\nimport { userIdSelector } from '../../../modules/user/store/selectors';\nimport { useNavigate } from 'react-router-dom';\n\nconst User = ({\n  name,\n  status,\n  channelId,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  email: string;\n  channelId?: string;\n}) => {\n  const userId = useSelector(userIdSelector);\n  const navigate = useNavigate();\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr max-content',\n        columnGap: '8px',\n        alignItems: 'center',\n        padding: '8px 12px',\n        borderRadius: '8px',\n        cursor: 'pointer',\n        ':hover': {\n          backgroundColor: theme.palette.grey[300],\n          '.delete-icon': {\n            display: 'grid',\n          },\n        },\n        '.MuiBadge-badge': {\n          border: `1px solid ${theme.palette.common.white}`,\n        },\n        '.MuiBadge-colorSuccess': {\n          backgroundColor: theme.palette.success.light,\n        },\n        '.MuiBadge-colorError': {\n          backgroundColor: theme.palette.error.light,\n        },\n      }}\n      onClick={() => {\n        socket.emit('on-channel-join', channelId, userId);\n        navigate('/messages');\n      }}\n    >\n      <Badge\n        overlap=\"circular\"\n        variant=\"dot\"\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        color={status === 'online' ? 'success' : 'error'}\n      >\n        <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n      </Badge>\n      <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n        <Typography variant=\"body2\">{name ? name : ''}</Typography>\n        <Typography variant=\"caption\">В сети</Typography>\n      </Box>\n      <Box className=\"delete-icon\" sx={{ display: 'none' }}>\n        <IconButton>\n          <DeleteOutline sx={{ color: theme.palette.grey[700] }} />\n        </IconButton>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserMemoized = memo(User);\n","import { memo, useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Navigation } from '../../components/navigation';\nimport { UserControl } from '../../components/user-control';\nimport { User } from '../../components/user';\nimport { Button } from '../../components/button';\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { axiosInstance } from '../../utils/axios-instance';\n\nconst FriendsLayout = () => {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n\n  useEffect(() => {\n    const getPersonalMessage = async () => {\n      const response = await axiosInstance.post('/get-personal-messages-channels');\n\n      setUsersMessages(response.data);\n    };\n\n    getPersonalMessage();\n  }, []);\n\n  useEffect(() => {\n    console.log('usersMessages', usersMessages);\n  }, [usersMessages]);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px 1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Навигация по разделу друзья */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(2, max-content)',\n            columnGap: '24px',\n            padding: '16px 24px',\n            borderBottom: `1px solid ${theme.palette.grey[400]}`,\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">Друзья</Typography>\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(5, max-content)',\n              columnGap: '8px',\n            }}\n          >\n            <Button\n              variant={pathname.includes('all-friends') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('all-friends')}\n            >\n              Все друзья\n            </Button>\n            <Button\n              variant={pathname.includes('friends-online') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-online')}\n            >\n              В сети\n            </Button>\n            <Button\n              variant={pathname.includes('friends-invites') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-invites')}\n            >\n              Заявки\n            </Button>\n            <Button\n              variant={pathname.includes('friends-approvals') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-approvals')}\n            >\n              Ожидание\n            </Button>\n            <Button\n              variant={pathname.includes('add-to-friends') ? 'contained' : 'outlined'}\n              color=\"success\"\n              onClick={() => navigate('add-to-friends')}\n            >\n              Добавить в друзья\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const FriendsLayoutMemoized = memo(FriendsLayout);\n","import { memo } from 'react';\nimport { FriendsLayout } from '../../../../core/layouts/friends-layout';\n\nconst Friends = () => {\n  return <FriendsLayout />;\n};\n\nexport const FriendsMemoized = memo(Friends);\n","import { memo, useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Navigation } from '../../components/navigation';\nimport { UserControl } from '../../components/user-control';\nimport { User } from '../../components/user';\nimport { Button } from '../../components/button';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { TextField } from '../text-field';\nimport { socket } from '../../utils/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userChannelMessagesSelector, userIdSelector } from '../../../modules/user/store/selectors';\nimport { getChannelMessages } from '../../services/get-channel-messages';\n\nconst Messages = () => {\n  const navigate = useNavigate();\n\n  const userId = useSelector(userIdSelector);\n  const dispatch = useDispatch();\n\n  const channelMessages = useSelector(userChannelMessagesSelector);\n\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n  const [message, setMessage] = useState('');\n  const [channel, setChannel] = useState<string>('');\n\n  // Добавляет сообщение в канал\n  const handleSendMessage = () => {\n    if (channel && message) {\n      // dispatch(addMessageToChannel({ channel, message }));\n\n      // ON-MESSAGE - событие отправки сообщения в канал\n      socket.emit('on-message', channel, message, userId);\n\n      setMessage('');\n    }\n  };\n\n  useEffect(() => {\n    const getPersonalMessage = async () => {\n      const response = await axiosInstance.post('/get-personal-messages-channels');\n\n      setUsersMessages(response.data);\n    };\n\n    getPersonalMessage();\n\n    // ON-CHANNEL-JOIN - событие подключения пользователей к комнате\n    socket.on('on-channel-join', (message: string, channel: string) => {\n      console.log('Сообщение в канале:', message);\n      setChannel(channel);\n\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n\n    if (channel) {\n      dispatch(getChannelMessages({ channel }));\n    }\n\n    socket.on('on-message', (channel: string) => {\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log('channelMessages', channelMessages);\n  }, [channelMessages]);\n\n  useEffect(() => {\n    console.log('usersMessages', usersMessages);\n  }, [usersMessages]);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends/all-friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Сообщения */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateRows: '1fr max-content',\n            rowGap: '16px',\n            margin: '24px 16px',\n            backgroundColor: theme.palette.common.white,\n            borderRadius: '8px',\n            padding: '16px',\n            overflow: 'hidden',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              overflow: 'hidden',\n              gridTemplateRows: 'max-content 1fr',\n              rowGap: '16px',\n            }}\n          >\n            <Typography>Сообщения:</Typography>\n            <Box sx={{ display: 'grid', overflow: 'scroll', rowGap: '8px', alignContent: 'start', height: '100%' }}>\n              {channelMessages?.map((message) => {\n                return (\n                  <Box\n                    key={message._id}\n                    sx={{\n                      padding: '8px',\n                      border: '1px solid #000000',\n                      display: 'grid',\n                      borderRadius: '8px',\n                    }}\n                  >\n                    <User\n                      id={message._id}\n                      name={message.author.name}\n                      status={message.author.status}\n                      email={message.author.email}\n                    />\n                    <Typography>{message.text}</Typography>\n                  </Box>\n                );\n              })}\n            </Box>\n          </Box>\n          <Box sx={{ display: 'grid', gridTemplateColumns: '1fr max-content', columnGap: '16px' }}>\n            <TextField\n              type=\"text\"\n              id=\"message\"\n              name=\"message\"\n              label=\"Сообщение\"\n              value={message}\n              onChange={(event) => setMessage(event.target.value)}\n              placeholder=\"Введите текст сообщения\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n              Отправить сообщение\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const MessagesMemoized = memo(Messages);\n","import { memo } from 'react';\nimport { Box, Typography, Link } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userEmailSelector, userIdSelector, userNameSelector } from '../../../user/store/selectors';\nimport { useNavigate } from 'react-router-dom';\nimport { Navigation } from '../../../../core/components/navigation';\nimport { Button } from '../../../../core/components/button';\nimport { logoutAction } from '../../../user/store/actions';\nimport { socket } from '../../../../core/utils/socket';\n\nconst Profile = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const userEmail = useSelector(userEmailSelector);\n  const userName = useSelector(userNameSelector);\n  const userId = useSelector(userIdSelector);\n\n  return (\n    <Box\n      sx={{\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        width: '100%',\n        height: '100%',\n        alignContent: 'start',\n      }}\n    >\n      <Navigation />\n      <Box>\n        <Typography variant=\"h5\">Ваш email: {userEmail}</Typography>\n        <Typography variant=\"h5\">Ваше имя: {userName}</Typography>\n        {/* TODO: Нужен пароль (скрытый или последние символы) */}\n        <Typography variant=\"h5\">Ваш пароль:</Typography>\n        {/* TODO: Нужен статус */}\n        <Typography variant=\"h5\">Статус:</Typography>\n        {/* TODO: Нужна дата рождения */}\n        <Typography variant=\"h5\">Дата рождения:</Typography>\n        {/* TODO: Нужен аватар */}\n        <Typography variant=\"h5\">Ваш аватар:</Typography>\n        <Typography variant=\"h5\">\n          <Link sx={{ cursor: 'pointer' }} underline=\"hover\" onClick={() => navigate(-1)}>\n            Назад\n          </Link>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              dispatch(logoutAction());\n\n              socket.emit('on-disconnect', userId);\n            }}\n          >\n            Выйти из аккаунта\n          </Button>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport const ProfileMemoized = memo(Profile);\n","import { memo } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Navigation } from '../../components/navigation';\nimport { UserControl } from '../../components/user-control';\n\nconst ChannelsLayout = () => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Каналы</Typography>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box sx={{ padding: '0 8px', margin: '28px 0', overflow: 'scroll' }}>\n          <Box sx={{ display: 'grid', rowGap: '12px' }}>\n            {Array.from(Array(25).keys()).map((value) => {\n              return <Box key={value} />;\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок текстовых сообщений или видеочата */}\n      <Box sx={{ backgroundColor: theme.palette.grey[600] }}></Box>\n    </Box>\n  );\n};\n\nexport const ChannelsLayoutMemoized = memo(ChannelsLayout);\n","import { memo } from 'react';\nimport { ChannelsLayout } from '../../../../core/layouts/channels-layout';\n\nconst Channels = () => {\n  return <ChannelsLayout />;\n};\n\nexport const ChannelsMemoized = memo(Channels);\n","import { Avatar, Badge, Box, colors, Menu, MenuItem, Typography } from '@mui/material';\nimport { memo, useState } from 'react';\nimport { Chat, Call, MoreVert } from '@mui/icons-material';\nimport { theme } from '../../theme';\nimport { socket } from '../../utils/socket';\nimport { axiosInstance } from '../../utils/axios-instance';\n\nconst UserFriends = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLDivElement | null>(null);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 24px)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Box sx={{ cursor: 'pointer' }}>\n          <Chat />\n        </Box>\n        <Box sx={{ cursor: 'pointer' }}>\n          <Call />\n        </Box>\n        <Box sx={{ cursor: 'pointer' }} onClick={(event) => setAnchorEl(event.currentTarget)}>\n          <MoreVert />\n        </Box>\n      </Box>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuItem onClick={() => setAnchorEl(null)}>Написать</MenuItem>\n        <MenuItem onClick={() => setAnchorEl(null)}>Позвонить</MenuItem>\n        <MenuItem\n          onClick={async () => {\n            setAnchorEl(null);\n\n            const response = await axiosInstance.post('/remove-from-friends', { friendId: id });\n\n            socket.emit('on-remove-from-friends', id); // Отправка события пользователю, которого удаляют из друзей\n\n            return response.data;\n          }}\n        >\n          Удалить из друзей\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport const UserFriendsMemoized = memo(UserFriends);\n","import { useSelector } from 'react-redux';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userFriendsSelector } from '../../../modules/user/store/selectors';\nimport { UserFriends } from '../user-friends';\n\nconst AllFriends = () => {\n  const friends = useSelector(userFriendsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      <Box sx={{ padding: '8px 12px' }}>\n        <Typography variant=\"h6\">Все друзья: {friends.length > 0 ? friends.length : 0}</Typography>\n      </Box>\n      <Box sx={{ display: 'grid', alignContent: 'start', rowGap: '8px' }}>\n        {friends.map((friend) => {\n          return <UserFriends key={friend._id} id={friend._id} name={friend.name} status={friend.status} />;\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AllFriendsMemoized = memo(AllFriends);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userFriendsSelector } from '../../../modules/user/store/selectors';\nimport { UserFriends } from '../user-friends';\n\nconst FriendsOnline = () => {\n  const friends = useSelector(userFriendsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {friends.map((friend) => {\n        return friend.status === 'online' ? (\n          <UserFriends key={friend._id} id={friend._id} name={friend.name} status={friend.status} />\n        ) : null;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsOnlineMemoized = memo(FriendsOnline);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddToFriends = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/add-to-friends', { friendId: id });\n\n            socket.emit('on-add-to-friends', id); // Отправка события пользователю который ждет принятие приглашения\n\n            return response.data;\n          }}\n        >\n          Добавить\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/remove-invite-to-friends', { friendId: id });\n\n            socket.emit('on-remove-invite-to-friends', id); // Отправка события пользователю который ждет принятия или отклонения приглашения\n\n            return response.data;\n          }}\n        >\n          Отклонить\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddToFriendsMemoized = memo(UserAddToFriends);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userInvitesSelector } from '../../../modules/user/store/selectors';\nimport { UserAddToFriends } from '../user-add-to-friends';\n\nconst FriendsInvites = () => {\n  const invites = useSelector(userInvitesSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {invites.map((invite) => {\n        return <UserAddToFriends key={invite._id} id={invite._id} name={invite.name} status={invite.status} />;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsInvitesMemoized = memo(FriendsInvites);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserApprovals = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Typography variant=\"body1\">Ожидает добавления в друзья</Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/remove-invite-to-friends', { friendId: id });\n\n            socket.emit('on-remove-invite-to-friends', id); // Отправка события пользователю который ждет принятия или отклонения приглашения\n\n            return response.data;\n          }}\n        >\n          Отклонить\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserApprovalsMemoized = memo(UserApprovals);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userApprovalsSelector } from '../../../modules/user/store/selectors';\nimport { UserApprovals } from '../user-approvals';\n\nconst FriendsApprovals = () => {\n  const approvals = useSelector(userApprovalsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {approvals.map((approval) => {\n        return <UserApprovals key={approval._id} id={approval._id} name={approval.name} status={approval.status} />;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsApprovalsMemoized = memo(FriendsApprovals);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { Dispatch, memo, SetStateAction } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddInviteToFriends = ({\n  id,\n  name,\n  status,\n  setSearchValue,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  setSearchValue: Dispatch<SetStateAction<string>>;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(1, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            setSearchValue('');\n\n            const response = await axiosInstance.post('/add-invite-to-friends', { friendId: id });\n\n            socket.emit('on-add-invite-to-friends', id);\n\n            return response.data;\n          }}\n        >\n          Добавить в друзья\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddInviteToFriendsMemoized = memo(UserAddInviteToFriends);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo, useState, useEffect } from 'react';\nimport { userUsersSelector } from '../../../modules/user/store/selectors';\nimport { TextField } from '../text-field';\nimport { getUsersAction } from '../../../modules/user/store/actions';\nimport { UserAddInviteToFriends } from '../user-add-invite-to-friends';\n\nconst AddToFriends = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(userUsersSelector);\n\n  const [searchValue, setSearchValue] = useState('');\n\n  useEffect(() => {\n    dispatch(getUsersAction({ searchValue }));\n  }, [searchValue]);\n\n  return (\n    <Box sx={{ padding: '0 8px 0 16px', margin: '16px 8px 16px 0' }}>\n      <TextField\n        fullWidth\n        size=\"small\"\n        placeholder=\"Поиск по друзьям\"\n        value={searchValue}\n        onChange={(event) => setSearchValue(event.target.value)}\n      />\n      <Box\n        sx={{\n          padding: '0 8px 0 16px',\n          margin: '16px 8px 16px 0',\n          display: 'grid',\n          alignContent: 'start',\n          rowGap: '8px',\n          overflowY: 'scroll',\n          '&::-webkit-scrollbar': {\n            width: '4px',\n          },\n          '&::-webkit-scrollbar-track': {\n            backgroundColor: 'none',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.grey[300],\n            border: `1px solid ${theme.palette.grey[500]}`,\n            borderRadius: '8px',\n          },\n        }}\n      >\n        {users.map((user) => {\n          return (\n            <UserAddInviteToFriends\n              key={user._id}\n              id={user._id}\n              name={user.name}\n              status={user.status}\n              setSearchValue={setSearchValue}\n            />\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AddToFriendsMemoized = memo(AddToFriends);\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Friends } from 'modules/friends/pages/friends';\nimport { Messages } from 'core/components/messages';\nimport { Profile } from 'modules/profile/pages/profile';\nimport { Channels } from 'modules/channels/pages/channels';\nimport { AllFriends } from 'core/components/all-friends';\nimport { FriendsOnline } from 'core/components/friends-online';\nimport { FriendsInvites } from 'core/components/friends-invites';\nimport { FriendsApprovals } from 'core/components/friends-approvals';\nimport { AddToFriends } from 'core/components/add-to-friends';\n\nconst PrivateRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"friends\" element={<Friends />}>\n        <Route path=\"all-friends\" element={<AllFriends />} />\n        <Route path=\"friends-online\" element={<FriendsOnline />} />\n        <Route path=\"friends-invites\" element={<FriendsInvites />} />\n        <Route path=\"friends-approvals\" element={<FriendsApprovals />} />\n        <Route path=\"add-to-friends\" element={<AddToFriends />} />\n      </Route>\n      <Route path=\"messages\" element={<Messages />} />\n      <Route path=\"profile\" element={<Profile />} />\n      <Route path=\"channels\" element={<Channels />} />\n      <Route path=\"*\" element={<Navigate to=\"friends/all-friends\" />} />\n    </Routes>\n  );\n};\n\nexport const PrivateRoutesMemoized = memo(PrivateRoutes);\n","import { memo } from 'react';\nimport { PrivateRoutes, PublicRoutes } from 'core/routes';\n\ntype AppProps = {\n  isAuthorizated: boolean;\n};\n\nconst App = ({ isAuthorizated }: AppProps) => {\n  return isAuthorizated ? <PrivateRoutes /> : <PublicRoutes />;\n};\n\nexport const AppMemoized = memo(App);\n","import { memo } from 'react';\nimport { CircularProgress } from '@mui/material';\nimport { AuthorizationLayout } from '../../layouts/authorization-layout';\n\nconst Loader = () => {\n  return (\n    <AuthorizationLayout>\n      <CircularProgress />\n    </AuthorizationLayout>\n  );\n};\n\nexport const LoaderMemoized = memo(Loader);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userIdSelector, userIsAuthorizatedSelector, userIsLoadingSelector } from 'modules/user/store/selectors';\nimport { getUsers } from 'core/services/get-users';\nimport { getInvites } from 'core/services/get-invites';\nimport { getApprovals } from 'core/services/get-approvals';\nimport { App } from 'core/components/app';\nimport { getAuthorizationRefreshAction, serverLoadingAction } from 'modules/user/store/actions';\nimport { getFriendsAction } from 'modules/friends/store/actions';\nimport { socket } from 'core/utils/socket';\nimport { Loader } from 'core/components/loader';\n\nconst AppContainer = () => {\n  const dispatch = useDispatch();\n\n  const isAuthorizated = useSelector(userIsAuthorizatedSelector);\n  const userId = useSelector(userIdSelector);\n  const isLoading = useSelector(userIsLoadingSelector);\n\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      dispatch(getAuthorizationRefreshAction());\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   // TODO: Запрашивать при изменении конкретных данных точечно\n\n  //   dispatch(serverLoadingAction());\n\n  //   if (userId) {\n  //     socket.emit('on-connect', userId);\n\n  //     socket.on('on-connect', () => {\n  //       dispatch(getUsers());\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n\n  //       dispatch(checkAuthorizationAction()); // Для повторного получения статуса пользователя при подключении\n  //     });\n\n  //     socket.on('on-disconnect', () => {\n  //       dispatch(getUsers());\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-add-invite-to-friends', () => {\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-add-to-friends', () => {\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-remove-from-friends', () => {\n  //       dispatch(getFriendsAction());\n  //     });\n\n  //     socket.on('on-remove-invite-to-friends', () => {\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n  //   }\n  // }, [userId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return <App isAuthorizated={isAuthorizated} />;\n};\n\nexport { AppContainer };\n","import { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material';\nimport { injectGlobal } from '@emotion/css';\nimport { store } from 'core/store';\nimport { AppContainer } from 'core/containers/app-container';\nimport { theme } from 'core/theme';\n\nconst Root = () => {\n  injectGlobal`\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n\n    html {\n      box-sizing: border-box;\n    }\n\n    html,\n    body,\n    .root {\n      height: 100%;\n    }\n\n    body {\n      margin: 0;\n      background: radial-gradient(105.05% 99.28% at 50% 29.72%, #8c9eff 0%, #536dfe 42.9%, #536dfe 61.7%, #3d5afe 84.71%, #304ffe 100%);\n      background-repeat: no-repeat;\n    }\n\n    input:-webkit-autofill,\n    input:-webkit-autofill:hover,\n    input:-webkit-autofill:focus,\n    input:-webkit-autofill:active {\n      box-shadow: 0 0 0 30px #ffffff inset;\n    }\n  `;\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <HashRouter>\n          <AppContainer />\n        </HashRouter>\n      </ThemeProvider>\n    </Provider>\n  );\n};\n\nrender(<Root />, document.querySelector('.root'));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkvideo_calls\"] = globalThis[\"webpackChunkvideo_calls\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [693], () => (__webpack_require__(869)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","API_URL","ApiUrl","Authorization","AuthorizationRefresh","postAuthorizationService","params","axiosInstance","request","method","data","url","getAuthorizationRefreshService","withCredentials","logoutService","post","baseURL","interceptors","use","config","headers","localStorage","getItem","response","error","originalRequest","status","setItem","accessToken","console","log","removeItem","addMessageToChannel","channel","message","getApprovals","get","getChannelMessages","getChannels","getInvites","getUsers","getFriendsAction","postAuthorizationAction","getAuthorizationRefreshAction","registrationAction","email","name","password","logoutAction","serverLoadingAction","getUsersAction","searchValue","initialState","id","token","isAuthorizated","users","friends","invites","approvals","isCall","isIncomingCall","isCallAccepted","isCallCanceled","channels","channelMessages","isLoading","userSlice","reducers","setAuthorization","state","payload","user","setIsCall","setIsIncomingCall","setIsCallAccepted","setIsCallCanceled","extraReducers","builder","addCase","fulfilled","pending","actions","userReducer","reducer","postAuthorizationSaga","getAuthorizationRefreshSaga","sagas","type","sagaMiddleware","store","middleware","run","map","saga","userIdSelector","userEmailSelector","userIsAuthorizatedSelector","userUsersSelector","userFriendsSelector","userInvitesSelector","userApprovalsSelector","userNameSelector","userStatusSelector","userChannelMessagesSelector","userIsLoadingSelector","ButtonMemoized","memo","children","props","disableElevation","TextFieldMemoized","theme","createTheme","palette","primary","light","main","dark","AuthorizationLayoutMemoized","Box","sx","display","alignItems","justifyContent","height","AuthorizationMemoized","dispatch","navigate","setEmail","useState","setPassword","isShowPassword","setIsShowPassword","width","gridTemplateColumns","borderRadius","border","grey","overflow","className","src","alt","padding","backgroundColor","common","white","rowGap","Typography","variant","label","value","onChange","event","target","placeholder","autoComplete","fullWidth","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","color","size","Link","cursor","underline","preventDefault","RegistrationMemoized","setName","TextField","PublicRoutesMemoized","path","element","to","NavigationMemoized","alignContent","Tooltip","title","arrow","placement","Group","Dashboard","Divider","Settings","UserControlMemoized","userName","userId","userStatus","columnGap","success","Badge","overlap","anchorOrigin","vertical","horizontal","Avatar","slice","MicOff","VideocamOff","socket","io","transports","UserMemoized","channelId","DeleteOutline","FriendsLayoutMemoized","pathname","usersMessages","setUsersMessages","useEffect","gridTemplateRows","borderBottom","margin","overflowY","key","userData","_id","includes","FriendsMemoized","MessagesMemoized","setMessage","setChannel","author","text","ProfileMemoized","userEmail","top","left","ChannelsLayoutMemoized","Array","from","keys","ChannelsMemoized","UserFriendsMemoized","anchorEl","setAnchorEl","Chat","Call","currentTarget","MoreVert","Menu","open","Boolean","onClose","MenuListProps","MenuItem","friendId","AllFriendsMemoized","length","friend","FriendsOnlineMemoized","UserAddToFriendsMemoized","FriendsInvitesMemoized","invite","UserApprovalsMemoized","FriendsApprovalsMemoized","approval","UserAddInviteToFriendsMemoized","setSearchValue","AddToFriendsMemoized","PrivateRoutesMemoized","AppMemoized","LoaderMemoized","CircularProgress","AppContainer","Root","ThemeProvider","render","document","querySelector","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","j","Object","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}