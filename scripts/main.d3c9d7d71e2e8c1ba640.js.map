{"version":3,"file":"scripts/main.d3c9d7d71e2e8c1ba640.js","mappings":"uBAAIA,E,8GCAG,MAWMC,EAGP,oDCZOC,EAAS,CACpBC,cAAe,qBACfC,QAAS,GAAGH,qBACZI,aAAc,oBACdC,OAAQ,cACRC,KAAM,aCEKC,EAA4BC,GAChCC,EAAcC,QAAuB,CAC1CC,OAAQ,OACRC,IAAKX,EAAOC,cACZW,KAAML,IAOGM,EAAoB,IACxB,YAA6B,CAClCH,OAAQ,MACRC,IAAKX,EAAOE,QACZY,iBAAiB,IAORC,EAA2BR,GAC/BC,EAAcC,QAAuB,CAC1CC,OAAQ,OACRC,IAAKX,EAAOG,aACZS,KAAML,IAOGS,EAAoB,IACxBR,EAAcC,QAAe,CAClCC,OAAQ,MACRC,IAAKX,EAAOI,SAOHa,EAAiB,IACrBT,EAAcC,QAAc,CACjCC,OAAQ,MACRC,IAAKX,EAAOK,OAOHa,EAAoBX,GACxBC,EAAcC,QAAc,CACjCC,OAAQ,QACRC,IAAKX,EAAOK,KACZO,KAAML,IAOGY,EAAoBZ,GACxBC,EAAcC,QAAgB,CACnCC,OAAQ,OACRC,IAAK,cACLC,KAAML,ICzEJC,EAAgB,WAAa,CACjCM,iBAAiB,EACjBM,QAAS,GAAGrB,UAGdS,EAAca,aAAaZ,QAAQa,KAAKC,IAClCA,EAAOC,UACTD,EAAOC,QAAQvB,cAAgB,UAAUwB,aAAaC,QAAQ,YAGzDH,KAGTf,EAAca,aAAaM,SAASL,KACjCC,GACQA,IAEFK,IAAU,mB,EAAA,YACf,MAAMC,EAAkBD,EAAML,OAE9B,GAA8B,MAA1BK,EAAMD,SAASG,OACjB,IACE,MAAMH,QAAiBd,IAIvB,OAFAY,aAAaM,QAAQ,QAASJ,EAASf,KAAKoB,aAErCxB,EAAcC,QAAQoB,GAAA,MACtB,GACPI,QAAQC,IAAI,SAENlB,IAENS,aAAaU,WAAW,SAI5B,MAAMP,G,+KAnBS,iB,oBClBZ,MAAMQ,GAAsB,QACjC,4BACO,IAA+D,c,EAAA,CAA/D,G,EAA+D,WAA/D,QAAEC,EAAO,QAAEC,IAGhB,aAFuB9B,EAAc+B,KAAK,0BAA2B,CAAEF,QAAAA,EAASC,QAAAA,KAEhE1B,M,+KAHoD,U,0BCF3D4B,GAAe,QAAiB,qBAAqB,KAAY,mB,EAAA,YAG5E,aAFuBhC,EAAciC,IAAI,eAEzB7B,M,+KAH4D,iB,oBCAjE8B,GAAqB,QAChC,2BACO,IAAqC,c,EAAA,CAArC,G,EAAqC,WAArC,QAAEL,IAGP,aAFuB7B,EAAc+B,KAAK,wBAAyB,CAAEF,QAAAA,KAErDzB,M,+KAH0B,U,0BCFjC+B,GAAc,QAAiB,oBAAoB,KAAY,mB,EAAA,YAG1E,aAFuBnC,EAAciC,IAAI,kBAEzB7B,M,+KAH0D,iB,oBCA/DgC,GAAa,QAAiB,mBAAmB,KAAY,mB,EAAA,YAGxE,aAFuBpC,EAAciC,IAAI,aAEzB7B,M,+KAHwD,iB,oBCA7DiC,GAAmB,QAAiB,yBCDvB,KAAY,mB,EAAA,YAGpC,aAFuBrC,EAAciC,IAAI,aAEzB7B,M,+KAHoB,iB,oBCyBzBkC,GAAY,QAAY,CACnCC,KAAM,OACNC,aAnB8B,CAC9BC,gBAAgB,EAChBC,WAAW,EACXC,UAAM,EACNC,WAAO,EAEPC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAQ,EACRC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAU,GACVC,gBAAiB,IAMjBC,SAAU,CACRC,iBAAkB,CAACC,GAAoBC,QAAAA,MACrCD,EAAMf,eAAiBgB,GAEzBC,aAAc,CAACF,GAAoBC,QAAAA,MACjCD,EAAMd,UAAYe,GAEpBE,QAAS,CAACH,GAAoBC,QAAAA,MAC5BD,EAAMb,KAAOc,GAEfG,SAAU,CAACJ,GAAoBC,QAAAA,MAC7BD,EAAMZ,MAAQa,GAEhBI,UAAW,CAACL,GAAoBC,QAAAA,MAC9BD,EAAMR,OAASS,GAEjBK,kBAAmB,CAACN,GAAoBC,QAAAA,MACtCD,EAAMP,eAAiBQ,GAEzBM,kBAAmB,CAACP,GAAoBC,QAAAA,MACtCD,EAAMN,eAAiBO,GAEzBO,kBAAmB,CAACR,GAAoBC,QAAAA,MACtCD,EAAML,eAAiBM,IAG3BQ,cAAgBC,IACdA,EAAQC,QAAQ9B,EAAiB+B,WAAW,CAACZ,GAAoBC,QAAAA,MAC/DD,EAAMX,QAAUY,KAElBS,EAAQC,QAAQ/B,EAAWgC,WAAW,CAACZ,GAAoBC,QAAAA,MACzDD,EAAMV,QAAUW,KAElBS,EAAQC,QAAQnC,EAAaoC,WAAW,CAACZ,GAAoBC,QAAAA,MAC3DD,EAAMT,UAAYU,KAEpBS,EAAQC,QAAQhC,EAAYiC,WAAW,CAACZ,GAAoBC,QAAAA,MAC1DD,EAAMJ,SAAWK,KAEnBS,EAAQC,QAAQjC,EAAmBkC,WAAW,CAACZ,GAAoBC,QAAAA,MACjED,EAAMH,gBAAkBI,KAE1BS,EAAQC,QAAQvC,EAAoBwC,WAAW,CAACZ,GAAoBC,QAAAA,MAClED,EAAMH,gBAAkB,IAAIG,EAAMH,gBAAiBI,UAK5C,iBACXF,EAAgB,aAChBG,EAAY,QACZC,EAAO,SACPC,EAAQ,UACRC,EAAS,kBACTC,EAAiB,kBACjBC,EAAiB,kBACjBC,GACE1B,EAAU+B,QAEDC,EAAchC,EAAUiC,Q,cCnF9B,MAAMC,GACX,QAAkD,gCAKvCC,GAAmB,QAAa,yBAKhCC,GACX,QAAgE,+BAKrDC,GAAmB,QAAa,yBAKhCC,GAAgB,QAAa,sBAK7BC,GAAkB,QAAmD,wBAKrEC,GAAkB,QAAsC,uB,cCXrE,MAAMC,EAAwB,WAAW,QAAEtB,IA3B3C,MA4BE,UACQ,QAAIC,GAAa,IACvB,MAAMvC,QAAuE,QAC3ErB,EACA2D,SAEI,QAAIC,GAAa,UACjB,QAAIH,GAAiB,IAC3BtC,aAAaM,QAAQ,QAASJ,EAASf,KAAKoB,aAAA,MACrCJ,GAGP,GAFAK,QAAQL,MAAMA,SACR,QAAIsC,GAAa,IACnB,iBAAmBtC,GACrB,OAAO,WAAY,SAAAA,EAAMD,eAAN,IAAgBf,KAAK0B,SAE1C,WAAY,mDAOVkD,EAAiB,YACrB,IACE,MAAM7D,QAAgE,QAAKd,SACrE,QAAIkD,GAAiB,IAC3BtC,aAAaM,QAAQ,QAASJ,EAASf,KAAKoB,aAAA,MACrCJ,GACPK,QAAQL,MAAMA,KAOZ6D,EAAuB,WAAW,QAAExB,IACxC,IACE,MAAMtC,QAAsE,QAAKZ,EAAyBkD,SACpG,QAAIF,GAAiB,IAC3BtC,aAAaM,QAAQ,QAASJ,EAASf,KAAKoB,aAAA,MACrCJ,GACPK,QAAQL,MAAMA,KAOZ8D,EAAiB,YACrB,UACQ,QAAK1E,SACL,QAAI+C,GAAiB,IAC3BtC,aAAaU,WAAW,eACjBP,GACPK,QAAQL,MAAMA,KAOZ+D,EAAc,YAClB,IACE,MAAMhE,QAA6D,QAAKV,SAClE,QAAIkD,EAAQxC,EAASf,OAAA,MACpBgB,GACPK,QAAQL,MAAMA,KAOZgE,EAAgB,WAAW,QAAE3B,IACjC,IACE,MAAMtC,QAA+D,QAAKT,EAAkB+C,SACtF,QAAIE,EAAQxC,EAASf,OAAA,MACpBgB,GACPK,QAAQL,MAAMA,KAOZiE,EAAgB,WAAW,QAAE5B,IACjC,IACE,MAAMtC,QAA+D,QAAKR,EAAkB8C,SACtF,QAAIG,EAASzC,EAASf,OAAA,MACrBgB,GACPK,QAAQL,MAAMA,KClHZkE,GAAQ,CDyHG,kBACT,QAAI,EACR,QAAUd,EAAwBe,KAAMR,IACxC,QAAUN,EAAiBc,KAAMP,IACjC,QAAUN,EAAuBa,KAAMN,IACvC,QAAUN,EAAiBY,KAAML,IACjC,QAAUN,EAAcW,KAAMJ,IAC9B,QAAUN,EAAgBU,KAAMH,IAChC,QAAUN,EAAgBS,KAAMF,OEhI9BG,IAAiB,UAEjBC,IAAQ,QAAe,CAC3BlB,QAAS,CACP5B,KAAM2B,GAERoB,WAAY,CAACF,MAGfA,GAAeG,KDLE,kBACT,QAAIL,GAAMM,KAAKC,IAAS,QAAKA,S,eER9B,MAAMC,GAA8BtC,GAAqBA,EAAMb,KAAKF,eAC9DsD,GAAyBvC,GAAqBA,EAAMb,KAAKD,UACzDsD,GAAoBxC,GAAqBA,EAAMb,KAAKA,KACpDsD,GAAqBzC,GAAqBA,EAAMb,KAAKC,MAErDsD,GAAuB1C,GAAqBA,EAAMb,KAAKE,QACvDsD,GAAuB3C,GAAqBA,EAAMb,KAAKG,QACvDsD,GAAyB5C,GAAqBA,EAAMb,KAAKI,UAMzDsD,GAA+B7C,GAAqBA,EAAMb,KAAKU,gB,gQCZ5E,MAIaiD,IAAoB,KAAAC,OAJd,QAAKC,E,iKAAA,CAAL,EAAK,IACtB,OAAO,iBAAC,K,yHAAD,IAAkBA,O,sGCFpB,MAAMC,IAAQ,EAAAC,GAAA,GAAY,CAC/BC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,cCPZ,GAAe,IAA0B,yE,eCGzC,MAeaC,IAA8B,KAAAT,OAff,EAAGU,SAAAA,KAE3B,iBAACC,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,SAGTN,K,0BCCP,MAyGaO,IAAwB,KAAAjB,OAzGf,KACpB,MAAMkB,GAAW,UACXC,GAAW,WAEXhF,GAAY,QAAYqD,KAEvB4B,EAAOC,IAAY,KAAAC,UAAS,KAC5BC,EAAUC,IAAe,KAAAF,UAAS,KAClCG,EAAgBC,IAAqB,KAAAJ,WAAS,GAErD,OACE,iBAAC,GAAD,KACE,iBAACX,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTc,MAAO,QACPC,oBAAqB,cACrBC,aAAc,OACdC,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCC,SAAU,WAGZ,iBAACrB,GAAA,EAAD,KACE,iBAAC,MAAD,CACEsB,UAAW,IAAG;;;;cAKdC,IAAK,GACLC,IAAI,iBAGR,iBAACxB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,YAAaC,gBAAiB,GAAGnC,GAAME,QAAQkC,OAAOC,UACxE,iBAAC5B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAAC7B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAAC7B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAACC,GAAA,EAAD,CAAYC,QAAQ,MAAK,wBACzB,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAAC,GAAD,CACExD,KAAK,QACL2D,GAAG,QACH3G,KAAK,QACL4G,MAAM,0BACNC,MAAOzB,EACP0B,SAAWC,GAAU1B,EAAS0B,EAAMC,OAAOH,OAC3CI,YAAY,oBACZC,aAAa,MACbC,WAAS,IAEX,iBAAC,GAAD,CACEnE,KAAMyC,EAAiB,OAAS,WAChCkB,GAAG,WACH3G,KAAK,WACL4G,MAAM,SACNC,MAAOtB,EACPuB,SAAWC,GAAUvB,EAAYuB,EAAMC,OAAOH,OAC9CI,YAAY,qBACZC,aAAa,MACbC,WAAS,EACTC,WAAY,CACVC,aACE,iBAACC,GAAA,EAAD,CAAgBC,SAAS,OACvB,iBAACC,GAAA,EAAD,CAAYC,QAAS,IAAM/B,GAAmBD,IAC3CA,EAAiB,iBAACiC,GAAA,EAAD,MAAoB,iBAACC,GAAA,EAAD,aAQpD,iBAACC,GAAA,EAAD,CACElB,QAAQ,YACRmB,MAAM,UACNC,KAAK,QACLC,QAAS5H,EACTsH,QAAS,KACPvC,EAASjD,EAAwB,CAAEmD,MAAAA,EAAOG,SAAAA,OAE7C,UAIH,iBAACkB,GAAA,EAAD,CAAYC,QAAQ,aAAY,yBACP,IACvB,iBAACsB,GAAA,EAAD,CACEpD,GAAI,CAAEqD,OAAQ,WACdC,UAAU,QACVT,QAAUV,IACRA,EAAMoB,iBAENhD,EAAS,mBAEZ,8B,eC/Ff,MA2HaiD,IAAuB,KAAApE,OA3Hf,KACnB,MAAMkB,GAAW,UACXC,GAAW,WAEXhF,GAAY,QAAYqD,KAEvB4B,EAAOC,IAAY,KAAAC,UAAS,KAC5BtF,EAAMqI,IAAW,KAAA/C,UAAS,KAC1BC,EAAUC,IAAe,KAAAF,UAAS,KAClCG,EAAgBC,IAAqB,KAAAJ,WAAS,GAErD,OACE,iBAAC,GAAD,KACE,iBAACX,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTc,MAAO,QACPC,oBAAqB,cACrBC,aAAc,OACdC,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCC,SAAU,WAGZ,iBAACrB,GAAA,EAAD,KACE,iBAAC,MAAD,CACEsB,UAAW,IAAG;;;;cAKdC,IAAK,GACLC,IAAI,iBAGR,iBAACxB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,YAAaC,gBAAiB,GAAGnC,GAAME,QAAQkC,OAAOC,UACxE,iBAAC5B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAAC7B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAAC7B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAACC,GAAA,EAAD,CAAYC,QAAQ,MAAK,0BACzB,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAAC8B,GAAA,EAAD,CACEtF,KAAK,QACL2D,GAAG,QACH3G,KAAK,QACL4G,MAAM,0BACNC,MAAOzB,EACP0B,SAAWC,GAAU1B,EAAS0B,EAAMC,OAAOH,OAC3CI,YAAY,oBACZC,aAAa,MACbC,WAAS,IAEX,iBAACmB,GAAA,EAAD,CACEtF,KAAK,OACL2D,GAAG,OACH3G,KAAK,OACL4G,MAAM,mBACNC,MAAO7G,EACP8G,SAAWC,GAAUsB,EAAQtB,EAAMC,OAAOH,OAC1CI,YAAY,mBACZC,aAAa,MACbC,WAAS,IAEX,iBAACmB,GAAA,EAAD,CACEtF,KAAMyC,EAAiB,OAAS,WAChCkB,GAAG,WACH3G,KAAK,WACL4G,MAAM,SACNC,MAAOtB,EACPuB,SAAWC,GAAUvB,EAAYuB,EAAMC,OAAOH,OAC9CI,YAAY,qBACZC,aAAa,MACbC,WAAS,EACTC,WAAY,CACVC,aACE,iBAACC,GAAA,EAAD,CAAgBC,SAAS,OACvB,iBAACC,GAAA,EAAD,CAAYC,QAAS,IAAM/B,GAAmBD,IAC3CA,EAAiB,iBAACiC,GAAA,EAAD,MAAoB,iBAACC,GAAA,EAAD,aAQpD,iBAAChD,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAACC,GAAA,EAAD,CAAYC,QAAQ,UAAUmB,MAAO3D,GAAME,QAAQ2B,KAAK,MAAM,mCAC3B,IACjC,iBAACiC,GAAA,EAAD,CAAMpD,GAAI,CAAEqD,OAAQ,WAAaC,UAAU,SAAQ,4CAIrD,iBAACN,GAAA,EAAD,CACElB,QAAQ,YACRmB,MAAM,UACNC,KAAK,QACLC,QAAS5H,EACTsH,QAAS,KACPvC,EAAS/C,EAAuB,CAAEiD,MAAAA,EAAOpF,KAAAA,EAAMuF,SAAAA,OAElD,wBAKL,iBAACkB,GAAA,EAAD,CAAYC,QAAQ,aAClB,iBAACsB,GAAA,EAAD,CACEpD,GAAI,CAAEqD,OAAQ,WACdC,UAAU,QACVT,QAAUV,IACRA,EAAMoB,iBACNhD,EAAS,oBAEZ,iC,eCxHf,MAUaoD,IAAuB,KAAAvE,OAVf,IAEjB,iBAAC,MAAD,KACE,iBAAC,MAAD,CAAOwE,KAAK,gBAAgBC,QAAS,iBAAC,GAAD,QACrC,iBAAC,MAAD,CAAOD,KAAK,eAAeC,QAAS,iBAAC,GAAD,QACpC,iBAAC,MAAD,CAAOD,KAAK,IAAIC,QAAS,iBAAC,MAAD,CAAUC,GAAG,uB,qPCP5C,MAQaC,IAAiB,KAAA3E,OARd,aAAEU,SAAAA,GAAF,EAAeT,E,iKAAA,CAAf,EAAe,CAAb,aAChB,OACE,iBAAC,K,yHAAD,EAAW2E,kBAAgB,GAAK3E,GAC7BS,M,sECAP,MAsEamE,IAAqB,KAAA7E,OAtEf,KACjB,MAAMmB,GAAW,WAGjB,OACE,iBAACR,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACT2B,OAAQ,OACRxB,OAAQ,OACR8D,aAAc,QACd1C,QAAS,YACTrB,eAAgB,WAGlB,iBAACJ,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SAClC,iBAACuC,GAAA,EAAD,CAASC,MAAM,SAASC,OAAK,EAACC,UAAU,SACtC,iBAACvE,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTuB,QAAS,MACTC,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCkC,OAAQ,UACRpC,aAAc,MACdd,eAAgB,SAChBY,MAAO,QAET8B,QAAS,IAAMtC,EAAS,aAExB,iBAACgE,GAAA,EAAD,QAGJ,iBAACJ,GAAA,EAAD,CAASC,MAAM,SAASC,OAAK,EAACC,UAAU,SACtC,iBAACvE,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTuB,QAAS,MACTC,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCkC,OAAQ,UACRpC,aAAc,MACdd,eAAgB,SAChBY,MAAO,QAET8B,QAAS,IAAMtC,EAAS,cAExB,iBAACiE,GAAA,EAAD,SAIN,iBAACC,GAAA,EAAD,MACA,iBAACN,GAAA,EAAD,CAASC,MAAM,UAAUC,OAAK,EAACC,UAAU,SACvC,iBAACvE,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTuB,QAAS,MACTC,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCkC,OAAQ,UACRpC,aAAc,MACdd,eAAgB,SAChBY,MAAO,QAET8B,QAAS,IAAMtC,EAAS,aAExB,iBAACmE,GAAA,EAAD,Y,8CClEV,MAAMC,IAAS,E,QAAAC,IAAGxM,EAAS,CACzByM,WAAY,CAAC,e,eCKf,MAkEaC,IAAe,KAAA1F,OAlEf,EACXhE,KAAAA,EACAjB,OAAAA,EACA4K,UAAAA,MAQA,MAAMvJ,GAAO,QAAYqD,IACnB0B,GAAW,WAEjB,OACE,iBAACR,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,8BACrBgE,UAAW,MACX9E,WAAY,SACZsB,QAAS,WACTP,aAAc,MACdoC,OAAQ,UACR,SAAU,CACR5B,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpC,eAAgB,CACdlB,QAAS,SAGb,kBAAmB,CACjBiB,OAAQ,aAAa5B,GAAME,QAAQkC,OAAOC,SAE5C,yBAA0B,CACxBF,gBAAiBnC,GAAME,QAAQyF,QAAQvF,OAEzC,uBAAwB,CACtB+B,gBAAiBnC,GAAME,QAAQvF,MAAMyF,QAGzCmD,QAAS,KACP8B,GAAA,KAAY,kBAAmBI,EAAW,MAAAvJ,OAAA,EAAAA,EAAMuG,IAChDxB,EAAS,eAGX,iBAAC2E,GAAA,EAAD,CACEC,QAAQ,WACRrD,QAAQ,MACRsD,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDrC,MAAkB,WAAX9I,EAAsB,UAAY,SAEzC,iBAACoL,GAAA,EAAD,CAAQvF,GAAI,CAAEyB,gBAAiB,cAEjC,iBAAC1B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,gBAC/C,iBAACa,GAAA,EAAD,CAAYC,QAAQ,SAAS1G,GAAc,IAC3C,iBAACyG,GAAA,EAAD,CAAYC,QAAQ,WAAU,WAEhC,iBAAC/B,GAAA,EAAD,CAAKsB,UAAU,cAAcrB,GAAI,CAAEC,QAAS,SAC1C,iBAAC2C,GAAA,EAAD,KACE,iBAAC4C,GAAA,EAAD,CAAexF,GAAI,CAAEiD,MAAO3D,GAAME,QAAQ2B,KAAK,c,2DC7DzD,MA6DasE,IAAsB,KAAArG,OA7Df,KAClB,MAAM5D,GAAO,QAAYqD,KAElB6G,EAAOC,IAAY,KAAAjF,WAAS,IAC5BkF,EAAYC,IAAiB,KAAAnF,WAAS,GAE7C,OACE,iBAACX,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQC,WAAY,SAAUuB,gBAAiBnC,GAAME,QAAQ2B,KAAK,KAAMK,QAAS,cACnG,iBAACzB,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ+E,UAAW,MAAOhE,oBAAqB,kBAEjE,iBAACjB,GAAA,EAAD,CACEC,GAAI,CACF,kBAAmB,CACjBkB,OAAQ,aAAa5B,GAAME,QAAQkC,OAAOC,SAE5C,yBAA0B,CACxBF,gBAAiBnC,GAAME,QAAQyF,QAAQvF,OAEzC,uBAAwB,CACtB+B,gBAAiBnC,GAAME,QAAQvF,MAAMyF,SAIzC,iBAACwF,GAAA,EAAD,CACEC,QAAQ,WACRrD,QAAQ,MACRsD,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDrC,MAAwB,YAAjB,MAAAzH,OAAA,EAAAA,EAAMrB,QAAsB,UAAY,SAE/C,iBAACoL,GAAA,EAAD,CAAQvF,GAAI,CAAEyB,gBAAiB,MAAAjG,OAAA,EAAAA,EAAMsK,eAAiBxE,IAAK,MAAA9F,OAAA,EAAAA,EAAMuK,UAIrE,iBAAChG,GAAA,EAAD,KACE,iBAAC8B,GAAA,EAAD,CAAYC,QAAQ,SAAS,MAAAtG,OAAA,EAAAA,EAAMJ,MACnC,iBAACyG,GAAA,EAAD,CAAY7B,GAAI,CAAEiD,MAAO3D,GAAME,QAAQ2B,KAAK,MAAQW,QAAQ,WAAU,IAClE,MAAAtG,OAAA,EAAAA,EAAMuG,GAAGiE,OAAO,KAItB,iBAACjG,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ+E,UAAW,OAAQhE,oBAAqB,kBAAmBd,WAAY,WACjG,iBAAC0C,GAAA,EAAD,CAAYC,QAAS,IAAM8C,GAAUD,IAClCA,EACC,iBAACO,GAAA,EAAD,CAAKjG,GAAI,CAAEiD,MAAO3D,GAAME,QAAQ2B,KAAK,QAErC,iBAAC+E,GAAA,EAAD,CAAQlG,GAAI,CAAEiD,MAAO3D,GAAME,QAAQ2B,KAAK,SAG5C,iBAACyB,GAAA,EAAD,CAAYC,QAAS,IAAMgD,GAAeD,IACvCA,EACC,iBAACO,GAAA,EAAD,CAAUnG,GAAI,CAAEiD,MAAO3D,GAAME,QAAQ2B,KAAK,QAE1C,iBAACiF,GAAA,EAAD,CAAapG,GAAI,CAAEiD,MAAO3D,GAAME,QAAQ2B,KAAK,e,eCjD3D,MAyJakF,IAAkB,KAAAjH,OAzJf,KACd,MAAMmB,GAAW,YACX,SAAE+F,IAAa,YACdC,EAAeC,IAAoB,KAAA9F,YAU1C,OARA,KAAA+F,YAAU,QAMP,IAGD,iBAAC1G,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,iBACrBZ,OAAQ,OACRqB,gBAAiBnC,GAAME,QAAQkC,OAAOC,QAIxC,iBAAC5B,GAAA,EAAD,CAAKC,GAAI,CAAEyB,gBAAiBnC,GAAME,QAAQ2B,KAAK,OAC7C,iBAAC,GAAD,OAGF,iBAACpB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,4BAClBjF,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCC,SAAU,WAIZ,iBAACrB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,YAAamF,aAAc,aAAarH,GAAME,QAAQ2B,KAAK,SAC7E,iBAACU,GAAA,EAAD,CAAYC,QAAQ,MAAK,qBAG3B,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,SAClB,iBAAC,GAAD,CAAQe,WAAS,EAACT,QAAQ,YAAYe,QAAS,IAAMtC,EAAS,aAAa,WAK7E,iBAACR,GAAA,EAAD,CACEC,GAAI,CACF4G,OAAQ,WACRC,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIlB,iBAAClB,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,OAAQJ,QAAS,UAClD,MAAA+E,OAAA,EAAAA,EAAe9H,KAAKwD,GAEjB,iBAAC,GAAD,CACE6E,IAAK7E,EAAM8E,SAASC,IACpBjF,GAAIE,EAAM8E,SAASC,IACnB5L,KAAM6G,EAAM8E,SAAS3L,KACrBjB,OAAQ8H,EAAM8E,SAAS5M,OACvBqG,MAAOyB,EAAM8E,SAASvG,MACtBuE,UAAW9C,EAAMA,MAAM+E,UAOjC,iBAAC,GAAD,OAGF,iBAACjH,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,WAClBjF,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCC,SAAU,WAIZ,iBAACrB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,yBACrBgE,UAAW,OACXxD,QAAS,YACTmF,aAAc,aAAarH,GAAME,QAAQ2B,KAAK,OAC9CjB,WAAY,WAGd,iBAAC2B,GAAA,EAAD,CAAYC,QAAQ,MAAK,UACzB,iBAAC/B,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,yBACrBgE,UAAW,QAGb,iBAAC,GAAD,CACElD,QAASwE,EAASW,SAAS,eAAiB,YAAc,WAC1DhE,MAAM,UACNJ,QAAS,IAAMtC,EAAS,gBACzB,cAGD,iBAAC,GAAD,CACEuB,QAASwE,EAASW,SAAS,kBAAoB,YAAc,WAC7DhE,MAAM,UACNJ,QAAS,IAAMtC,EAAS,mBACzB,UAGD,iBAAC,GAAD,CACEuB,QAASwE,EAASW,SAAS,mBAAqB,YAAc,WAC9DhE,MAAM,UACNJ,QAAS,IAAMtC,EAAS,oBACzB,UAGD,iBAAC,GAAD,CACEuB,QAASwE,EAASW,SAAS,qBAAuB,YAAc,WAChEhE,MAAM,UACNJ,QAAS,IAAMtC,EAAS,sBACzB,YAGD,iBAAC,GAAD,CACEuB,QAASwE,EAASW,SAAS,kBAAoB,YAAc,WAC7DhE,MAAM,UACNJ,QAAS,IAAMtC,EAAS,mBACzB,uBAML,iBAAC,MAAD,W,eC9IR,MAyMa2G,IAAmB,KAAA9H,OAzMf,KACf,MAAMmB,GAAW,WAEX/E,GAAO,QAAYqD,IACnByB,GAAW,UAEXpE,GAAkB,QAAYgD,KAE7BqH,EAAeC,IAAoB,KAAA9F,aACnC/F,EAASwM,IAAc,KAAAzG,UAAS,KAChChG,EAAS0M,IAAc,KAAA1G,UAAiB,IA4C/C,OA9BA,KAAA+F,YAAU,KAUR9B,GAAA,GAAU,mBAAmB,CAAC,EAAiB,KAC7CrK,QAAQC,IAAI,sBAAuB,GACnC6M,EAAW,GAEP,GACF9G,EAASvF,EAAmB,CAAEL,QAAA,QAI9BA,GACF4F,EAASvF,EAAmB,CAAEL,QAAAA,KAGhCiK,GAAA,GAAU,cAAe,IACnB,GACFrE,EAASvF,EAAmB,CAAEL,QAAA,UAGjC,IAGD,iBAACqF,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,iBACrBZ,OAAQ,OACRqB,gBAAiBnC,GAAME,QAAQkC,OAAOC,QAIxC,iBAAC5B,GAAA,EAAD,CAAKC,GAAI,CAAEyB,gBAAiBnC,GAAME,QAAQ2B,KAAK,OAC7C,iBAAC,GAAD,OAIF,iBAACpB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,4BAClBjF,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCC,SAAU,WAIZ,iBAACrB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,YAAamF,aAAc,aAAarH,GAAME,QAAQ2B,KAAK,SAC7E,iBAACU,GAAA,EAAD,CAAYC,QAAQ,MAAK,qBAG3B,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,SAClB,iBAAC,GAAD,CAAQe,WAAS,EAACT,QAAQ,YAAYe,QAAS,IAAMtC,EAAS,yBAAyB,WAKzF,iBAACR,GAAA,EAAD,CACEC,GAAI,CACF4G,OAAQ,WACRC,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIlB,iBAAClB,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,OAAQJ,QAAS,UAClD,MAAA+E,OAAA,EAAAA,EAAe9H,KAAKwD,GAEjB,iBAAC,GAAD,CACE6E,IAAK7E,EAAM8E,SAASC,IACpBjF,GAAIE,EAAM8E,SAASC,IACnB5L,KAAM6G,EAAM8E,SAAS3L,KACrBjB,OAAQ8H,EAAM8E,SAAS5M,OACvBqG,MAAOyB,EAAM8E,SAASvG,MACtBuE,UAAW9C,EAAMA,MAAM+E,UAOjC,iBAAC,GAAD,OAGF,iBAACjH,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,MAClBjF,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCC,SAAU,WAIZ,iBAACrB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,kBAClB9E,OAAQ,OACRgF,OAAQ,YACRnF,gBAAiBnC,GAAME,QAAQkC,OAAOC,MACtCV,aAAc,MACdO,QAAS,OACTJ,SAAU,WAGZ,iBAACrB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTuB,QAAS,MACTJ,SAAU,SACVsF,iBAAkB,kBAClB9E,OAAQ,SAGV,iBAACC,GAAA,EAAD,KAAY,cACZ,iBAAC9B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQmB,SAAU,SAAUQ,OAAQ,MAAOsC,aAAc,QAAS9D,OAAQ,SAC3F,MAAAlE,OAAA,EAAAA,EAAiBuC,KAAK,GAEnB,iBAACsB,GAAA,EAAD,CACE+G,IAAK,EAAQE,IACbhH,GAAI,CACFwB,QAAS,MACTN,OAAQ,oBACRjB,QAAS,OACTgB,aAAc,QAGhB,iBAAC,GAAD,CACEc,GAAI,EAAQiF,IACZ5L,KAAM,EAAQiM,OAAOjM,KACrBjB,OAAQ,EAAQkN,OAAOlN,OACvBqG,MAAO,EAAQ6G,OAAO7G,QAExB,iBAACqB,GAAA,EAAD,KAAa,EAAQyF,WAM/B,iBAACvH,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,kBAAmBgE,UAAW,SAC7E,iBAAC,GAAD,CACE5G,KAAK,OACL2D,GAAG,UACH3G,KAAK,UACL4G,MAAM,YACNC,MAAOtH,EACPuH,SAAWC,GAAUgF,EAAWhF,EAAMC,OAAOH,OAC7CI,YAAY,4BAEd,iBAAC,GAAD,CAAQP,QAAQ,YAAYmB,MAAM,UAAUJ,QAhL5B,KACpBnI,GAAWC,IAIbgK,GAAA,KAAY,aAAcjK,EAASC,EAAS,MAAAa,OAAA,EAAAA,EAAMuG,IAElDoF,EAAW,OAyKmE,yBAM5E,iBAAC,MAAD,W,eC5MR,MA8FaI,IAAuB,KAAAnI,OA9Ff,KACnB,MAAMmB,GAAW,WACXiH,GAAW,WAEjB,OACE,iBAACzH,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,WAAYC,gBAAiB,YAC/C,iBAACI,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;;WAQf,0BAGD,iBAAC,KAAD,CACEA,UAAW,IAAG;;;;;;WAQd,iBAAC,KAAD,CACEA,UAAW,IAAG;;;;;gCAKQmG,EAASlB,SAASW,SAAS,gBAAkB,UAAY;;;;;;kCAMvDO,EAASlB,SAASW,SAAS,gBAAkB,UAAY;;aAIjF,iBAAC7D,GAAA,EAAD,CAAME,UAAU,OAAOT,QAAS,IAAMtC,EAAS,iBAC7C,iBAACsB,GAAA,EAAD,CACER,UAAW,IAAG;yBACHmG,EAASlB,SAASW,SAAS,gBAAkB,UAAY;;;;;;iBAOrE,wBAKL,iBAAC,KAAD,CACE5F,UAAW,IAAG;;;;;gCAKQmG,EAASlB,SAASW,SAAS,gBAAkB,UAAY;;;;;;kCAMvDO,EAASlB,SAASW,SAAS,gBAAkB,UAAY;;aAIjF,iBAAC7D,GAAA,EAAD,CAAME,UAAU,OAAOT,QAAS,IAAMtC,EAAS,iBAC7C,iBAACsB,GAAA,EAAD,CACER,UAAW,IAAG;yBACHmG,EAASlB,SAASW,SAAS,gBAAkB,UAAY;;;;;;iBAOrE,+B,eCpFb,MA0BaQ,IAAkB,KAAArI,OA1Bf,KACd,MAAMmB,GAAW,WAOjB,OALA,KAAAkG,YAAU,KAERlG,EAAS,kBACR,IAGD,iBAACR,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQc,MAAO,OAAQX,OAAQ,OAAQqB,gBAAiBnC,GAAME,QAAQ2B,KAAK,OAC7F,iBAACpB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,cACrBZ,OAAQ,OACRD,eAAgB,SAChBuH,gBAAiB,wDAGnB,iBAAC,GAAD,MACA,iBAAC,MAAD,W,eCpBR,MA4CaC,IAAyB,KAAAvI,OA5Cf,IAEnB,iBAACW,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,iBACrBZ,OAAQ,OACRqB,gBAAiBnC,GAAME,QAAQkC,OAAOC,QAIxC,iBAAC5B,GAAA,EAAD,CAAKC,GAAI,CAAEyB,gBAAiBnC,GAAME,QAAQ2B,KAAK,OAC7C,iBAAC,GAAD,OAGF,iBAACpB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,gBAClBjF,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCC,SAAU,WAIZ,iBAACrB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,YAAamF,aAAc,aAAarH,GAAME,QAAQ2B,KAAK,SAC7E,iBAACU,GAAA,EAAD,CAAYC,QAAQ,MAAK,WAG3B,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,QAASoF,OAAQ,SAAUxF,SAAU,WACvD,iBAACrB,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,SACjCgG,MAAMC,KAAKD,MAAM,IAAIE,QAAQrJ,KAAKwD,GAC1B,iBAAClC,GAAA,EAAD,CAAK+G,IAAK7E,QAKvB,iBAAC,GAAD,OAGF,iBAAClC,GAAA,EAAD,CAAKC,GAAI,CAAEyB,gBAAiBnC,GAAME,QAAQ2B,KAAK,W,eC1CrD,MAIa4G,IAAmB,KAAA3I,OAJf,IACR,iBAAC,GAAD,Q,sECGT,MA4Fa4I,IAAsB,KAAA5I,OA5Ff,EAAG2C,GAAAA,EAAI3G,KAAAA,EAAMjB,OAAAA,MAC/B,MAAO8N,EAAUC,IAAe,KAAAxH,UAAgC,MAEhE,OACE,iBAACX,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBd,WAAY,WAGd,iBAACH,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBgE,UAAW,MACX9E,WAAY,SACZsB,QAAS,WACTP,aAAc,MACdoC,OAAQ,UACR,kBAAmB,CACjBnC,OAAQ,aAAa5B,GAAME,QAAQkC,OAAOC,SAE5C,yBAA0B,CACxBF,gBAAiBnC,GAAME,QAAQyF,QAAQvF,OAEzC,uBAAwB,CACtB+B,gBAAiBnC,GAAME,QAAQvF,MAAMyF,SAIzC,iBAACwF,GAAA,EAAD,CACEC,QAAQ,WACRrD,QAAQ,MACRsD,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDrC,MAAkB,WAAX9I,EAAsB,UAAY,SAEzC,iBAACoL,GAAA,EAAD,CAAQvF,GAAI,CAAEyB,gBAAiB,cAEjC,iBAAC1B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,gBAC/C,iBAACa,GAAA,EAAD,CAAYC,QAAQ,SAAS1G,GAAc,IAC3C,iBAACyG,GAAA,EAAD,CAAYC,QAAQ,WAAsB,WAAX3H,EAAsB,SAAW,eAIpE,iBAAC4F,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBgE,UAAW,OACX9E,WAAY,SACZC,eAAgB,QAGlB,iBAACJ,GAAA,EAAD,CAAKC,GAAI,CAAEqD,OAAQ,YACjB,iBAAC8E,GAAA,EAAD,OAEF,iBAACpI,GAAA,EAAD,CAAKC,GAAI,CAAEqD,OAAQ,YACjB,iBAAC+E,GAAA,EAAD,OAEF,iBAACrI,GAAA,EAAD,CAAKC,GAAI,CAAEqD,OAAQ,WAAaR,QAAUV,GAAU+F,EAAY/F,EAAMkG,gBACpE,iBAACC,GAAA,EAAD,QAGJ,iBAACC,GAAA,EAAD,CACEN,SAAAA,EACAO,KAAMC,QAAQR,GACdS,QAAS,IAAMR,EAAY,MAC3BS,cAAe,CACb,kBAAmB,iBAGrB,iBAACC,GAAA,EAAD,CAAU/F,QAAS,IAAMqF,EAAY,OAAO,YAC5C,iBAACU,GAAA,EAAD,CAAU/F,QAAS,IAAMqF,EAAY,OAAO,aAC5C,iBAACU,GAAA,EAAD,CACE/F,QAAS,KAAY,mB,EAAA,YACnBqF,EAAY,MAEZ,MAAMlO,QAAiBnB,EAAc+B,KAAK,uBAAwB,CAAEiO,SAAU9G,IAI9E,OAFA4C,GAAA,KAAY,yBAA0B5C,GAE/B/H,EAASf,M,+KAPG,iB,mBAStB,0B,eCpFT,MAqCa6P,IAAqB,KAAA1J,OArCf,KACjB,MAAM1D,GAAU,QAAYqD,IAE5B,OACE,iBAACgB,GAAA,EAAD,CACEC,GAAI,CACFwB,QAAS,eACToF,OAAQ,kBACR3G,QAAS,OACTiE,aAAc,QACdtC,OAAQ,MACRiF,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIlB,iBAAClB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,aAClB,iBAACK,GAAA,EAAD,CAAYC,QAAQ,MAAK,eAAapG,EAAQqN,OAAS,EAAIrN,EAAQqN,OAAS,IAE9E,iBAAChJ,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQiE,aAAc,QAAStC,OAAQ,QACxDlG,EAAQ+C,KAAKuK,GACL,iBAAC,GAAD,CAAalC,IAAKkC,EAAOhC,IAAKjF,GAAIiH,EAAOhC,IAAK5L,KAAM4N,EAAO5N,KAAMjB,OAAQ6O,EAAO7O,gB,eC9BjG,MAkCa8O,IAAwB,KAAA7J,OAlCf,KACpB,MAAM1D,GAAU,QAAYqD,IAE5B,OACE,iBAACgB,GAAA,EAAD,CACEC,GAAI,CACFwB,QAAS,eACToF,OAAQ,kBACR3G,QAAS,OACTiE,aAAc,QACdtC,OAAQ,MACRiF,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIjBvF,EAAQ+C,KAAKuK,GACa,WAAlBA,EAAO7O,OACZ,iBAAC,GAAD,CAAa2M,IAAKkC,EAAOhC,IAAKjF,GAAIiH,EAAOhC,IAAK5L,KAAM4N,EAAO5N,KAAMjB,OAAQ6O,EAAO7O,SAC9E,W,2NC5BZ,MAmFa+O,IAA2B,KAAA9J,OAnFf,EAAG2C,GAAAA,EAAI3G,KAAAA,EAAMjB,OAAAA,KAElC,iBAAC4F,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBd,WAAY,WAGd,iBAACH,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBgE,UAAW,MACX9E,WAAY,SACZsB,QAAS,WACTP,aAAc,MACdoC,OAAQ,UACR,kBAAmB,CACjBnC,OAAQ,aAAa5B,GAAME,QAAQkC,OAAOC,SAE5C,yBAA0B,CACxBF,gBAAiBnC,GAAME,QAAQyF,QAAQvF,OAEzC,uBAAwB,CACtB+B,gBAAiBnC,GAAME,QAAQvF,MAAMyF,SAIzC,iBAACwF,GAAA,EAAD,CACEC,QAAQ,WACRrD,QAAQ,MACRsD,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDrC,MAAkB,WAAX9I,EAAsB,UAAY,SAEzC,iBAACoL,GAAA,EAAD,CAAQvF,GAAI,CAAEyB,gBAAiB,cAEjC,iBAAC1B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,gBAC/C,iBAACa,GAAA,EAAD,CAAYC,QAAQ,SAAS1G,GAAc,IAC3C,iBAACyG,GAAA,EAAD,CAAYC,QAAQ,WAAsB,WAAX3H,EAAsB,SAAW,eAIpE,iBAAC4F,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,yBACrBgE,UAAW,OACX9E,WAAY,SACZC,eAAgB,QAGlB,iBAAC,GAAD,CACE2B,QAAQ,YACRmB,MAAM,UACNJ,QAAS,IAAY,4BACnB,MAAM7I,QAAiBnB,EAAc+B,KAAK,kBAAmB,CAAEiO,SAAU9G,IAIzE,OAFA4C,GAAA,KAAY,oBAAqB5C,GAE1B/H,EAASf,SAEnB,YAGD,iBAAC,GAAD,CACE6I,QAAQ,YACRmB,MAAM,UACNJ,QAAS,IAAY,4BACnB,MAAM7I,QAAiBnB,EAAc+B,KAAK,4BAA6B,CAAEiO,SAAU9G,IAInF,OAFA4C,GAAA,KAAY,8BAA+B5C,GAEpC/H,EAASf,SAEnB,iB,eC3ET,MAgCakQ,IAAyB,KAAA/J,OAhCf,KACrB,MAAMzD,GAAU,QAAYqD,IAE5B,OACE,iBAACe,GAAA,EAAD,CACEC,GAAI,CACFwB,QAAS,eACToF,OAAQ,kBACR3G,QAAS,OACTiE,aAAc,QACdtC,OAAQ,MACRiF,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIjBtF,EAAQ8C,KAAK2K,GACL,iBAAC,GAAD,CAAkBtC,IAAKsC,EAAOpC,IAAKjF,GAAIqH,EAAOpC,IAAK5L,KAAMgO,EAAOhO,KAAMjB,OAAQiP,EAAOjP,e,eC1BpG,MAuEakP,IAAwB,KAAAjK,OAvEf,EAAG2C,GAAAA,EAAI3G,KAAAA,EAAMjB,OAAAA,KAE/B,iBAAC4F,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBd,WAAY,WAGd,iBAACH,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBgE,UAAW,MACX9E,WAAY,SACZsB,QAAS,WACTP,aAAc,MACdoC,OAAQ,UACR,kBAAmB,CACjBnC,OAAQ,aAAa5B,GAAME,QAAQkC,OAAOC,SAE5C,yBAA0B,CACxBF,gBAAiBnC,GAAME,QAAQyF,QAAQvF,OAEzC,uBAAwB,CACtB+B,gBAAiBnC,GAAME,QAAQvF,MAAMyF,SAIzC,iBAACwF,GAAA,EAAD,CACEC,QAAQ,WACRrD,QAAQ,MACRsD,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDrC,MAAkB,WAAX9I,EAAsB,UAAY,SAEzC,iBAACoL,GAAA,EAAD,CAAQvF,GAAI,CAAEyB,gBAAiB,cAEjC,iBAAC1B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,gBAC/C,iBAACa,GAAA,EAAD,CAAYC,QAAQ,SAAS1G,GAAc,IAC3C,iBAACyG,GAAA,EAAD,CAAYC,QAAQ,WAAsB,WAAX3H,EAAsB,SAAW,eAIpE,iBAAC4F,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,yBACrBgE,UAAW,OACX9E,WAAY,SACZC,eAAgB,QAGlB,iBAAC0B,GAAA,EAAD,CAAYC,QAAQ,SAAQ,+BAC5B,iBAAC,GAAD,CACEA,QAAQ,YACRmB,MAAM,UACNJ,QAAS,KAAY,mB,EAAA,YACnB,MAAM7I,QAAiBnB,EAAc+B,KAAK,4BAA6B,CAAEiO,SAAU9G,IAInF,OAFA4C,GAAA,KAAY,8BAA+B5C,GAEpC/H,EAASf,M,+KALG,iB,mBAOtB,iB,eC/DT,MAgCaqQ,IAA2B,KAAAlK,OAhCf,KACvB,MAAMxD,GAAY,QAAYqD,IAE9B,OACE,iBAACc,GAAA,EAAD,CACEC,GAAI,CACFwB,QAAS,eACToF,OAAQ,kBACR3G,QAAS,OACTiE,aAAc,QACdtC,OAAQ,MACRiF,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIjBrF,EAAU6C,KAAK8K,GACP,iBAAC,GAAD,CAAezC,IAAKyC,EAASvC,IAAKjF,GAAIwH,EAASvC,IAAK5L,KAAMmO,EAASnO,KAAMjB,OAAQoP,EAASpP,e,eC1BzG,MAkFaqP,IAAiC,KAAApK,OAlFf,EAC7B2C,GAAAA,EACA3G,KAAAA,EACAjB,OAAAA,EACAsP,eAAAA,KAQE,iBAAC1J,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBd,WAAY,WAGd,iBAACH,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,kBACrBgE,UAAW,MACX9E,WAAY,SACZsB,QAAS,WACTP,aAAc,MACdoC,OAAQ,UACR,kBAAmB,CACjBnC,OAAQ,aAAa5B,GAAME,QAAQkC,OAAOC,SAE5C,yBAA0B,CACxBF,gBAAiBnC,GAAME,QAAQyF,QAAQvF,OAEzC,uBAAwB,CACtB+B,gBAAiBnC,GAAME,QAAQvF,MAAMyF,SAIzC,iBAACwF,GAAA,EAAD,CACEC,QAAQ,WACRrD,QAAQ,MACRsD,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDrC,MAAkB,WAAX9I,EAAsB,UAAY,SAEzC,iBAACoL,GAAA,EAAD,CAAQvF,GAAI,CAAEyB,gBAAiB,cAEjC,iBAAC1B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,gBAC/C,iBAACa,GAAA,EAAD,CAAYC,QAAQ,SAAS1G,GAAc,IAC3C,iBAACyG,GAAA,EAAD,CAAYC,QAAQ,WAAsB,WAAX3H,EAAsB,SAAW,eAIpE,iBAAC4F,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,yBACrBgE,UAAW,OACX9E,WAAY,SACZC,eAAgB,QAGlB,iBAAC,GAAD,CACE2B,QAAQ,YACRmB,MAAM,UACNJ,QAAS,KAAY,mB,EAAA,YACnB4G,EAAe,IAEf,MAAMzP,QAAiBnB,EAAc+B,KAAK,yBAA0B,CAAEiO,SAAU9G,IAIhF,OAFA4C,GAAA,KAAY,2BAA4B5C,GAEjC/H,EAASf,M,+KAPG,iB,mBAStB,yB,eCxET,MA2DayQ,IAAuB,KAAAtK,OA3Df,KACnB,MAAMkB,GAAW,UAEX7E,GAAQ,QAAYqD,KAEnB6K,EAAaF,IAAkB,KAAA/I,UAAS,IAQ/C,OANA,KAAA+F,YAAU,KACJkD,GACFrJ,EAAS3C,EAAgB,CAAEgM,YAAAA,OAE5B,CAACA,IAGF,iBAAC5J,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,eAAgBoF,OAAQ,oBAC1C,iBAAC,GAAD,CACErE,WAAS,EACTW,KAAK,QACLb,YAAY,mBACZJ,MAAO0H,EACPzH,SAAWC,GAAUsH,EAAetH,EAAMC,OAAOH,SAEnD,iBAAClC,GAAA,EAAD,CACEC,GAAI,CACFwB,QAAS,eACToF,OAAQ,kBACR3G,QAAS,OACTiE,aAAc,QACdtC,OAAQ,MACRiF,UAAW,SACX,uBAAwB,CACtB9F,MAAO,OAET,6BAA8B,CAC5BU,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCD,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,SAIjB,MAAAxF,OAAA,EAAAA,EAAOgD,KAAKjD,GAET,iBAAC,GAAD,CACEsL,IAAKtL,EAAKuG,GACVA,GAAIvG,EAAKuG,GACT3G,KAAMI,EAAKJ,KACXjB,OAAQqB,EAAKrB,OACbsP,eAAAA,W,4FC3Cd,MA4jBaG,IAAsB,KAAAxK,OA5jBf,KAClB,MAAMmB,GAAW,WACXD,GAAW,UAEX9E,GAAO,QAAYqD,KAElB2B,EAAOC,IAAY,KAAAC,UAAS,KAC5BuC,EAAO4G,IAAY,KAAAnJ,UAAS,KAC5BqF,EAAO+D,IAAY,KAAApJ,UAAS,KAC5BqJ,EAAgBC,IAAqB,KAAAtJ,WAAS,IAE9CuJ,EAAiBC,IAAsB,KAAAxJ,WAAS,IAEjD,QAAEyJ,EAAO,QAAEC,GCxBK,MACtB,MAAOC,EAAOC,IAAY,KAAA5J,UAAS,GAkBnC,OAhBA,KAAA+F,YAAU,KACR,MAAM8D,EAAWC,aAAY,KAC3BF,GAAUG,GAAcA,EAAY,MACnC,KAEH,MAAO,IAAMC,cAAcH,KAC1B,IAUI,CAAEJ,QAROQ,KAAKC,MAAMP,EAAQ,IAChCQ,WACAC,SAAS,EAAG,KAMGV,QAJFW,OAAOV,EAAiC,GAAzBM,KAAKC,MAAMP,EAAQ,KAC/CQ,WACAC,SAAS,EAAG,ODOcE,GAEvBC,GAAa,KAAAC,QAAgC,MAuDnD,OApBA,KAAAzE,YAAU,KACR,MAAM0E,EAAuBhJ,IACT,WAAdA,EAAM2E,KACRvG,EAAS,YAMb,OAFA6K,SAASC,iBAAiB,UAAWF,GAE9B,IAAMC,SAASE,oBAAoB,UAAWH,KACpD,KAEH,KAAA1E,YAAU,KAENyD,EADY,KAAVjH,GAA0B,KAAV8C,KAKnB,CAAC9C,EAAO8C,IAGT,iBAAChG,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACV1C,QAAS,OACTuB,QAAS,sBACT0C,aAAc,QACdzC,gBAAiB,YAInB,iBAAC,GAAD,CACEzB,GAAI,CAAEC,QAAS,QACf7B,KAAK,OACL2D,GAAG,QACH3G,KAAK,QACL4G,MAAM,sBACNuJ,WAAY,CAAEC,IAAMC,GAAgBR,EAAWS,QAAUD,GACzDvJ,SA1DqBC,IACzB,MAAM,EAAQA,EAAMC,OAAOuJ,MAAQxJ,EAAMC,OAAOuJ,MAAM,GAAK,KACrDC,EAAa,IAAIC,WAEnB,IACFD,EAAWE,cAAc,GACzBF,EAAWG,OAAS,KAGd,EAAM7I,KAFa,SAGrB,WAAY,yCAGd4G,EAASkC,OAAOJ,EAAWK,WAI/BnC,EAAS3H,EAAMC,OAAOH,QA0ClBI,YAAY,+BACZC,aAAa,MACbC,WAAS,EACT2J,SAAO,IAGT,iBAACC,GAAA,EAAD,CACErF,IAAKsF,GAAA,OACLzR,QAAQ,yCACR0R,oBAAqBD,GAAA,EACrB5D,KAAMyB,EACNjK,GAAI,CACF,IAAK,CACH2C,SAAU,WACV2J,KAAM,OACNC,UAAW,OACXxL,MAAO,OAEP,2BAA4B,CAC1BA,MAAO,UAIb2H,QAAS,CAACvG,EAAOqK,KACA,cAAXA,GAIJtC,GAAmB,IAErB9E,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDmH,OACE,iBAAC1M,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,0BACrBgE,UAAW,OACX9E,WAAY,WAGd,iBAACkD,GAAA,EAAD,CACEpD,GAAI,CAAEqD,OAAQ,WACdC,UAAU,QACVT,QAAS,KACPgH,EAAS,IACTC,EAAS,MAGX,iBAACjI,GAAA,EAAD,KAAY,UAEd,iBAACmB,GAAA,EAAD,CACElB,QAAQ,YACRmB,MAAM,UACNJ,QAAS,KACPvC,EACE5C,EAAgB,CACduF,MAAOA,QAAgB,EACvB8C,MAAOA,QAAgB,KAG3B8D,EAAS,IACTC,EAAS,MAEZ,0BAMP,iBAACjI,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;;WAQf,wBAGD,iBAACtB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACT2B,OAAQ,MACRe,SAAU,WACV+J,IAAK,OACLC,MAAO,QACPC,UAAW,SACXvJ,OAAQ,UAER,2BAA4B,CAC1BwJ,KAAM,YAGVhK,QAAS,IAAMtC,EAAS,aAExB,iBAACuM,GAAA,EAAD,CAAgB9M,GAAI,CAAEe,MAAO,OAAQX,OAAQ,OAAQyM,KAAM,aAC3D,iBAAChL,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,YAAa,QAG1D,iBAAClD,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,cACrBgE,UAAW,OACX7E,eAAgB,kBAIlB,iBAACJ,GAAA,EAAD,KACE,iBAACA,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,SAAUmF,aAAc,sBAC1C,iBAAC9E,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;iBAOf,UAGD,iBAAC,GAAD,CACES,QAAQ,YACRe,QAAS,KACHoI,EAAWS,SACbT,EAAWS,QAAQsB,UAGxB,kBAKH,iBAACjN,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,SAAUmF,aAAc,sBAC1C,iBAAC9E,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;iBAOf,gBAGD,iBAACtB,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,0BAA2BgE,UAAW,SAErF,iBAACjF,GAAA,EAAD,KACE,iBAACA,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBsB,gBAAiB,MAAAjG,OAAA,EAAAA,EAAMsK,cACvB/E,MAAO,OACPX,OAAQ,OACRa,aAAc,MACdoC,OAAQ,WAEVR,QAAS,KACPmH,GAAkB,KAGnBD,GAAkB,iBAACkD,GAAA,EAAD,CAAOjN,GAAI,CAAE6M,KAAM,WAAa9L,MAAO,GAAIX,OAAQ,MAExE,iBAACyB,GAAA,EAAD,CACER,UAAW,IAAG;;;qBAIf,iBAKH,iBAACtB,GAAA,EAAD,CAAKC,GAAI,CAAE2C,SAAU,aACnB,iBAAC5C,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACV1C,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBsB,gBAAiBwB,EACjBlC,MAAO,OACPX,OAAQ,OACRa,aAAc,MACdoC,OAAQ,UACRnC,OAAQ+B,EAAQ,GAAK,qBAEvBJ,QAAS,KACPgH,EAAS,WACTG,GAAkB,MAGlBD,GAAkB,iBAACkD,GAAA,EAAD,CAAOjN,GAAI,CAAE6M,KAAM,WAAa9L,MAAO,GAAIX,OAAQ,KACvE,iBAAC,QAAD,CACEiB,UAAW,IAAG;;;;;;;;sBASdjD,KAAK,QACL6D,MAAOgB,EACPf,SAAWC,IACT0H,EAAS1H,EAAMC,OAAOH,OACtB+H,GAAkB,OAIxB,iBAACkD,GAAA,EAAD,CAAUlN,GAAI,CAAE2C,SAAU,WAAY+J,IAAK,IAAKC,MAAO,OAAS5L,MAAO,GAAIX,OAAQ,KACnF,iBAACyB,GAAA,EAAD,CACER,UAAW,IAAG;;;qBAIf,uBAOP,iBAACtB,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,WAClB,iBAACK,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;iBAOf,WAGD,iBAACQ,GAAA,EAAD,CACER,UAAW,IAAG;;;;iBAKf,+CAID,iBAAC,GAAD,CAAW8L,WAAS,EAACC,KAAM,EAAG7K,WAAS,KAGzC,iBAACxC,GAAA,EAAD,KACE,iBAACiD,GAAA,EAAD,CACEqK,eAAa,EACbrJ,kBAAgB,EAChBlC,QAAQ,YACRe,QAAS,IAAMvC,EAAS9C,MACzB,uBAML,iBAACuC,GAAA,EAAD,KACE,iBAACA,GAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,eAClB,iBAACK,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;iBAOf,iBAKH,iBAACtB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTyG,iBAAkB,WAClB3F,MAAO,QACPuM,UAAW,QACXC,UAAW,8BACXtM,aAAc,MACdG,SAAU,WAIZ,iBAACrB,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACVvC,OAAQ,OACRqB,gBAAiB,MAAAjG,OAAA,EAAAA,EAAMsK,gBAIzB,iBAAC/F,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACV+J,IAAK,OACLJ,KAAM,OACNvL,MAAO,OACPX,OAAQ,OACRsH,gBAAiB3B,EAAQ,OAAOA,KAAW,OAAO,MAAAvK,OAAA,EAAAA,EAAMuK,SACxDyH,WAAY,MAAAhS,OAAA,EAAAA,EAAMsK,cAClB2H,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,UACpBzM,OAAQ,aAAa5B,GAAME,QAAQ2B,KAAK,OACxCF,aAAc,MACdoC,OAAQ,UAER,mBAAoB,CAClB,YAAa,CACXuK,QAAS,KACT3N,QAAS,QACTc,MAAO,OACPX,OAAQ,OACRyN,eAAgB,mBAChB5M,aAAc,MACdG,SAAU,UAEZ,WAAY,CACVwM,QAAS,oBACT3N,QAAS,QACT0C,SAAU,WACV+J,IAAK,MACLJ,KAAM,MACNC,UAAW,wBACXK,UAAW,SACX3J,MAAO,QACP6K,WAAY,aACZC,cAAe,YACfhB,SAAU,UAIhBlK,QAAS,KACHoI,EAAWS,SACbT,EAAWS,QAAQsB,UAIvB,iBAACjN,GAAA,EAAD,CACEC,GAAI,CACFe,MAAO,OACPX,OAAQ,OACRqB,gBAAiBnC,GAAME,QAAQ2B,KAAK,KACpCwB,SAAU,WACV+J,IAAK,IACLC,MAAO,IACP1L,aAAc,QAGhB,iBAAC+M,GAAA,EAAD,CACEhO,GAAI,CACFe,MAAO,OACPX,OAAQ,OACRuC,SAAU,WACV+J,IAAK,MACLJ,KAAM,MACNC,UAAW,8BAOrB,iBAACxM,GAAA,EAAD,CACEC,GAAI,CACFwB,QAAS,sBACTC,gBAAiBnC,GAAME,QAAQ2B,KAAK,OAItC,iBAACU,GAAA,EAAD,CACER,UAAW,IAAG;;;mBAKb,MAAA7F,OAAA,EAAAA,EAAMJ,KAEP,iBAACyG,GAAA,EAAD,CACER,UAAW,IAAG;;;;;oBAMd4M,UAAU,QACX,IACG,MAAAzS,OAAA,EAAAA,EAAMuG,GAAGiE,OAAO,KAItB,iBAACnE,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;;;0CAQY/B,GAAME,QAAQ2B,KAAK;kBAE7CW,QAAQ,aACT,WAGD,iBAACD,GAAA,EAAD,CAAY7B,GAAI,CAAEsN,UAAW,QAASY,cAAe,QAAUjL,MAAM,aAAY,8BAIjF,iBAACpB,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;;;0CAQY/B,GAAME,QAAQ2B,KAAK;kBAE7CW,QAAQ,aACT,qBAGD,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQe,oBAAqB,WAAYgE,UAAW,OAAQ9E,WAAY,WAE1F,iBAACH,GAAA,EAAD,CACEC,GAAI,CACFe,MAAO,OACPX,OAAQ,OACRqB,gBAAiBnC,GAAME,QAAQC,QAAQC,MACvCuB,aAAc,MACdhB,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB,iBAACgO,GAAA,EAAD,CAAMnO,GAAI,CAAE6M,KAAM,WAAa9L,MAAO,GAAIX,OAAQ,MAGpD,iBAACL,GAAA,EAAD,KACE,iBAAC8B,GAAA,EAAD,CAAYC,QAAQ,YAAYmB,MAAM,aAAY,wBAGlD,iBAACpB,GAAA,EAAD,CAAYoB,MAAM,aAAY,UACpBkH,EAAQ,IAAEC,SAUhC,iBAACrK,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,SAClB,iBAAC4B,GAAA,EAAD,CAAYC,QAAQ,MAAK,cAAY,MAAAtG,OAAA,EAAAA,EAAMgF,OAC3C,iBAAC,GAAD,CACEpC,KAAK,QACL2D,GAAG,QACH3G,KAAK,QACL4G,MAAM,0BACNC,MAAOzB,EACP0B,SAAWC,GAAU1B,EAAS0B,EAAMC,OAAOH,OAC3CI,YAAY,oBACZC,aAAa,MACbC,WAAS,S,qCE5jBnB,MAmKa6L,IAA8B,KAAAhP,OAnKf,EAAGiP,OAAAA,EAAQ3F,QAAAA,MACrC,MAAMpI,GAAW,UAEX9E,GAAO,QAAYqD,KAElBzD,EAAMqI,IAAW,KAAA/C,UAAS,MAAAlF,OAAA,EAAAA,EAAMJ,OAChCuF,EAAUC,IAAe,KAAAF,UAAS,IAEzC,OACE,iBAAC4N,GAAA,EAAD,CAAO9F,KAAM6F,EAAQE,gBAAiB7F,EAAS8F,qBAAmB,GAChE,iBAACzO,GAAA,EAAD,CACEC,GAAI,CACFe,MAAO,QACPU,gBAAiB,UACjBkB,SAAU,QACV+J,IAAK,MACLJ,KAAM,MACNC,UAAW,wBACXtL,aAAc,MACdG,SAAU,WAGZ,iBAACrB,GAAA,EAAD,CAAKC,GAAI,CAAE2C,SAAU,WAAY1C,QAAS,OAAQ2B,OAAQ,MAAOJ,QAAS,cACxE,iBAACK,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW2J,UAAW,WAAY,6BAG7E,iBAAC/K,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW2J,UAAW,WAAY,oDAG7E,iBAAC7M,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACV+J,IAAK,OACLC,MAAO,OACPtJ,OAAQ,UAER,QAAS,CACPwJ,KAAM,WAER,2BAA4B,CAC1BA,KAAM,YAGVhK,QAAS6F,GAET,iBAAC+F,GAAA,EAAD,CAAOzO,GAAI,OAGf,iBAACD,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,OAAQJ,QAAS,qBACnD,iBAACzB,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,QAClC,iBAACC,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,oBAGpF,iBAAC,GAAD,CACE/N,GAAI,CACFyB,gBAAiB,UAEjB,0BAA2B,CACzBwB,MAAO,WAIT,yBAA0B,CACxBsK,UAAW,4BAEb,+BAAgC,CAC9BA,UAAW,4BAEb,+BAAgC,CAC9BA,UAAW,4BAEb,gCAAiC,CAC/BA,UAAW,6BAGfnP,KAAK,OACL2D,GAAG,OACH3G,KAAK,OACL6G,MAAO7G,EACP8G,SAAWC,GAAUsB,EAAQtB,EAAMC,OAAOH,OAC1CK,aAAa,MACbC,WAAS,KAGb,iBAACxC,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQ2B,OAAQ,QAClC,iBAACC,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,kBAGpF,iBAAC,GAAD,CACE/N,GAAI,CACFyB,gBAAiB,UAEjB,0BAA2B,CACzBwB,MAAO,WAIT,yBAA0B,CACxBsK,UAAW,4BAEb,+BAAgC,CAC9BA,UAAW,4BAEb,+BAAgC,CAC9BA,UAAW,4BAEb,gCAAiC,CAC/BA,UAAW,6BAGfnP,KAAK,WACL2D,GAAG,WACH3G,KAAK,WACL6G,MAAOtB,EACPuB,SAAWC,GAAUvB,EAAYuB,EAAMC,OAAOH,OAC9CK,aAAa,MACbC,WAAS,MAIf,iBAACxC,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTE,eAAgB,MAChBa,oBAAqB,yBACrBgE,UAAW,MACXxD,QAAS,OACTC,gBAAiB,YAGnB,iBAAC2B,GAAA,EAAD,CACEpD,GAAI,CAAEC,QAAS,OAAQC,WAAY,SAAU+C,MAAO,UAAWI,OAAQ,UAAW7B,QAAS,YAC3F8B,UAAU,QACVT,QAAS,KACPY,EAAQ,MAAAjI,OAAA,EAAAA,EAAMJ,MACdwF,EAAY,IAEZ8H,MAGF,iBAAC7G,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,SAAU,WAExC,iBAAC,GAAD,CACEjL,QAAQ,YACRe,QAAS,KACPvC,EACE5C,EAAgB,CACdtC,KAAAA,EACAuF,SAAAA,KAIJ+H,MAEH,gB,eCxJX,MAqTagG,IAAsB,KAAAtP,OArTf,KAClB,MAAMmB,GAAW,WAEX/E,GAAO,QAAYqD,KAElB8P,EAAaC,IAAkB,KAAAlO,WAAS,IAExCmO,EAAuBC,IAA4B,KAAApO,WAAS,GASnE,OACE,iBAACX,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACV1C,QAAS,OACTuB,QAAS,sBACT0C,aAAc,QACdzC,gBAAiB,YAGnB,iBAAC2M,GAAD,CACEC,OAAQQ,EACRnG,QAAS,KACPoG,GAAyB,MAG7B,iBAACjN,GAAA,EAAD,CACER,UAAW,IAAG;;;;;;WAOf,sBAGD,iBAACtB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACT2B,OAAQ,MACRe,SAAU,WACV+J,IAAK,OACLC,MAAO,QACPC,UAAW,SACXvJ,OAAQ,UAER,2BAA4B,CAC1BwJ,KAAM,YAGVhK,QAAS,IAAMtC,EAAS,YAExB,iBAACuM,GAAA,EAAD,CAAgB9M,GAAI,CAAEe,MAAO,OAAQX,OAAQ,OAAQyM,KAAM,aAC3D,iBAAChL,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,YAAa,QAG1D,iBAAClD,GAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,SAElB,iBAACF,GAAA,EAAD,CACEC,GAAI,CACFyB,gBAAiB,UACjBP,OAAQ,mBACRD,aAAc,MACdO,QAAS,SAGX,iBAACzB,GAAA,EAAD,MACA,iBAACA,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACT2B,OAAQ,MACRmN,aAAc,UAGhB,iBAAClN,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,mCAGpF,iBAAClM,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,YAAa,yNAKxD,iBAAC,GAAD,CACEjD,GAAI,CACF+N,cAAe,OACftM,gBAAiB,UAEjB,mBAAoB,CAClBA,gBAAiB,WAGnB,WAAY,CACVA,gBAAiB,YAGrBK,QAAQ,aACT,+CAML,iBAAC/B,GAAA,EAAD,CAAKC,GAAI,CAAE4G,OAAQ,SAAUnF,gBAAiB,UAAWR,aAAc,MAAOG,SAAU,WACtF,iBAACrB,GAAA,EAAD,CAAKC,GAAI,CAAE2C,SAAU,WAAYlB,gBAAiB,MAAAjG,OAAA,EAAAA,EAAMsK,cAAe1F,OAAQ,UAE7E,iBAACL,GAAA,EAAD,CACEC,GAAI,CACF2C,SAAU,WACV+J,IAAK,OACLJ,KAAM,OACNvL,MAAO,OACPX,OAAQ,OACRsH,iBAAiB,MAAAlM,OAAA,EAAAA,EAAMuK,OAAQ,OAAO,MAAAvK,OAAA,EAAAA,EAAMuK,SAAW,OACvDtE,iBAAiB,MAAAjG,OAAA,EAAAA,EAAMsK,eAAgBtK,EAAKsK,cAAgB,OAC5D2H,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,UACpBzM,OAAQ,oBACRD,aAAc,MACdoC,OAAQ,YAGV,iBAACtD,GAAA,EAAD,CACEC,GAAI,CACFe,MAAO,OACPX,OAAQ,OACRqB,gBAAkC,YAAjB,MAAAjG,OAAA,EAAAA,EAAMrB,QAAsB,UAAY,UACzDwI,SAAU,WACVqM,OAAQ,EACRrC,MAAO,EACP1L,aAAc,MACdC,OAAQ,yBAKhB,iBAACnB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,0BACrBb,eAAgB,gBAChBD,WAAY,SACZsB,QAAS,yBAGX,iBAACK,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,YACxC,MAAAzH,OAAA,EAAAA,EAAMJ,KACP,iBAACyG,GAAA,EAAD,CAAYoM,UAAU,OAAOjO,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,YAAa,IACrE,MAAAzH,OAAA,EAAAA,EAAMuG,GAAGiE,OAAO,KAGtB,iBAAC,GAAD,CAAQhG,GAAI,CAAE+N,cAAe,QAAUjM,QAAQ,aAAY,gCAI7D,iBAAC/B,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACT2G,OAAQ,OACRpF,QAAS,OACTC,gBAAiB,UACjBR,aAAc,QAIhB,iBAAClB,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,0BACrBb,eAAgB,gBAChBD,WAAY,SACZsB,QAAS,UAGX,iBAACzB,GAAA,EAAD,KACE,iBAAC8B,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,oBAGpF,iBAAClM,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,YACxC,MAAAzH,OAAA,EAAAA,EAAMJ,KACP,iBAACyG,GAAA,EAAD,CAAYoM,UAAU,OAAOjO,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,IACjG,MAAAvS,OAAA,EAAAA,EAAMuG,GAAGiE,OAAO,MAIxB,iBAAC,GAAD,CACEhG,GAAI,CACF+N,cAAe,OACftM,gBAAiB,UAEjB,mBAAoB,CAClBA,gBAAiB,WAGnB,WAAY,CACVA,gBAAiB,YAGrBK,QAAQ,YACRe,QAAS,KACPiM,GAAyB,KAE5B,aAKH,iBAAC/O,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,0BACrBb,eAAgB,gBAChBD,WAAY,SACZsB,QAAS,UAGX,iBAACzB,GAAA,EAAD,KACE,iBAAC8B,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,qBAGpF,iBAAClM,GAAA,EAAD,CACE7B,GAAI,CACFC,QAAS,OACTe,oBAAqB,yBACrBgE,UAAW,MACX+H,SAAU,OACV9J,MAAO,YAGR0L,EAAc,MAAAnT,OAAA,EAAAA,EAAMgF,MAnOV,CAACA,IAC1B,MAAMyO,EAAoBzO,EAAM0O,OAAO,KAGvC,OAFqBtH,MAAMqH,GAAmBpC,KAAK,KAAKsC,KAAK,IAEvC3O,EAAMwF,MAAMiJ,IA+NSG,CAAmB,MAAA5T,OAAA,EAAAA,EAAMgF,OACtD,iBAAC4C,GAAA,EAAD,CACEpD,GAAI,CAAEqD,OAAQ,UAAWJ,MAAO,WAChCK,UAAU,QACVT,QAAS,KACP+L,GAAgBD,KAGlB,iBAAC9M,GAAA,EAAD,KAAa8M,EAAc,SAAW,eAI5C,iBAAC,GAAD,CACE3O,GAAI,CACF+N,cAAe,OACftM,gBAAiB,UAEjB,mBAAoB,CAClBA,gBAAiB,WAGnB,WAAY,CACVA,gBAAiB,YAGrBK,QAAQ,aACT,aAKH,iBAAC/B,GAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTe,oBAAqB,0BACrBb,eAAgB,gBAChBD,WAAY,SACZsB,QAAS,UAGX,iBAACzB,GAAA,EAAD,KACE,iBAAC8B,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,UAAW8K,cAAe,cAAe,kBAGpF,iBAAClM,GAAA,EAAD,CAAY7B,GAAI,CAAE+M,SAAU,OAAQ9J,MAAO,aACvC,MAAAzH,OAAA,EAAAA,EAAc6T,OAAQ,eAAiB,sCAG7C,iBAAC,GAAD,CACErP,GAAI,CACF+N,cAAe,OACftM,gBAAiB,UAEjB,mBAAoB,CAClBA,gBAAiB,WAGnB,WAAY,CACVA,gBAAiB,YAGrBK,QAAQ,aACT,oB,eCvSf,MAyBawN,IAAwB,KAAAlQ,OAzBf,IAElB,iBAAC,MAAD,KAEE,iBAAC,MAAD,CAAOwE,KAAK,UAAUC,QAAS,iBAAC,GAAD,OAC7B,iBAAC,MAAD,CAAOD,KAAK,cAAcC,QAAS,iBAAC,GAAD,QACnC,iBAAC,MAAD,CAAOD,KAAK,iBAAiBC,QAAS,iBAAC,GAAD,QACtC,iBAAC,MAAD,CAAOD,KAAK,kBAAkBC,QAAS,iBAAC,GAAD,QACvC,iBAAC,MAAD,CAAOD,KAAK,oBAAoBC,QAAS,iBAAC,GAAD,QACzC,iBAAC,MAAD,CAAOD,KAAK,iBAAiBC,QAAS,iBAAC,GAAD,SAGxC,iBAAC,MAAD,CAAOD,KAAK,WAAWC,QAAS,iBAAC,GAAD,QAEhC,iBAAC,MAAD,CAAOD,KAAK,UAAUC,QAAS,iBAAC,GAAD,OAC7B,iBAAC,MAAD,CAAOD,KAAK,eAAeC,QAAS,iBAAC,GAAD,QACpC,iBAAC,MAAD,CAAOD,KAAK,eAAeC,QAAS,iBAAC,GAAD,SAGtC,iBAAC,MAAD,CAAOD,KAAK,WAAWC,QAAS,iBAAC,GAAD,QAChC,iBAAC,MAAD,CAAOD,KAAK,IAAIC,QAAS,iBAAC,MAAD,CAAUC,GAAG,6B,eC3B5C,MAIayL,IAAc,KAAAnQ,OAJf,EAAG9D,eAAAA,KACNA,EAAiB,iBAAC,GAAD,MAAoB,iBAAC,GAAD,Q,eCD9C,MAAMkU,GAAe,KACnB,MAAMlP,GAAW,UAEXhF,GAAiB,QAAYqD,IAC7BnD,GAAO,QAAYqD,IAkEzB,OAhEA,KAAA4H,YAAU,KACJ3M,aAAaC,QAAQ,UACvBuG,EAAShD,OAEV,KAEH,KAAAmJ,YAAU,KACJnL,IACFgF,EAAS7C,KAETkH,GAAA,GAAU,cAAc,KACtBrE,EAAS7C,WAGZ,CAACnC,KAEJ,KAAAmL,YAAU,MACJ,MAAAjL,OAAA,EAAAA,EAAMuG,KACR4C,GAAA,KAAY,aAAcnJ,EAAKuG,MAEhC,CAAC,MAAAvG,OAAA,EAAAA,EAAMuG,KA4CH,iBAAC,GAAD,CAAKzG,eAAAA,K,0BClEd,MAAMmU,GAAO,KACX,IAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BZ,UAGE,iBAAC,KAAD,CAAUnR,MAAK,IACb,iBAACoR,EAAA,EAAD,CAAepQ,MAAK,IAClB,iBAAC,KAAD,KACE,iBAACkQ,GAAD,MACA,iBAAC,KAAD,CAAgBlQ,MAAM,eAOhC,IAAAqQ,QAAO,iBAACF,GAAD,MAAUrE,SAASwE,cAAc,YCxDpCC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,QAIfJ,EAAoBO,EAAID,ErDzBpBjY,EAAW,GACf2X,EAAoBQ,EAAI,CAACrE,EAAQsE,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,EAAAA,EACnB,IAASC,EAAI,EAAGA,EAAIzY,EAAS4Q,OAAQ6H,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYtY,EAASyY,GACpC3T,GAAY,EACP4T,EAAI,EAAGA,EAAIN,EAASxH,OAAQ8H,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAaK,OAAOhJ,KAAKgI,EAAoBQ,GAAGS,OAAOjK,GAASgJ,EAAoBQ,EAAExJ,GAAKyJ,EAASM,MAC9IN,EAASS,OAAOH,IAAK,IAErB5T,GAAY,EACTwT,EAAWC,IAAcA,EAAeD,IAG7C,GAAGxT,EAAW,CACb9E,EAAS6Y,OAAOJ,IAAK,GACrB,IAAIK,EAAIT,SACEP,IAANgB,IAAiBhF,EAASgF,IAGhC,OAAOhF,EAvBNwE,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAIzY,EAAS4Q,OAAQ6H,EAAI,GAAKzY,EAASyY,EAAI,GAAG,GAAKH,EAAUG,IAAKzY,EAASyY,GAAKzY,EAASyY,EAAI,GACrGzY,EAASyY,GAAK,CAACL,EAAUC,EAAIC,IsDJ/BX,EAAoBoB,EAAKf,IACxB,IAAIgB,EAAShB,GAAUA,EAAOiB,WAC7B,IAAOjB,EAAiB,QACxB,IAAM,EAEP,OADAL,EAAoBuB,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRrB,EAAoBuB,EAAI,CAACnB,EAASqB,KACjC,IAAI,IAAIzK,KAAOyK,EACXzB,EAAoB0B,EAAED,EAAYzK,KAASgJ,EAAoB0B,EAAEtB,EAASpJ,IAC5EgK,OAAOW,eAAevB,EAASpJ,EAAK,CAAE4K,YAAY,EAAM5W,IAAKyW,EAAWzK,MCJ3EgJ,EAAoB6B,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GCAxBlC,EAAoB0B,EAAI,CAACS,EAAKC,IAAUpB,OAAOqB,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFpC,EAAoBmB,EAAKf,IACH,oBAAXoC,QAA0BA,OAAOC,aAC1CzB,OAAOW,eAAevB,EAASoC,OAAOC,YAAa,CAAEtQ,MAAO,WAE7D6O,OAAOW,eAAevB,EAAS,aAAc,CAAEjO,OAAO,K,MCLvD,IAAIuQ,EACA1C,EAAoB6B,EAAEc,gBAAeD,EAAY1C,EAAoB6B,EAAEnK,SAAW,IACtF,IAAI4D,EAAW0E,EAAoB6B,EAAEvG,SACrC,IAAKoH,GAAapH,IACbA,EAASsH,gBACZF,EAAYpH,EAASsH,cAAcpR,MAC/BkR,GAAW,CACf,IAAIG,EAAUvH,EAASwH,qBAAqB,UACzCD,EAAQ5J,SAAQyJ,EAAYG,EAAQA,EAAQ5J,OAAS,GAAGzH,KAK7D,IAAKkR,EAAW,MAAM,IAAIK,MAAM,yDAChCL,EAAYA,EAAUM,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFhD,EAAoBiD,EAAIP,EAAY,O,SCVpC,IAAIQ,EAAkB,CACrB,IAAK,GAaNlD,EAAoBQ,EAAEO,EAAKoC,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4Bla,KACvD,IAGI8W,EAAUkD,GAHT1C,EAAU6C,EAAaC,GAAWpa,EAGhB2X,EAAI,EAC3B,GAAGL,EAAS+C,MAAMvR,GAAgC,IAAxBiR,EAAgBjR,KAAa,CACtD,IAAIgO,KAAYqD,EACZtD,EAAoB0B,EAAE4B,EAAarD,KACrCD,EAAoBO,EAAEN,GAAYqD,EAAYrD,IAGhD,GAAGsD,EAAS,IAAIpH,EAASoH,EAAQvD,GAGlC,IADGqD,GAA4BA,EAA2Bla,GACrD2X,EAAIL,EAASxH,OAAQ6H,IACzBqC,EAAU1C,EAASK,GAChBd,EAAoB0B,EAAEwB,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAOnD,EAAoBQ,EAAErE,IAG1BsH,EAAqB3B,WAAoC,wBAAIA,WAAoC,yBAAK,GAC1G2B,EAAmBC,QAAQN,EAAqBO,KAAK,KAAM,IAC3DF,EAAmBG,KAAOR,EAAqBO,KAAK,KAAMF,EAAmBG,KAAKD,KAAKF,K,GC7CvF,IAAII,EAAsB7D,EAAoBQ,OAAEL,EAAW,CAAC,MAAM,IAAOH,EAAoB,OAC7F6D,EAAsB7D,EAAoBQ,EAAEqD,I","sources":["webpack://video-calls/webpack/runtime/chunk loaded","webpack://video-calls/./src/core/constants/index.ts","webpack://video-calls/./src/modules/user/services/constants/index.ts","webpack://video-calls/./src/modules/user/services/index.ts","webpack://video-calls/./src/core/utils/axios-instance.ts","webpack://video-calls/./src/core/services/add-message-to-channel.ts","webpack://video-calls/./src/core/services/get-approvals.ts","webpack://video-calls/./src/core/services/get-channel-messages.ts","webpack://video-calls/./src/core/services/get-channels.ts","webpack://video-calls/./src/core/services/get-invites.ts","webpack://video-calls/./src/modules/friends/store/actions.ts","webpack://video-calls/./src/modules/friends/services/get-friends-service.ts","webpack://video-calls/./src/modules/user/store/user.ts","webpack://video-calls/./src/modules/user/store/actions.ts","webpack://video-calls/./src/modules/user/store/sagas.ts","webpack://video-calls/./src/core/store/sagas.ts","webpack://video-calls/./src/core/store/index.ts","webpack://video-calls/./src/modules/user/store/selectors.ts","webpack://video-calls/./src/core/components/text-field/text-field.tsx","webpack://video-calls/./src/core/theme/index.ts","webpack://video-calls/./src/core/assets/images/authorization-image.jpg","webpack://video-calls/./src/core/layouts/authorization-layout/authorization-layout.tsx","webpack://video-calls/./src/modules/user/pages/authorization/authorization.tsx","webpack://video-calls/./src/modules/user/pages/registration/registration.tsx","webpack://video-calls/./src/core/routes/public-routes/public-routes.tsx","webpack://video-calls/./src/core/components/button/button.tsx","webpack://video-calls/./src/core/components/navigation/navigation.tsx","webpack://video-calls/./src/core/utils/socket.ts","webpack://video-calls/./src/core/components/user/user.tsx","webpack://video-calls/./src/core/components/user-control/user-control.tsx","webpack://video-calls/./src/modules/friends/pages/friends/friends.tsx","webpack://video-calls/./src/core/components/messages/messages.tsx","webpack://video-calls/./src/modules/profile/pages/profile/components/user-settings/user-settings.tsx","webpack://video-calls/./src/modules/profile/pages/profile/profile.tsx","webpack://video-calls/./src/core/layouts/channels-layout/channels-layout.tsx","webpack://video-calls/./src/modules/channels/pages/channels/channels.tsx","webpack://video-calls/./src/core/components/user-friends/user-friends.tsx","webpack://video-calls/./src/core/components/all-friends/all-friends.tsx","webpack://video-calls/./src/core/components/friends-online/friends-online.tsx","webpack://video-calls/./src/core/components/user-add-to-friends/user-add-to-friends.tsx","webpack://video-calls/./src/core/components/friends-invites/friends-invites.tsx","webpack://video-calls/./src/core/components/user-approvals/user-approvals.tsx","webpack://video-calls/./src/core/components/friends-approvals/friends-approvals.tsx","webpack://video-calls/./src/core/components/user-add-invite-to-friends/user-add-invite-to-friends.tsx","webpack://video-calls/./src/core/components/add-to-friends/add-to-friends.tsx","webpack://video-calls/./src/modules/profile/pages/profile/components/user-profile/user-profile.tsx","webpack://video-calls/./src/modules/profile/hooks/index.ts","webpack://video-calls/./src/modules/profile/pages/profile/modals/modal-change-user-name.tsx","webpack://video-calls/./src/modules/profile/pages/profile/components/user-account/user-account.tsx","webpack://video-calls/./src/core/routes/private-routes/private-routes.tsx","webpack://video-calls/./src/core/components/app/app.tsx","webpack://video-calls/./src/core/containers/app-container/app-container.tsx","webpack://video-calls/./src/index.tsx","webpack://video-calls/webpack/bootstrap","webpack://video-calls/webpack/runtime/compat get default export","webpack://video-calls/webpack/runtime/define property getters","webpack://video-calls/webpack/runtime/global","webpack://video-calls/webpack/runtime/hasOwnProperty shorthand","webpack://video-calls/webpack/runtime/make namespace object","webpack://video-calls/webpack/runtime/publicPath","webpack://video-calls/webpack/runtime/jsonp chunk loading","webpack://video-calls/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export const DeviceWidth = {\n  Desktop: 1440,\n  Tablet: 768,\n  Mobile: 320,\n};\n\nexport const Retina = {\n  Dppx: 1.5,\n  Dpi: 144,\n};\n\nexport const API_URL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:8080'\n    : 'https://ioinitid-video-calls-server.herokuapp.com';\n\nexport const APPLICATION_URL =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://ioinitid.github.io/video-calls';\n","import { API_URL } from 'core/constants';\n\nexport const ApiUrl = {\n  Authorization: 'user/authorization',\n  Refresh: `${API_URL}/api/user/refresh`,\n  Registration: 'user/registration',\n  Logout: 'user/logout',\n  User: 'user/user',\n};\n","import axios from 'axios';\nimport { axiosInstance } from 'core/utils/axios-instance';\nimport { patchUserAction, postAuthorizationAction, postRegistrationAction, postUsersAction } from '../store/actions';\nimport { ApiUrl } from './constants';\nimport { Authorization, User } from './types';\n\n/**\n * Service for user authorization.\n */\nexport const postAuthorizationService = (params: ReturnType<typeof postAuthorizationAction>['payload']) => {\n  return axiosInstance.request<Authorization>({\n    method: 'POST',\n    url: ApiUrl.Authorization,\n    data: params,\n  });\n};\n\n/**\n * Service for user authorization refresh.\n */\nexport const getRefreshService = () => {\n  return axios.request<Authorization>({\n    method: 'GET',\n    url: ApiUrl.Refresh,\n    withCredentials: true,\n  });\n};\n\n/**\n * Service for user registration.\n */\nexport const postRegistrationService = (params: ReturnType<typeof postRegistrationAction>['payload']) => {\n  return axiosInstance.request<Authorization>({\n    method: 'POST',\n    url: ApiUrl.Registration,\n    data: params,\n  });\n};\n\n/**\n * Service for user logout.\n */\nexport const postLogoutService = () => {\n  return axiosInstance.request<never>({\n    method: 'GET',\n    url: ApiUrl.Logout,\n  });\n};\n\n/**\n * Service for getting user data.\n */\nexport const getUserService = () => {\n  return axiosInstance.request<User>({\n    method: 'GET',\n    url: ApiUrl.User,\n  });\n};\n\n/**\n * Service for updating user data.\n */\nexport const patchUserService = (params: ReturnType<typeof patchUserAction>['payload']) => {\n  return axiosInstance.request<User>({\n    method: 'PATCH',\n    url: ApiUrl.User,\n    data: params,\n  });\n};\n\n/**\n * Service for getting user by name.\n */\nexport const postUsersService = (params: ReturnType<typeof postUsersAction>['payload']) => {\n  return axiosInstance.request<User[]>({\n    method: 'POST',\n    url: '/user/users',\n    data: params,\n  });\n};\n","import axios from 'axios';\nimport { getRefreshService, postLogoutService } from 'modules/user/services';\nimport { API_URL } from '../constants';\n\nconst axiosInstance = axios.create({\n  withCredentials: true,\n  baseURL: `${API_URL}/api`,\n});\n\naxiosInstance.interceptors.request.use((config) => {\n  if (config.headers) {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n  }\n\n  return config;\n});\n\naxiosInstance.interceptors.response.use(\n  (config) => {\n    return config;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401) {\n      try {\n        const response = await getRefreshService();\n\n        localStorage.setItem('token', response.data.accessToken);\n\n        return axiosInstance.request(originalRequest);\n      } catch (error) {\n        console.log(error);\n\n        await postLogoutService();\n\n        localStorage.removeItem('token');\n      }\n    }\n\n    throw error;\n  }\n);\n\nexport { axiosInstance };\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const addMessageToChannel = createAsyncThunk(\n  'user/addMessageToChannel',\n  async ({ channel, message }: { channel: string; message: string }) => {\n    const response = await axiosInstance.post('/add-message-to-channel', { channel, message });\n\n    return response.data;\n  }\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getApprovals = createAsyncThunk('user/getApprovals', async () => {\n  const response = await axiosInstance.get('/approvals');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getChannelMessages = createAsyncThunk(\n  'user/getChannelMessages',\n  async ({ channel }: { channel: string }) => {\n    const response = await axiosInstance.post('/get-channel-messages', { channel });\n\n    return response.data;\n  }\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getChannels = createAsyncThunk('user/getChannels', async () => {\n  const response = await axiosInstance.get('/get-channels');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getInvites = createAsyncThunk('user/getInvites', async () => {\n  const response = await axiosInstance.get('/invites');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getFriendsService } from '../services';\n\nexport const getFriendsAction = createAsyncThunk('user/getFriendsAction', getFriendsService);\n","import { axiosInstance } from '../../../core/utils/axios-instance';\n\nconst getFriendsService = async () => {\n  const response = await axiosInstance.get('/friends');\n\n  return response.data;\n};\n\nexport { getFriendsService };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { addMessageToChannel } from 'core/services/add-message-to-channel';\nimport { getApprovals } from 'core/services/get-approvals';\nimport { getChannelMessages } from 'core/services/get-channel-messages';\nimport { getChannels } from 'core/services/get-channels';\nimport { getInvites } from 'core/services/get-invites';\nimport { getFriendsAction } from 'modules/friends/store/actions';\nimport { User } from '../services/types';\nimport { ChannelResponse, MessageResponse, UserResponse, UserState } from './types';\n\nconst initialState: UserState = {\n  isAuthorizated: false,\n  isLoading: false,\n  user: undefined,\n  users: undefined,\n  // TODO: Обновление store\n  friends: [],\n  invites: [],\n  approvals: [],\n  isCall: false,\n  isIncomingCall: false,\n  isCallAccepted: false,\n  isCallCanceled: false,\n  channels: [],\n  channelMessages: [],\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setAuthorization: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isAuthorizated = payload;\n    },\n    setIsLoading: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isLoading = payload;\n    },\n    setUser: (state: UserState, { payload }: PayloadAction<User>) => {\n      state.user = payload;\n    },\n    setUsers: (state: UserState, { payload }: PayloadAction<User[]>) => {\n      state.users = payload;\n    },\n    setIsCall: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCall = payload;\n    },\n    setIsIncomingCall: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isIncomingCall = payload;\n    },\n    setIsCallAccepted: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCallAccepted = payload;\n    },\n    setIsCallCanceled: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCallCanceled = payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getFriendsAction.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.friends = payload;\n    });\n    builder.addCase(getInvites.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.invites = payload;\n    });\n    builder.addCase(getApprovals.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.approvals = payload;\n    });\n    builder.addCase(getChannels.fulfilled, (state: UserState, { payload }: PayloadAction<ChannelResponse[]>) => {\n      state.channels = payload;\n    });\n    builder.addCase(getChannelMessages.fulfilled, (state: UserState, { payload }: PayloadAction<MessageResponse[]>) => {\n      state.channelMessages = payload;\n    });\n    builder.addCase(addMessageToChannel.fulfilled, (state: UserState, { payload }: PayloadAction<MessageResponse>) => {\n      state.channelMessages = [...state.channelMessages, payload];\n    });\n  },\n});\n\nexport const {\n  setAuthorization,\n  setIsLoading,\n  setUser,\n  setUsers,\n  setIsCall,\n  setIsIncomingCall,\n  setIsCallAccepted,\n  setIsCallCanceled,\n} = userSlice.actions;\n\nexport const userReducer = userSlice.reducer;\n","import { createAction } from '@reduxjs/toolkit';\nimport { User } from '../services/types';\n\n/**\n * Action for user authorization.\n */\nexport const postAuthorizationAction =\n  createAction<{ email: string; password: string }>('user/postAuthorizationAction');\n\n/**\n * Action for user authorization refresh.\n */\nexport const getRefreshAction = createAction('user/getRefreshAction');\n\n/**\n * Action for user registration.\n */\nexport const postRegistrationAction =\n  createAction<{ email: string; name: string; password: string }>('user/postRegistrationAction');\n\n/**\n * Action for user logout.\n */\nexport const postLogoutAction = createAction('user/postLogoutAction');\n\n/**\n * Action for getting user data.\n */\nexport const getUserAction = createAction('user/getUserAction');\n\n/**\n * Action for updating user data.\n */\nexport const patchUserAction = createAction<Partial<User & { password: string }>>('user/patchUserAction');\n\n/**\n * Action for getting user by name.\n */\nexport const postUsersAction = createAction<{ searchValue: string }>('user/getUsersAction');\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport {\n  getRefreshAction,\n  getUserAction,\n  patchUserAction,\n  postAuthorizationAction,\n  postLogoutAction,\n  postRegistrationAction,\n  postUsersAction,\n} from './actions';\nimport { setAuthorization, setIsLoading, setUser, setUsers } from './user';\nimport {\n  getRefreshService,\n  getUserService,\n  patchUserService,\n  postAuthorizationService,\n  postLogoutService,\n  postRegistrationService,\n  postUsersService,\n} from 'modules/user/services';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\n\n/**\n * Saga for user authorization.\n */\nconst postAuthorizationSaga = function* ({ payload }: ReturnType<typeof postAuthorizationAction>): SagaIterator {\n  try {\n    yield put(setIsLoading(true));\n    const response: Awaited<ReturnType<typeof postAuthorizationService>> = yield call(\n      postAuthorizationService,\n      payload\n    );\n    yield put(setIsLoading(false));\n    yield put(setAuthorization(true));\n    localStorage.setItem('token', response.data.accessToken);\n  } catch (error) {\n    console.error(error);\n    yield put(setIsLoading(false));\n    if (axios.isAxiosError(error)) {\n      return toast.error(error.response?.data.message); // TODO: Добавить тип для ошибки\n    }\n    toast.error('Ошибка авторизации. Проверьте логин и пароль.');\n  }\n};\n\n/**\n * Saga for user authorization refresh.\n */\nconst getRefreshSaga = function* (): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof getRefreshService>> = yield call(getRefreshService);\n    yield put(setAuthorization(true));\n    localStorage.setItem('token', response.data.accessToken);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user registration.\n */\nconst postRegistrationSaga = function* ({ payload }: ReturnType<typeof postRegistrationAction>): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof postRegistrationService>> = yield call(postRegistrationService, payload);\n    yield put(setAuthorization(true));\n    localStorage.setItem('token', response.data.accessToken);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user logout.\n */\nconst postLogoutSaga = function* (): SagaIterator {\n  try {\n    yield call(postLogoutService);\n    yield put(setAuthorization(false));\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for getting user data.\n */\nconst getUserSaga = function* (): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof getUserService>> = yield call(getUserService);\n    yield put(setUser(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for updating user data.\n */\nconst patchUserSaga = function* ({ payload }: ReturnType<typeof patchUserAction>): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof patchUserService>> = yield call(patchUserService, payload);\n    yield put(setUser(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for getting user by name.\n */\nconst postUsersSaga = function* ({ payload }: ReturnType<typeof postUsersAction>): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof postUsersService>> = yield call(postUsersService, payload);\n    yield put(setUsers(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user module sagas.\n */\nconst userSaga = function* (): SagaIterator {\n  yield all([\n    takeEvery(postAuthorizationAction.type, postAuthorizationSaga),\n    takeEvery(getRefreshAction.type, getRefreshSaga),\n    takeEvery(postRegistrationAction.type, postRegistrationSaga),\n    takeEvery(postLogoutAction.type, postLogoutSaga),\n    takeEvery(getUserAction.type, getUserSaga),\n    takeEvery(patchUserAction.type, patchUserSaga),\n    takeEvery(postUsersAction.type, postUsersSaga),\n    // debounce(500, postUsersAction.type, postUsersSaga), // TODO: Подумать про debounce в 500мс для получения пользователей по имени\n  ]);\n};\n\nexport { userSaga };\n","import { all, fork } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { userSaga } from 'modules/user/store/sagas';\n\nconst sagas = [userSaga];\n\n/**\n * Saga for all modules sagas.\n */\nconst rootSaga = function* (): SagaIterator {\n  yield all(sagas.map((saga) => fork(saga)));\n};\n\nexport { rootSaga };\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { userReducer } from 'modules/user/store';\nimport { rootSaga } from 'core/store/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport { store };\n","import { RootState } from '../../../core/store/types';\n\nexport const userIsAuthorizatedSelector = (state: RootState) => state.user.isAuthorizated;\nexport const userIsLoadingSelector = (state: RootState) => state.user.isLoading;\nexport const userUserSelector = (state: RootState) => state.user.user;\nexport const userUsersSelector = (state: RootState) => state.user.users;\n\nexport const userFriendsSelector = (state: RootState) => state.user.friends;\nexport const userInvitesSelector = (state: RootState) => state.user.invites;\nexport const userApprovalsSelector = (state: RootState) => state.user.approvals;\nexport const userIsCallSelector = (state: RootState) => state.user.isCall;\nexport const userIsIncomingCallSelector = (state: RootState) => state.user.isIncomingCall;\nexport const userIsCallAcceptedSelector = (state: RootState) => state.user.isCallAccepted;\nexport const userIsCallCanceledSelector = (state: RootState) => state.user.isCallCanceled;\nexport const userChannelsSelector = (state: RootState) => state.user.channels;\nexport const userChannelMessagesSelector = (state: RootState) => state.user.channelMessages;\n","import { memo } from 'react';\nimport { TextField as MUITextField, TextFieldProps as MUITextFieldProps } from '@mui/material';\n\nconst TextField = ({ ...props }: MUITextFieldProps) => {\n  return <MUITextField {...props} />;\n};\n\nexport const TextFieldMemoized = memo(TextField);\n","import { createTheme, colors } from '@mui/material';\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      light: colors.indigo.A400,\n      main: colors.indigo[500],\n      dark: colors.indigo[800],\n    },\n  },\n});\n","export default __webpack_public_path__ + \"assets/images/authorization-image.6642b50856b9fc50fde3936da1774bf9.jpg\";","import { Box } from '@mui/material';\nimport { memo, ReactElement } from 'react';\n\nconst AuthorizationLayout = ({ children }: { children: ReactElement }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100%',\n      }}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport const AuthorizationLayoutMemoized = memo(AuthorizationLayout);\n","import { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from 'core/components/text-field';\nimport { Box, InputAdornment, IconButton, Typography, Link } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { theme } from 'core/theme';\nimport { useNavigate } from 'react-router-dom';\nimport { postAuthorizationAction } from 'modules/user/store/actions';\nimport authorizationImage from 'core/assets/images/authorization-image.jpg';\nimport { AuthorizationLayout } from 'core/layouts/authorization-layout';\nimport { css } from '@emotion/css';\nimport { LoadingButton } from '@mui/lab';\nimport { userIsLoadingSelector } from 'modules/user/store/selectors';\n\nconst Authorization = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const isLoading = useSelector(userIsLoadingSelector);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  return (\n    <AuthorizationLayout>\n      <Box\n        sx={{\n          display: 'grid',\n          width: '920px',\n          gridTemplateColumns: '448px 472px',\n          borderRadius: '20px',\n          border: `1px solid ${theme.palette.grey[300]}`,\n          overflow: 'hidden',\n        }}\n      >\n        <Box>\n          <img\n            className={css`\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n            `}\n            src={authorizationImage}\n            alt=\"Илюстрация.\"\n          />\n        </Box>\n        <Box sx={{ padding: '48px 56px', backgroundColor: `${theme.palette.common.white}` }}>\n          <Box sx={{ display: 'grid', rowGap: '16px' }}>\n            <Box sx={{ display: 'grid', rowGap: '32px' }}>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"h5\">Войти в свой профиль</Typography>\n                <Box sx={{ display: 'grid', rowGap: '24px' }}>\n                  <TextField\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Адрес электронной почты\"\n                    value={email}\n                    onChange={(event) => setEmail(event.target.value)}\n                    placeholder=\"Введите ваш email\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type={isShowPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Пароль\"\n                    value={password}\n                    onChange={(event) => setPassword(event.target.value)}\n                    placeholder=\"Введите ваш пароль\"\n                    autoComplete=\"off\"\n                    fullWidth\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={() => setIsShowPassword(!isShowPassword)}>\n                            {isShowPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Box>\n              <LoadingButton\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                loading={isLoading}\n                onClick={() => {\n                  dispatch(postAuthorizationAction({ email, password }));\n                }}\n              >\n                Войти\n              </LoadingButton>\n            </Box>\n            <Typography variant=\"subtitle2\">\n              У Вас ещё нет профиля?{' '}\n              <Link\n                sx={{ cursor: 'pointer' }}\n                underline=\"hover\"\n                onClick={(event) => {\n                  event.preventDefault();\n\n                  navigate('/registration');\n                }}\n              >\n                Зарегистрироваться\n              </Link>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </AuthorizationLayout>\n  );\n};\n\nexport const AuthorizationMemoized = memo(Authorization);\n","import { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Typography, TextField, InputAdornment, IconButton, Link } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { theme } from 'core/theme';\nimport { useNavigate } from 'react-router-dom';\nimport { postRegistrationAction } from 'modules/user/store/actions';\nimport authorizationImage from 'core/assets/images/authorization-image.jpg';\nimport { AuthorizationLayout } from 'core/layouts/authorization-layout';\nimport { css } from '@emotion/css';\nimport { LoadingButton } from '@mui/lab';\nimport { userIsLoadingSelector } from 'modules/user/store/selectors';\n\nconst Registration = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const isLoading = useSelector(userIsLoadingSelector);\n\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  return (\n    <AuthorizationLayout>\n      <Box\n        sx={{\n          display: 'grid',\n          width: '920px',\n          gridTemplateColumns: '448px 472px',\n          borderRadius: '20px',\n          border: `1px solid ${theme.palette.grey[300]}`,\n          overflow: 'hidden',\n        }}\n      >\n        <Box>\n          <img\n            className={css`\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n            `}\n            src={authorizationImage}\n            alt=\"Илюстрация.\"\n          />\n        </Box>\n        <Box sx={{ padding: '48px 56px', backgroundColor: `${theme.palette.common.white}` }}>\n          <Box sx={{ display: 'grid', rowGap: '16px' }}>\n            <Box sx={{ display: 'grid', rowGap: '24px' }}>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"h5\">Создать учётную запись</Typography>\n                <Box sx={{ display: 'grid', rowGap: '24px' }}>\n                  <TextField\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Адрес электронной почты\"\n                    value={email}\n                    onChange={(event) => setEmail(event.target.value)}\n                    placeholder=\"Введите ваш email\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    label=\"Имя пользователя\"\n                    value={name}\n                    onChange={(event) => setName(event.target.value)}\n                    placeholder=\"Введите ваше имя\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type={isShowPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Пароль\"\n                    value={password}\n                    onChange={(event) => setPassword(event.target.value)}\n                    placeholder=\"Введите ваш пароль\"\n                    autoComplete=\"off\"\n                    fullWidth\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={() => setIsShowPassword(!isShowPassword)}>\n                            {isShowPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Box>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"caption\" color={theme.palette.grey[500]}>\n                  Регистрируясь, Вы соглашаетесь с{' '}\n                  <Link sx={{ cursor: 'pointer' }} underline=\"hover\">\n                    политикой обработки персональных данных\n                  </Link>\n                </Typography>\n                <LoadingButton\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  loading={isLoading}\n                  onClick={() => {\n                    dispatch(postRegistrationAction({ email, name, password }));\n                  }}\n                >\n                  Зарегистрироваться\n                </LoadingButton>\n              </Box>\n            </Box>\n            <Typography variant=\"subtitle2\">\n              <Link\n                sx={{ cursor: 'pointer' }}\n                underline=\"hover\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  navigate('/authorization');\n                }}\n              >\n                Уже зарегистрированы?\n              </Link>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </AuthorizationLayout>\n  );\n};\n\nexport const RegistrationMemoized = memo(Registration);\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Authorization } from 'modules/user/pages/authorization';\nimport { Registration } from 'modules/user/pages/registration';\n\nconst PublicRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"authorization\" element={<Authorization />} />\n      <Route path=\"registration\" element={<Registration />} />\n      <Route path=\"*\" element={<Navigate to=\"authorization\" />} />\n    </Routes>\n  );\n};\n\nexport const PublicRoutesMemoized = memo(PublicRoutes);\n","import { Button as MUIButton, ButtonProps as MUIButtonProps } from '@mui/material';\nimport { memo } from 'react';\n\nconst Button = ({ children, ...props }: MUIButtonProps) => {\n  return (\n    <MUIButton disableElevation {...props}>\n      {children}\n    </MUIButton>\n  );\n};\n\nexport const ButtonMemoized = memo(Button);\n","import { memo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Group, Dashboard, Settings } from '@mui/icons-material';\nimport { Box, Divider, Tooltip } from '@mui/material';\nimport { theme } from '../../theme';\n\nconst Navigation = () => {\n  const navigate = useNavigate();\n\n  //  TODO: Добавить Drawer компонент\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        rowGap: '24px',\n        height: '100%',\n        alignContent: 'start',\n        padding: '25px 16px',\n        justifyContent: 'center',\n      }}\n    >\n      <Box sx={{ display: 'grid', rowGap: '16px' }}>\n        <Tooltip title=\"Друзья\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/friends')}\n          >\n            <Group />\n          </Box>\n        </Tooltip>\n        <Tooltip title=\"Каналы\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/channels')}\n          >\n            <Dashboard />\n          </Box>\n        </Tooltip>\n      </Box>\n      <Divider />\n      <Tooltip title=\"Профиль\" arrow placement=\"right\">\n        <Box\n          sx={{\n            display: 'grid',\n            padding: '8px',\n            backgroundColor: theme.palette.grey[400],\n            cursor: 'pointer',\n            borderRadius: '8px',\n            justifyContent: 'center',\n            width: '40px',\n          }}\n          onClick={() => navigate('/profile')}\n        >\n          <Settings />\n        </Box>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport const NavigationMemoized = memo(Navigation);\n","import { io } from 'socket.io-client';\nimport { API_URL } from '../constants';\n\nconst socket = io(API_URL, {\n  transports: ['websocket'],\n});\n\nexport { socket };\n","import { memo } from 'react';\nimport { Avatar, colors, Badge, Box, Typography, IconButton } from '@mui/material';\nimport { theme } from '../../theme';\nimport { DeleteOutline } from '@mui/icons-material';\nimport { socket } from '../../utils/socket';\nimport { useSelector } from 'react-redux';\nimport { userUserSelector } from '../../../modules/user/store/selectors';\nimport { useNavigate } from 'react-router-dom';\n\nconst User = ({\n  name,\n  status,\n  channelId,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  email: string;\n  channelId?: string;\n}) => {\n  const user = useSelector(userUserSelector);\n  const navigate = useNavigate();\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr max-content',\n        columnGap: '8px',\n        alignItems: 'center',\n        padding: '8px 12px',\n        borderRadius: '8px',\n        cursor: 'pointer',\n        ':hover': {\n          backgroundColor: theme.palette.grey[300],\n          '.delete-icon': {\n            display: 'grid',\n          },\n        },\n        '.MuiBadge-badge': {\n          border: `1px solid ${theme.palette.common.white}`,\n        },\n        '.MuiBadge-colorSuccess': {\n          backgroundColor: theme.palette.success.light,\n        },\n        '.MuiBadge-colorError': {\n          backgroundColor: theme.palette.error.light,\n        },\n      }}\n      onClick={() => {\n        socket.emit('on-channel-join', channelId, user?.id);\n        navigate('/messages');\n      }}\n    >\n      <Badge\n        overlap=\"circular\"\n        variant=\"dot\"\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        color={status === 'online' ? 'success' : 'error'}\n      >\n        <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n      </Badge>\n      <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n        <Typography variant=\"body2\">{name ? name : ''}</Typography>\n        <Typography variant=\"caption\">В сети</Typography>\n      </Box>\n      <Box className=\"delete-icon\" sx={{ display: 'none' }}>\n        <IconButton>\n          <DeleteOutline sx={{ color: theme.palette.grey[700] }} />\n        </IconButton>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserMemoized = memo(User);\n","import { memo, useState } from 'react';\nimport { Avatar, Badge, Box, IconButton, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Mic, MicOff, Videocam, VideocamOff } from '@mui/icons-material';\nimport { useSelector } from 'react-redux';\nimport { userUserSelector } from '../../../modules/user/store/selectors';\n\nconst UserControl = () => {\n  const user = useSelector(userUserSelector);\n\n  const [isMic, setIsMic] = useState(false);\n  const [isVideocam, setIsVideocam] = useState(false);\n\n  return (\n    <Box sx={{ display: 'grid', alignItems: 'center', backgroundColor: theme.palette.grey[300], padding: '12px 20px' }}>\n      <Box sx={{ display: 'grid', columnGap: '8px', gridTemplateColumns: '40px 1fr 96px' }}>\n        {/* Аватар пользователя */}\n        <Box\n          sx={{\n            '.MuiBadge-badge': {\n              border: `1px solid ${theme.palette.common.white}`,\n            },\n            '.MuiBadge-colorSuccess': {\n              backgroundColor: theme.palette.success.light,\n            },\n            '.MuiBadge-colorError': {\n              backgroundColor: theme.palette.error.light,\n            },\n          }}\n        >\n          <Badge\n            overlap=\"circular\"\n            variant=\"dot\"\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            color={user?.status === 'online' ? 'success' : 'error'}\n          >\n            <Avatar sx={{ backgroundColor: user?.default_color }} src={user?.image} />\n          </Badge>\n        </Box>\n        {/* Имя пользователя */}\n        <Box>\n          <Typography variant=\"body2\">{user?.name}</Typography>\n          <Typography sx={{ color: theme.palette.grey[500] }} variant=\"caption\">\n            #{user?.id.slice(-4)}\n          </Typography>\n        </Box>\n        {/* Кнопки управления */}\n        <Box sx={{ display: 'grid', columnGap: '16px', gridTemplateColumns: 'repeat(2, 40px)', alignItems: 'center' }}>\n          <IconButton onClick={() => setIsMic(!isMic)}>\n            {isMic ? (\n              <Mic sx={{ color: theme.palette.grey[700] }} />\n            ) : (\n              <MicOff sx={{ color: theme.palette.grey[700] }} />\n            )}\n          </IconButton>\n          <IconButton onClick={() => setIsVideocam(!isVideocam)}>\n            {isVideocam ? (\n              <Videocam sx={{ color: theme.palette.grey[700] }} />\n            ) : (\n              <VideocamOff sx={{ color: theme.palette.grey[700] }} />\n            )}\n          </IconButton>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserControlMemoized = memo(UserControl);\n","import { Box, Typography } from '@mui/material';\nimport { Button } from 'core/components/button';\nimport { Navigation } from 'core/components/navigation';\nimport { User } from 'core/components/user';\nimport { UserControl } from 'core/components/user-control';\nimport { theme } from 'core/theme';\n// import { axiosInstance } from 'core/utils/axios-instance';\nimport { memo, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\n\nconst Friends = () => {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n\n  useEffect(() => {\n    // const getPersonalMessage = async () => {\n    //   const response = await axiosInstance.post('/get-personal-messages-channels');\n    //   setUsersMessages(response.data);\n    // };\n    // getPersonalMessage();\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px 1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Навигация по разделу друзья */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(2, max-content)',\n            columnGap: '24px',\n            padding: '16px 24px',\n            borderBottom: `1px solid ${theme.palette.grey[400]}`,\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">Друзья</Typography>\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(5, max-content)',\n              columnGap: '8px',\n            }}\n          >\n            <Button\n              variant={pathname.includes('all-friends') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('all-friends')}\n            >\n              Все друзья\n            </Button>\n            <Button\n              variant={pathname.includes('friends-online') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-online')}\n            >\n              В сети\n            </Button>\n            <Button\n              variant={pathname.includes('friends-invites') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-invites')}\n            >\n              Заявки\n            </Button>\n            <Button\n              variant={pathname.includes('friends-approvals') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-approvals')}\n            >\n              Ожидание\n            </Button>\n            <Button\n              variant={pathname.includes('add-to-friends') ? 'contained' : 'outlined'}\n              color=\"success\"\n              onClick={() => navigate('add-to-friends')}\n            >\n              Добавить в друзья\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const FriendsMemoized = memo(Friends);\n","import { memo, useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from 'core/theme';\nimport { Navigation } from 'core/components/navigation';\nimport { UserControl } from 'core/components/user-control';\nimport { User } from 'core/components/user';\nimport { Button } from 'core/components/button';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { axiosInstance } from 'core/utils/axios-instance';\nimport { TextField } from 'core/components/text-field';\nimport { socket } from 'core/utils/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userChannelMessagesSelector, userUserSelector } from 'modules/user/store/selectors';\nimport { getChannelMessages } from 'core/services/get-channel-messages';\n\nconst Messages = () => {\n  const navigate = useNavigate();\n\n  const user = useSelector(userUserSelector);\n  const dispatch = useDispatch();\n\n  const channelMessages = useSelector(userChannelMessagesSelector);\n\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n  const [message, setMessage] = useState('');\n  const [channel, setChannel] = useState<string>('');\n\n  // Добавляет сообщение в канал\n  const handleSendMessage = () => {\n    if (channel && message) {\n      // dispatch(addMessageToChannel({ channel, message }));\n\n      // ON-MESSAGE - событие отправки сообщения в канал\n      socket.emit('on-message', channel, message, user?.id);\n\n      setMessage('');\n    }\n  };\n\n  useEffect(() => {\n    const getPersonalMessage = async () => {\n      const response = await axiosInstance.post('/get-personal-messages-channels');\n\n      setUsersMessages(response.data);\n    };\n\n    // getPersonalMessage();\n\n    // ON-CHANNEL-JOIN - событие подключения пользователей к комнате\n    socket.on('on-channel-join', (message: string, channel: string) => {\n      console.log('Сообщение в канале:', message);\n      setChannel(channel);\n\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n\n    if (channel) {\n      dispatch(getChannelMessages({ channel }));\n    }\n\n    socket.on('on-message', (channel: string) => {\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends/all-friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Сообщения */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateRows: '1fr max-content',\n            rowGap: '16px',\n            margin: '24px 16px',\n            backgroundColor: theme.palette.common.white,\n            borderRadius: '8px',\n            padding: '16px',\n            overflow: 'hidden',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              overflow: 'hidden',\n              gridTemplateRows: 'max-content 1fr',\n              rowGap: '16px',\n            }}\n          >\n            <Typography>Сообщения:</Typography>\n            <Box sx={{ display: 'grid', overflow: 'scroll', rowGap: '8px', alignContent: 'start', height: '100%' }}>\n              {channelMessages?.map((message) => {\n                return (\n                  <Box\n                    key={message._id}\n                    sx={{\n                      padding: '8px',\n                      border: '1px solid #000000',\n                      display: 'grid',\n                      borderRadius: '8px',\n                    }}\n                  >\n                    <User\n                      id={message._id}\n                      name={message.author.name}\n                      status={message.author.status}\n                      email={message.author.email}\n                    />\n                    <Typography>{message.text}</Typography>\n                  </Box>\n                );\n              })}\n            </Box>\n          </Box>\n          <Box sx={{ display: 'grid', gridTemplateColumns: '1fr max-content', columnGap: '16px' }}>\n            <TextField\n              type=\"text\"\n              id=\"message\"\n              name=\"message\"\n              label=\"Сообщение\"\n              value={message}\n              onChange={(event) => setMessage(event.target.value)}\n              placeholder=\"Введите текст сообщения\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n              Отправить сообщение\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const MessagesMemoized = memo(Messages);\n","import { css } from '@emotion/css';\nimport { Box, Link, Typography } from '@mui/material';\nimport { theme } from 'core/theme';\nimport { memo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst UserSettings = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <Box sx={{ padding: '60px 8px', backgroundColor: '#43454a' }}>\n      <Typography\n        className={css`\n          padding: 6px 10px !important;\n          font-weight: 700 !important;\n          font-size: 12px !important;\n          line-height: 16px !important;\n          color: #a0a2a6;\n          text-transform: uppercase;\n        `}\n      >\n        Настройки пользователя\n      </Typography>\n      <ul\n        className={css`\n          display: grid;\n          margin: 0;\n          padding: 0;\n          list-style: none;\n          row-gap: 2px;\n        `}\n      >\n        <li\n          className={css`\n            padding: 6px 10px !important;\n            font-weight: 500 !important;\n            font-size: 16px !important;\n            line-height: 20px !important;\n            background-color: ${location.pathname.includes('user-account') ? `#60656c` : 'none'};\n            border-radius: 4px;\n            cursor: pointer;\n\n            &:hover,\n            &:focus {\n              background-color: ${location.pathname.includes('user-account') ? '#565a61' : '#87888d'};\n            }\n          `}\n        >\n          <Link underline=\"none\" onClick={() => navigate('user-account')}>\n            <Typography\n              className={css`\n                color: ${location.pathname.includes('user-account') ? '#ffffff' : '#a0a2a6'};\n\n                &:hover,\n                &:focus {\n                  color: #dfe0e1;\n                }\n              `}\n            >\n              Моя учётная запись\n            </Typography>\n          </Link>\n        </li>\n        <li\n          className={css`\n            padding: 6px 10px !important;\n            font-weight: 500 !important;\n            font-size: 16px !important;\n            line-height: 20px !important;\n            background-color: ${location.pathname.includes('user-profile') ? `#60656c` : 'none'};\n            border-radius: 4px;\n            cursor: pointer;\n\n            &:hover,\n            &:focus {\n              background-color: ${location.pathname.includes('user-profile') ? '#565a61' : '#87888d'};\n            }\n          `}\n        >\n          <Link underline=\"none\" onClick={() => navigate('user-profile')}>\n            <Typography\n              className={css`\n                color: ${location.pathname.includes('user-profile') ? '#ffffff' : '#a0a2a6'};\n\n                &:hover,\n                &:focus {\n                  color: #dfe0e1;\n                }\n              `}\n            >\n              Профиль пользователя\n            </Typography>\n          </Link>\n        </li>\n      </ul>\n    </Box>\n  );\n};\n\nexport const UserSettingsMemoized = memo(UserSettings);\n","import { memo, useEffect } from 'react';\nimport { Box } from '@mui/material';\nimport { theme } from 'core/theme';\nimport { UserSettings } from 'modules/profile/pages/profile/components/user-settings';\nimport { Outlet, useNavigate } from 'react-router-dom';\n\nconst Profile = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // NOTE: Переадресация на страницу учетной записи\n    navigate('user-account');\n  }, []);\n\n  return (\n    <Box sx={{ display: 'grid', width: '100%', height: '100%', backgroundColor: theme.palette.grey[500] }}>\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: '224px 740px',\n          height: '100%',\n          justifyContent: 'center',\n          backgroundImage: 'linear-gradient(to right, #43454a 50%, #5e6065 50%)',\n        }}\n      >\n        <UserSettings />\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const ProfileMemoized = memo(Profile);\n","import { memo } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Navigation } from '../../components/navigation';\nimport { UserControl } from '../../components/user-control';\n\nconst ChannelsLayout = () => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Каналы</Typography>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box sx={{ padding: '0 8px', margin: '28px 0', overflow: 'scroll' }}>\n          <Box sx={{ display: 'grid', rowGap: '12px' }}>\n            {Array.from(Array(25).keys()).map((value) => {\n              return <Box key={value} />;\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок текстовых сообщений или видеочата */}\n      <Box sx={{ backgroundColor: theme.palette.grey[600] }}></Box>\n    </Box>\n  );\n};\n\nexport const ChannelsLayoutMemoized = memo(ChannelsLayout);\n","import { memo } from 'react';\nimport { ChannelsLayout } from '../../../../core/layouts/channels-layout';\n\nconst Channels = () => {\n  return <ChannelsLayout />;\n};\n\nexport const ChannelsMemoized = memo(Channels);\n","import { Avatar, Badge, Box, colors, Menu, MenuItem, Typography } from '@mui/material';\nimport { memo, useState } from 'react';\nimport { Chat, Call, MoreVert } from '@mui/icons-material';\nimport { theme } from '../../theme';\nimport { socket } from '../../utils/socket';\nimport { axiosInstance } from '../../utils/axios-instance';\n\nconst UserFriends = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLDivElement | null>(null);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 24px)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Box sx={{ cursor: 'pointer' }}>\n          <Chat />\n        </Box>\n        <Box sx={{ cursor: 'pointer' }}>\n          <Call />\n        </Box>\n        <Box sx={{ cursor: 'pointer' }} onClick={(event) => setAnchorEl(event.currentTarget)}>\n          <MoreVert />\n        </Box>\n      </Box>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuItem onClick={() => setAnchorEl(null)}>Написать</MenuItem>\n        <MenuItem onClick={() => setAnchorEl(null)}>Позвонить</MenuItem>\n        <MenuItem\n          onClick={async () => {\n            setAnchorEl(null);\n\n            const response = await axiosInstance.post('/remove-from-friends', { friendId: id });\n\n            socket.emit('on-remove-from-friends', id); // Отправка события пользователю, которого удаляют из друзей\n\n            return response.data;\n          }}\n        >\n          Удалить из друзей\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport const UserFriendsMemoized = memo(UserFriends);\n","import { useSelector } from 'react-redux';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userFriendsSelector } from '../../../modules/user/store/selectors';\nimport { UserFriends } from '../user-friends';\n\nconst AllFriends = () => {\n  const friends = useSelector(userFriendsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      <Box sx={{ padding: '8px 12px' }}>\n        <Typography variant=\"h6\">Все друзья: {friends.length > 0 ? friends.length : 0}</Typography>\n      </Box>\n      <Box sx={{ display: 'grid', alignContent: 'start', rowGap: '8px' }}>\n        {friends.map((friend) => {\n          return <UserFriends key={friend._id} id={friend._id} name={friend.name} status={friend.status} />;\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AllFriendsMemoized = memo(AllFriends);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userFriendsSelector } from '../../../modules/user/store/selectors';\nimport { UserFriends } from '../user-friends';\n\nconst FriendsOnline = () => {\n  const friends = useSelector(userFriendsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {friends.map((friend) => {\n        return friend.status === 'online' ? (\n          <UserFriends key={friend._id} id={friend._id} name={friend.name} status={friend.status} />\n        ) : null;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsOnlineMemoized = memo(FriendsOnline);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddToFriends = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/add-to-friends', { friendId: id });\n\n            socket.emit('on-add-to-friends', id); // Отправка события пользователю который ждет принятие приглашения\n\n            return response.data;\n          }}\n        >\n          Добавить\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/remove-invite-to-friends', { friendId: id });\n\n            socket.emit('on-remove-invite-to-friends', id); // Отправка события пользователю который ждет принятия или отклонения приглашения\n\n            return response.data;\n          }}\n        >\n          Отклонить\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddToFriendsMemoized = memo(UserAddToFriends);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userInvitesSelector } from '../../../modules/user/store/selectors';\nimport { UserAddToFriends } from '../user-add-to-friends';\n\nconst FriendsInvites = () => {\n  const invites = useSelector(userInvitesSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {invites.map((invite) => {\n        return <UserAddToFriends key={invite._id} id={invite._id} name={invite.name} status={invite.status} />;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsInvitesMemoized = memo(FriendsInvites);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserApprovals = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Typography variant=\"body1\">Ожидает добавления в друзья</Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/remove-invite-to-friends', { friendId: id });\n\n            socket.emit('on-remove-invite-to-friends', id); // Отправка события пользователю который ждет принятия или отклонения приглашения\n\n            return response.data;\n          }}\n        >\n          Отклонить\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserApprovalsMemoized = memo(UserApprovals);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userApprovalsSelector } from '../../../modules/user/store/selectors';\nimport { UserApprovals } from '../user-approvals';\n\nconst FriendsApprovals = () => {\n  const approvals = useSelector(userApprovalsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {approvals.map((approval) => {\n        return <UserApprovals key={approval._id} id={approval._id} name={approval.name} status={approval.status} />;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsApprovalsMemoized = memo(FriendsApprovals);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { Dispatch, memo, SetStateAction } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddInviteToFriends = ({\n  id,\n  name,\n  status,\n  setSearchValue,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  setSearchValue: Dispatch<SetStateAction<string>>;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(1, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            setSearchValue('');\n\n            const response = await axiosInstance.post('/add-invite-to-friends', { friendId: id });\n\n            socket.emit('on-add-invite-to-friends', id);\n\n            return response.data;\n          }}\n        >\n          Добавить в друзья\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddInviteToFriendsMemoized = memo(UserAddInviteToFriends);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo, useState, useEffect } from 'react';\nimport { userUsersSelector } from '../../../modules/user/store/selectors';\nimport { TextField } from '../text-field';\nimport { postUsersAction } from '../../../modules/user/store/actions';\nimport { UserAddInviteToFriends } from '../user-add-invite-to-friends';\n\nconst AddToFriends = () => {\n  const dispatch = useDispatch();\n\n  const users = useSelector(userUsersSelector);\n\n  const [searchValue, setSearchValue] = useState('');\n\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(postUsersAction({ searchValue }));\n    }\n  }, [searchValue]);\n\n  return (\n    <Box sx={{ padding: '0 8px 0 16px', margin: '16px 8px 16px 0' }}>\n      <TextField\n        fullWidth\n        size=\"small\"\n        placeholder=\"Поиск по друзьям\"\n        value={searchValue}\n        onChange={(event) => setSearchValue(event.target.value)}\n      />\n      <Box\n        sx={{\n          padding: '0 8px 0 16px',\n          margin: '16px 8px 16px 0',\n          display: 'grid',\n          alignContent: 'start',\n          rowGap: '8px',\n          overflowY: 'scroll',\n          '&::-webkit-scrollbar': {\n            width: '4px',\n          },\n          '&::-webkit-scrollbar-track': {\n            backgroundColor: 'none',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.grey[300],\n            border: `1px solid ${theme.palette.grey[500]}`,\n            borderRadius: '8px',\n          },\n        }}\n      >\n        {users?.map((user) => {\n          return (\n            <UserAddInviteToFriends\n              key={user.id}\n              id={user.id}\n              name={user.name}\n              status={user.status}\n              setSearchValue={setSearchValue}\n            />\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AddToFriendsMemoized = memo(AddToFriends);\n","import { css } from '@emotion/css';\nimport { AddPhotoAlternateOutlined, CancelOutlined, Check, Colorize, Edit } from '@mui/icons-material';\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Link, Slide, Snackbar, Typography } from '@mui/material';\nimport { Button } from 'core/components/button';\nimport { TextField } from 'core/components/text-field';\nimport { theme } from 'core/theme';\nimport { socket } from 'core/utils/socket';\nimport { useTimer } from 'modules/profile/hooks';\nimport { patchUserAction, postLogoutAction } from 'modules/user/store/actions';\nimport { userUserSelector } from 'modules/user/store/selectors';\nimport { ChangeEvent, memo, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst UserProfile = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const user = useSelector(userUserSelector);\n\n  const [email, setEmail] = useState('');\n  const [color, setColor] = useState('');\n  const [image, setImage] = useState('');\n  const [isDefaultColor, setIsDefaultColor] = useState(true);\n\n  const [isFieldsChanged, setIsFieldsChanged] = useState(false);\n\n  const { minutes, seconds } = useTimer();\n\n  const imageInput = useRef<HTMLInputElement | null>(null);\n\n  // NOTE: Кнопка для выхода из аккаунта\n  //   <Button\n  //   variant=\"contained\"\n  //   color=\"primary\"\n  //   onClick={() => {\n  //     dispatch(postLogoutAction());\n\n  //     socket.emit('on-disconnect', user?.id);\n  //   }}\n  // >\n  //   Выйти из аккаунта\n  // </Button>\n\n  const handleImageChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const image = event.target.files ? event.target.files[0] : null;\n    const fileReader = new FileReader();\n\n    if (image) {\n      fileReader.readAsDataURL(image);\n      fileReader.onload = () => {\n        const IMAGE_MAX_SIZE = 5 * 1024 * 1024;\n\n        if (image.size > IMAGE_MAX_SIZE) {\n          toast.error('Изображение должно быть не более 5MB.');\n        }\n\n        setImage(String(fileReader.result));\n      };\n    }\n\n    setImage(event.target.value);\n  };\n\n  useEffect(() => {\n    const handleEscapeKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        navigate('friends');\n      }\n    };\n\n    document.addEventListener('keydown', handleEscapeKeyDown);\n\n    return () => document.removeEventListener('keydown', handleEscapeKeyDown);\n  }, []);\n\n  useEffect(() => {\n    if (color !== '' || image !== '') {\n      setIsFieldsChanged(true);\n    } else {\n      setIsFieldsChanged(false);\n    }\n  }, [color, image]);\n\n  return (\n    <Box\n      sx={{\n        position: 'relative',\n        display: 'grid',\n        padding: '60px 40px 80px 40px',\n        alignContent: 'start',\n        backgroundColor: '#5e6065',\n      }}\n    >\n      {/* NOTE: Input для загрузки изображения */}\n      <TextField\n        sx={{ display: 'none' }}\n        type=\"file\"\n        id=\"image\"\n        name=\"image\"\n        label=\"Изображение профиля\"\n        inputProps={{ ref: (input: any) => (imageInput.current = input) }}\n        onChange={handleImageChange}\n        placeholder=\"Выберите изображение профиля\"\n        autoComplete=\"off\"\n        fullWidth\n        focused\n      />\n      {/* NOTE: Сохранение изменений профиля пользователя */}\n      <Snackbar\n        key={Slide.name}\n        message=\"Аккуратнее, вы не сохранили изменения!\"\n        TransitionComponent={Slide}\n        open={isFieldsChanged}\n        sx={{\n          '&': {\n            position: 'absolute',\n            left: '40px',\n            transform: 'none',\n            width: '100%',\n\n            '.MuiSnackbarContent-root': {\n              width: '100%',\n            },\n          },\n        }}\n        onClose={(event, reason) => {\n          if (reason === 'clickaway') {\n            return;\n          }\n\n          setIsFieldsChanged(false);\n        }}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        action={\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateColumns: 'max-content max-content',\n              columnGap: '16px',\n              alignItems: 'center',\n            }}\n          >\n            <Link\n              sx={{ cursor: 'pointer' }}\n              underline=\"hover\"\n              onClick={() => {\n                setColor('');\n                setImage('');\n              }}\n            >\n              <Typography>Сброс</Typography>\n            </Link>\n            <LoadingButton\n              variant=\"contained\"\n              color=\"success\"\n              onClick={() => {\n                dispatch(\n                  patchUserAction({\n                    color: color ? color : undefined,\n                    image: image ? image : undefined,\n                  })\n                );\n                setColor('');\n                setImage('');\n              }}\n            >\n              Сохранить изменения\n            </LoadingButton>\n          </Box>\n        }\n      />\n      <Typography\n        className={css`\n          padding-bottom: 20px !important;\n          font-weight: 600 !important;\n          font-size: 20px !important;\n          line-height: 24px !important;\n          color: #ffffff !important;\n          border-bottom: 1px solid #000000;\n        `}\n      >\n        Профиль пользователя\n      </Typography>\n      <Box\n        sx={{\n          display: 'grid',\n          rowGap: '8px',\n          position: 'absolute',\n          top: '60px',\n          right: '-40px',\n          textAlign: 'center',\n          cursor: 'pointer',\n\n          '&:hover svg, &:focus svg': {\n            fill: '#ffffff',\n          },\n        }}\n        onClick={() => navigate('/friends')}\n      >\n        <CancelOutlined sx={{ width: '36px', height: '36px', fill: '#b9bbbe' }} />\n        <Typography sx={{ fontSize: '13px', color: '#b9bbbe' }}>ESC</Typography>\n      </Box>\n      {/* NOTE: Аватар, цвет профиля и обо мне */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: '340px 300px',\n          columnGap: '20px',\n          justifyContent: 'space-between',\n        }}\n      >\n        {/* NOTE: Аватар */}\n        <Box>\n          <Box sx={{ padding: '20px 0', borderBottom: '1px solid #000000' }}>\n            <Typography\n              className={css`\n                margin-bottom: 8px !important;\n                font-weight: 600 !important;\n                font-size: 12px !important;\n                line-height: 16px !important;\n                text-transform: uppercase !important;\n              `}\n            >\n              Аватар\n            </Typography>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                if (imageInput.current) {\n                  imageInput.current.click();\n                }\n              }}\n            >\n              Смена аватара\n            </Button>\n          </Box>\n          {/* NOTE: Цвет профиля */}\n          <Box sx={{ padding: '20px 0', borderBottom: '1px solid #000000' }}>\n            <Typography\n              className={css`\n                margin-bottom: 8px !important;\n                font-weight: 600 !important;\n                font-size: 12px !important;\n                line-height: 16px !important;\n                text-transform: uppercase !important;\n              `}\n            >\n              Цвет профиля\n            </Typography>\n            <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content max-content', columnGap: '16px' }}>\n              {/* NOTE: По умолчанию */}\n              <Box>\n                <Box\n                  sx={{\n                    display: 'grid',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: user?.default_color,\n                    width: '70px',\n                    height: '50px',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                  }}\n                  onClick={() => {\n                    setIsDefaultColor(true);\n                  }}\n                >\n                  {isDefaultColor && <Check sx={{ fill: '#ffffff' }} width={24} height={24} />}\n                </Box>\n                <Typography\n                  className={css`\n                    font-size: 12px !important;\n                    line-height: 16px !important;\n                  `}\n                >\n                  По умолчанию\n                </Typography>\n              </Box>\n              {/* NOTE: Пользовательские */}\n              <Box sx={{ position: 'relative' }}>\n                <Box\n                  sx={{\n                    position: 'relative',\n                    display: 'grid',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    backgroundColor: color,\n                    width: '70px',\n                    height: '50px',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    border: color ? '' : '1px solid #000000',\n                  }}\n                  onClick={() => {\n                    setColor('#000000');\n                    setIsDefaultColor(false);\n                  }}\n                >\n                  {!isDefaultColor && <Check sx={{ fill: '#ffffff' }} width={24} height={24} />}\n                  <input\n                    className={css`\n                      position: absolute;\n                      top: 0;\n                      left: 0;\n                      width: 100%;\n                      height: 100%;\n                      cursor: pointer;\n                      opacity: 0;\n                    `}\n                    type=\"color\"\n                    value={color}\n                    onChange={(event) => {\n                      setColor(event.target.value);\n                      setIsDefaultColor(false);\n                    }}\n                  />\n                </Box>\n                <Colorize sx={{ position: 'absolute', top: '0', right: '8px' }} width={14} height={14} />\n                <Typography\n                  className={css`\n                    font-size: 12px !important;\n                    line-height: 16px !important;\n                  `}\n                >\n                  Пользовательские\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n          {/* NOTE: Обо мне */}\n          <Box sx={{ padding: '20px 0' }}>\n            <Typography\n              className={css`\n                margin-bottom: 8px !important;\n                font-weight: 600 !important;\n                font-size: 12px !important;\n                line-height: 16px !important;\n                text-transform: uppercase !important;\n              `}\n            >\n              Обо мне\n            </Typography>\n            <Typography\n              className={css`\n                margin-bottom: 8px !important;\n                font-size: 14px !important;\n                line-height: 20px !important;\n              `}\n            >\n              Можно использовать разметку теста и ссылки.\n            </Typography>\n            {/* TODO: Максимальное число символов 190 и иконка открытия emoji. */}\n            <TextField multiline rows={4} fullWidth />\n          </Box>\n          {/* NOTE: Выйти из аккаунта */}\n          <Box>\n            <LoadingButton\n              disableRipple\n              disableElevation\n              variant=\"contained\"\n              onClick={() => dispatch(postLogoutAction())}\n            >\n              Выйти из аккаунта\n            </LoadingButton>\n          </Box>\n        </Box>\n        {/* NOTE: Предпросмотр */}\n        <Box>\n          <Box sx={{ padding: '20px 0 0 0' }}>\n            <Typography\n              className={css`\n                margin-bottom: 8px !important;\n                font-weight: 600 !important;\n                font-size: 12px !important;\n                line-height: 16px !important;\n                text-transform: uppercase !important;\n              `}\n            >\n              Предпросмотр\n            </Typography>\n          </Box>\n          {/* NOTE: Карточка */}\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateRows: '60px 1fr',\n              width: '300px',\n              maxHeight: '429px',\n              boxShadow: '0 8px 16px rgba(0,0,0,0.25)',\n              borderRadius: '8px',\n              overflow: 'hidden',\n            }}\n          >\n            {/* NOTE: Карточка профиля пользователя */}\n            <Box\n              sx={{\n                position: 'relative',\n                height: '60px',\n                backgroundColor: user?.default_color,\n              }}\n            >\n              {/* NOTE: Аватар пользователя */}\n              <Box\n                sx={{\n                  position: 'absolute',\n                  top: '16px',\n                  left: '16px',\n                  width: '92px',\n                  height: '92px',\n                  backgroundImage: image ? `url(${image})` : `url(${user?.image})`,\n                  background: user?.default_color,\n                  backgroundSize: 'cover',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: '50% 50%',\n                  border: `6px solid ${theme.palette.grey[900]}`,\n                  borderRadius: '50%',\n                  cursor: 'pointer',\n\n                  '&:hover, &:focus': {\n                    '&::before': {\n                      content: '\"\"',\n                      display: 'block',\n                      width: '100%',\n                      height: '100%',\n                      backdropFilter: 'brightness(0.75)',\n                      borderRadius: '50%',\n                      overflow: 'hidden',\n                    },\n                    '&::after': {\n                      content: '\"Изменить аватар\"',\n                      display: 'block',\n                      position: 'absolute',\n                      top: '50%',\n                      left: '50%',\n                      transform: 'translate(-50%, -50%)',\n                      textAlign: 'center',\n                      color: 'white',\n                      fontFamily: 'sans-serif',\n                      textTransform: 'uppercase',\n                      fontSize: '10px',\n                    },\n                  },\n                }}\n                onClick={() => {\n                  if (imageInput.current) {\n                    imageInput.current.click();\n                  }\n                }}\n              >\n                <Box\n                  sx={{\n                    width: '28px',\n                    height: '28px',\n                    backgroundColor: theme.palette.grey[300],\n                    position: 'absolute',\n                    top: '0',\n                    right: '0',\n                    borderRadius: '50%',\n                  }}\n                >\n                  <AddPhotoAlternateOutlined\n                    sx={{\n                      width: '18px',\n                      height: '18px',\n                      position: 'absolute',\n                      top: '50%',\n                      left: '50%',\n                      transform: 'translate(-50%, -50%)',\n                    }}\n                  />\n                </Box>\n              </Box>\n            </Box>\n            {/* Card user info */}\n            <Box\n              sx={{\n                padding: '48px 16px 16px 16px',\n                backgroundColor: theme.palette.grey['900'],\n              }}\n            >\n              {/* NOTE: Имя пользователя */}\n              <Typography\n                className={css`\n                  padding: 16px 0;\n                  color: #ffffff;\n                `}\n              >\n                {user?.name}\n                {/* NOTE: Тег пользователя */}\n                <Typography\n                  className={css`\n                    font-size: 20px;\n                    line-height: 24px;\n                    color: #b9bbbe;\n                    text-transform: uppercase;\n                  `}\n                  component=\"span\"\n                >\n                  #{user?.id.slice(-4)}\n                </Typography>\n              </Typography>\n              {/* NOTE: Обо мне */}\n              <Typography\n                className={css`\n                  margin-bottom: 8px !important;\n                  padding: 20px 0 0 0 !important;\n                  font-weight: 600 !important;\n                  font-size: 12px !important;\n                  line-height: 16px !important;\n                  color: #b9bbbe;\n                  text-transform: uppercase !important;\n                  border-top: 1px solid ${theme.palette.grey[800]};\n                `}\n                variant=\"subtitle1\"\n              >\n                Обо мне\n              </Typography>\n              <Typography sx={{ maxHeight: '108px', paddingBottom: '20px' }} color=\"lightgray\">\n                Информация о пользователе.\n              </Typography>\n              {/* NOTE: Настройка профиля */}\n              <Typography\n                className={css`\n                  margin-bottom: 8px !important;\n                  padding: 20px 0 0 0 !important;\n                  font-weight: 600 !important;\n                  font-size: 12px !important;\n                  line-height: 16px !important;\n                  color: #b9bbbe;\n                  text-transform: uppercase !important;\n                  border-top: 1px solid ${theme.palette.grey[800]};\n                `}\n                variant=\"subtitle1\"\n              >\n                Настройка профиля\n              </Typography>\n              <Box sx={{ display: 'grid', gridTemplateColumns: '64px 1fr', columnGap: '16px', alignItems: 'center' }}>\n                {/* Edit icon */}\n                <Box\n                  sx={{\n                    width: '64px',\n                    height: '64px',\n                    backgroundColor: theme.palette.primary.light,\n                    borderRadius: '8px',\n                    display: 'grid',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                  }}\n                >\n                  <Edit sx={{ fill: '#ffffff' }} width={24} height={24} />\n                </Box>\n                {/* Edit info */}\n                <Box>\n                  <Typography variant=\"subtitle1\" color=\"lightgray\">\n                    Профиль пользователя\n                  </Typography>\n                  <Typography color=\"lightgray\">\n                    Прошло {minutes}:{seconds}\n                  </Typography>\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n\n      {/* NOTE: Email пользователя */}\n      <Box sx={{ display: 'none' }}>\n        <Typography variant=\"h5\">Ваш email: {user?.email}</Typography>\n        <TextField\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          label=\"Адрес электронной почты\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          placeholder=\"Введите ваш email\"\n          autoComplete=\"off\"\n          fullWidth\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserProfileMemoized = memo(UserProfile);\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that return timer values.\n */\nexport const useTimer = () => {\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer((prevValue) => prevValue + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const minutes = Math.floor(timer / 60)\n    .toString()\n    .padStart(2, '0');\n\n  const seconds = Number(timer - Math.floor(timer / 60) * 60)\n    .toString()\n    .padStart(2, '0');\n\n  return { minutes, seconds };\n};\n","import { Close } from '@mui/icons-material';\nimport { Box, Link, Modal, Typography } from '@mui/material';\nimport { Button } from 'core/components/button';\nimport { TextField } from 'core/components/text-field';\nimport { patchUserAction } from 'modules/user/store/actions';\nimport { userUserSelector } from 'modules/user/store/selectors';\nimport { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ModalChangeUserName = ({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) => {\n  const dispatch = useDispatch();\n\n  const user = useSelector(userUserSelector);\n\n  const [name, setName] = useState(user?.name);\n  const [password, setPassword] = useState('');\n\n  return (\n    <Modal open={isOpen} onBackdropClick={onClose} disableEnforceFocus>\n      <Box\n        sx={{\n          width: '440px',\n          backgroundColor: '#4a4c52',\n          position: 'fixed',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          borderRadius: '5px',\n          overflow: 'hidden',\n        }}\n      >\n        <Box sx={{ position: 'relative', display: 'grid', rowGap: '8px', padding: '24px 16px' }}>\n          <Typography sx={{ fontSize: '24px', color: '#ffffff', textAlign: 'center' }}>\n            Изменить имя пользователя\n          </Typography>\n          <Typography sx={{ fontSize: '16px', color: '#c0c1c4', textAlign: 'center' }}>\n            Введите новое имя пользователя и текущий пароль.\n          </Typography>\n          <Box\n            sx={{\n              position: 'absolute',\n              top: '16px',\n              right: '16px',\n              cursor: 'pointer',\n\n              '& svg': {\n                fill: '#c0c1c4',\n              },\n              '& svg:hover, & svg:focus': {\n                fill: '#ffffff',\n              },\n            }}\n            onClick={onClose}\n          >\n            <Close sx={{}} />\n          </Box>\n        </Box>\n        <Box sx={{ display: 'grid', rowGap: '16px', padding: '0 16px 24px 16px' }}>\n          <Box sx={{ display: 'grid', rowGap: '8px' }}>\n            <Typography sx={{ fontSize: '14px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n              Имя пользователя\n            </Typography>\n            <TextField\n              sx={{\n                backgroundColor: '#36383a',\n\n                '.MuiOutlinedInput-input': {\n                  color: '#dfe0e1',\n                },\n\n                // NOTE: Удаляет светлую тень в браузерных стилях\n                'input:-webkit-autofill': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n                'input:-webkit-autofill:hover': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n                'input:-webkit-autofill:focus': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n                'input:-webkit-autofill:active': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n              }}\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={name}\n              onChange={(event) => setName(event.target.value)}\n              autoComplete=\"off\"\n              fullWidth\n            />\n          </Box>\n          <Box sx={{ display: 'grid', rowGap: '8px' }}>\n            <Typography sx={{ fontSize: '14px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n              Текущий пароль\n            </Typography>\n            <TextField\n              sx={{\n                backgroundColor: '#36383a',\n\n                '.MuiOutlinedInput-input': {\n                  color: '#dfe0e1',\n                },\n\n                // NOTE: Удаляет светлую тень в браузерных стилях\n                'input:-webkit-autofill': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n                'input:-webkit-autofill:hover': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n                'input:-webkit-autofill:focus': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n                'input:-webkit-autofill:active': {\n                  boxShadow: '0 0 0 30px #36383a inset',\n                },\n              }}\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={(event) => setPassword(event.target.value)}\n              autoComplete=\"off\"\n              fullWidth\n            />\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'grid',\n            justifyContent: 'end',\n            gridTemplateColumns: 'repeat(2, max-content)',\n            columnGap: '8px',\n            padding: '16px',\n            backgroundColor: '#43454a',\n          }}\n        >\n          <Link\n            sx={{ display: 'grid', alignItems: 'center', color: '#ffffff', cursor: 'pointer', padding: '2px 16px' }}\n            underline=\"hover\"\n            onClick={() => {\n              setName(user?.name);\n              setPassword('');\n\n              onClose();\n            }}\n          >\n            <Typography sx={{ fontSize: '14px' }}>Отмена</Typography>\n          </Link>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              dispatch(\n                patchUserAction({\n                  name,\n                  password,\n                })\n              );\n\n              onClose();\n            }}\n          >\n            Готово\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n\nexport const ModalChangeUserNameMemoized = memo(ModalChangeUserName);\n","import { css } from '@emotion/css';\nimport { CancelOutlined } from '@mui/icons-material';\nimport { Box, Typography, Link } from '@mui/material';\nimport { Button } from 'core/components/button';\nimport { theme } from 'core/theme';\nimport { userUserSelector } from 'modules/user/store/selectors';\nimport { memo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { ModalChangeUserNameMemoized } from '../../modals/modal-change-user-name';\n\nconst UserAccount = () => {\n  const navigate = useNavigate();\n\n  const user = useSelector(userUserSelector);\n\n  const [isEmailShow, setIsEmailShow] = useState(false);\n\n  const [isModalChangeUserName, setIsModalChangeUserName] = useState(false);\n\n  const getHiddenUserEmail = (email: string) => {\n    const firstPartEndIndex = email.search('@');\n    const hiddenValues = Array(firstPartEndIndex).fill('*').join('');\n\n    return hiddenValues + email.slice(firstPartEndIndex);\n  };\n\n  return (\n    <Box\n      sx={{\n        position: 'relative',\n        display: 'grid',\n        padding: '60px 40px 80px 40px',\n        alignContent: 'start',\n        backgroundColor: '#5e6065',\n      }}\n    >\n      <ModalChangeUserNameMemoized\n        isOpen={isModalChangeUserName}\n        onClose={() => {\n          setIsModalChangeUserName(false);\n        }}\n      />\n      <Typography\n        className={css`\n          padding-bottom: 20px !important;\n          font-weight: 600 !important;\n          font-size: 20px !important;\n          line-height: 24px !important;\n          color: #ffffff !important;\n        `}\n      >\n        Моя учетная запись\n      </Typography>\n      <Box\n        sx={{\n          display: 'grid',\n          rowGap: '8px',\n          position: 'absolute',\n          top: '60px',\n          right: '-40px',\n          textAlign: 'center',\n          cursor: 'pointer',\n\n          '&:hover svg, &:focus svg': {\n            fill: '#ffffff',\n          },\n        }}\n        onClick={() => navigate('friends')}\n      >\n        <CancelOutlined sx={{ width: '36px', height: '36px', fill: '#b9bbbe' }} />\n        <Typography sx={{ fontSize: '13px', color: '#b9bbbe' }}>ESC</Typography>\n      </Box>\n      {/* NOTE: Содержимое страницы */}\n      <Box sx={{ display: 'grid' }}>\n        {/* NOTE: Предупреждение для подтверждения почты */}\n        <Box\n          sx={{\n            backgroundColor: '#36383a',\n            border: '1px solid#1c1e21',\n            borderRadius: '4px',\n            padding: '20px',\n          }}\n        >\n          <Box>{/* NOTE: Иконка предупреждения */}</Box>\n          <Box\n            sx={{\n              display: 'grid',\n              rowGap: '8px',\n              justifyItems: 'start',\n            }}\n          >\n            <Typography sx={{ fontSize: '12px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n              Неподтвержденный адрес эл.почты\n            </Typography>\n            <Typography sx={{ fontSize: '14px', color: '#dfe0e1' }}>\n              Пожалуйста, проверьте свою электронную почту и следуйте инструкциям, чтобы подтвердить свой адресс\n              электронной почты. Если вы не получили письмо или у него истек срок действия, вы можете попросить\n              отправить новое.\n            </Typography>\n            <Button\n              sx={{\n                textTransform: 'none',\n                backgroundColor: '#686d73',\n\n                '&:hover, &:focus': {\n                  backgroundColor: '#84888d',\n                },\n\n                '&:active': {\n                  backgroundColor: '#6b6e74',\n                },\n              }}\n              variant=\"contained\"\n            >\n              Отправить письмо с подтверждением еще раз\n            </Button>\n          </Box>\n        </Box>\n        {/* NOTE: Профиль пользователя */}\n        <Box sx={{ margin: '20px 0', backgroundColor: '#36383a', borderRadius: '4px', overflow: 'hidden' }}>\n          <Box sx={{ position: 'relative', backgroundColor: user?.default_color, height: '100px' }}>\n            {/* NOTE: Аватар пользователя */}\n            <Box\n              sx={{\n                position: 'absolute',\n                top: '76px',\n                left: '16px',\n                width: '94px',\n                height: '94px',\n                backgroundImage: user?.image ? `url(${user?.image})` : 'none',\n                backgroundColor: user?.default_color ? user.default_color : 'none',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: '50% 50%',\n                border: `6px solid #36383a`,\n                borderRadius: '50%',\n                cursor: 'pointer',\n              }}\n            >\n              <Box\n                sx={{\n                  width: '24px',\n                  height: '24px',\n                  backgroundColor: user?.status === 'online' ? '#4caf50' : '#ef5350',\n                  position: 'absolute',\n                  bottom: 0,\n                  right: 0,\n                  borderRadius: '50%',\n                  border: '4px solid #36383a',\n                }}\n              />\n            </Box>\n          </Box>\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateColumns: 'max-content max-content',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: '16px 16px 16px 120px',\n            }}\n          >\n            <Typography sx={{ fontSize: '20px', color: '#ffffff' }}>\n              {user?.name}\n              <Typography component=\"span\" sx={{ fontSize: '20px', color: '#c0c1c4' }}>\n                #{user?.id.slice(-4)}\n              </Typography>\n            </Typography>\n            <Button sx={{ textTransform: 'none' }} variant=\"contained\">\n              Настр. профиль пользователя\n            </Button>\n          </Box>\n          <Box\n            sx={{\n              display: 'grid',\n              margin: '16px',\n              padding: '16px',\n              backgroundColor: '#43454a',\n              borderRadius: '4px',\n            }}\n          >\n            {/* NOTE: Имя пользователя */}\n            <Box\n              sx={{\n                display: 'grid',\n                gridTemplateColumns: 'max-content max-content',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                padding: '8px 0',\n              }}\n            >\n              <Box>\n                <Typography sx={{ fontSize: '12px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n                  Имя пользователя\n                </Typography>\n                <Typography sx={{ fontSize: '16px', color: '#ffffff' }}>\n                  {user?.name}\n                  <Typography component=\"span\" sx={{ fontSize: '16px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n                    #{user?.id.slice(-4)}\n                  </Typography>\n                </Typography>\n              </Box>\n              <Button\n                sx={{\n                  textTransform: 'none',\n                  backgroundColor: '#686d73',\n\n                  '&:hover, &:focus': {\n                    backgroundColor: '#84888d',\n                  },\n\n                  '&:active': {\n                    backgroundColor: '#6b6e74',\n                  },\n                }}\n                variant=\"contained\"\n                onClick={() => {\n                  setIsModalChangeUserName(true);\n                }}\n              >\n                Изменить\n              </Button>\n            </Box>\n            {/* NOTE: Электронная почта */}\n            <Box\n              sx={{\n                display: 'grid',\n                gridTemplateColumns: 'max-content max-content',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                padding: '8px 0',\n              }}\n            >\n              <Box>\n                <Typography sx={{ fontSize: '12px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n                  Электронная почта\n                </Typography>\n                <Typography\n                  sx={{\n                    display: 'grid',\n                    gridTemplateColumns: 'repeat(2, max-content)',\n                    columnGap: '8px',\n                    fontSize: '16px',\n                    color: '#ffffff',\n                  }}\n                >\n                  {isEmailShow ? user?.email : getHiddenUserEmail(user?.email as string)}\n                  <Link\n                    sx={{ cursor: 'pointer', color: '#19b7f5' }}\n                    underline=\"hover\"\n                    onClick={() => {\n                      setIsEmailShow(!isEmailShow);\n                    }}\n                  >\n                    <Typography>{isEmailShow ? 'Скрыть' : 'Показать'}</Typography>\n                  </Link>\n                </Typography>\n              </Box>\n              <Button\n                sx={{\n                  textTransform: 'none',\n                  backgroundColor: '#686d73',\n\n                  '&:hover, &:focus': {\n                    backgroundColor: '#84888d',\n                  },\n\n                  '&:active': {\n                    backgroundColor: '#6b6e74',\n                  },\n                }}\n                variant=\"contained\"\n              >\n                Изменить\n              </Button>\n            </Box>\n            {/* NOTE: Номер телефона */}\n            <Box\n              sx={{\n                display: 'grid',\n                gridTemplateColumns: 'max-content max-content',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                padding: '8px 0',\n              }}\n            >\n              <Box>\n                <Typography sx={{ fontSize: '12px', color: '#c0c1c4', textTransform: 'uppercase' }}>\n                  Номер телефона\n                </Typography>\n                <Typography sx={{ fontSize: '16px', color: '#ffffff' }}>\n                  {(user as any)?.phone ? '+79000000000' : 'Вы еще не указали номер телефона.'}\n                </Typography>\n              </Box>\n              <Button\n                sx={{\n                  textTransform: 'none',\n                  backgroundColor: '#686d73',\n\n                  '&:hover, &:focus': {\n                    backgroundColor: '#84888d',\n                  },\n\n                  '&:active': {\n                    backgroundColor: '#6b6e74',\n                  },\n                }}\n                variant=\"contained\"\n              >\n                Изменить\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAccountMemoized = memo(UserAccount);\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Friends } from 'modules/friends/pages/friends';\nimport { Messages } from 'core/components/messages';\nimport { Profile } from 'modules/profile/pages/profile';\nimport { Channels } from 'modules/channels/pages/channels';\nimport { AllFriends } from 'core/components/all-friends';\nimport { FriendsOnline } from 'core/components/friends-online';\nimport { FriendsInvites } from 'core/components/friends-invites';\nimport { FriendsApprovals } from 'core/components/friends-approvals';\nimport { AddToFriends } from 'core/components/add-to-friends';\nimport { UserProfile } from 'modules/profile/pages/profile/components/user-profile';\nimport { UserAccount } from 'modules/profile/pages/profile/components/user-account';\n\nconst PrivateRoutes = () => {\n  return (\n    <Routes>\n      {/* NOTE: Друзья */}\n      <Route path=\"friends\" element={<Friends />}>\n        <Route path=\"all-friends\" element={<AllFriends />} />\n        <Route path=\"friends-online\" element={<FriendsOnline />} />\n        <Route path=\"friends-invites\" element={<FriendsInvites />} />\n        <Route path=\"friends-approvals\" element={<FriendsApprovals />} />\n        <Route path=\"add-to-friends\" element={<AddToFriends />} />\n      </Route>\n      {/* NOTE: Сообщения */}\n      <Route path=\"messages\" element={<Messages />} />\n      {/* NOTE: Настройка профиля */}\n      <Route path=\"profile\" element={<Profile />}>\n        <Route path=\"user-account\" element={<UserAccount />} />\n        <Route path=\"user-profile\" element={<UserProfile />} />\n      </Route>\n      {/* NOTE: Каналы */}\n      <Route path=\"channels\" element={<Channels />} />\n      <Route path=\"*\" element={<Navigate to=\"friends/all-friends\" />} />\n    </Routes>\n  );\n};\n\nexport const PrivateRoutesMemoized = memo(PrivateRoutes);\n","import { memo } from 'react';\nimport { PrivateRoutes, PublicRoutes } from 'core/routes';\n\ntype AppProps = {\n  isAuthorizated: boolean;\n};\n\nconst App = ({ isAuthorizated }: AppProps) => {\n  return isAuthorizated ? <PrivateRoutes /> : <PublicRoutes />;\n};\n\nexport const AppMemoized = memo(App);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userIsAuthorizatedSelector, userUserSelector } from 'modules/user/store/selectors';\nimport { App } from 'core/components/app';\nimport { getRefreshAction, getUserAction } from 'modules/user/store/actions';\nimport { socket } from 'core/utils/socket';\n\nconst AppContainer = () => {\n  const dispatch = useDispatch();\n\n  const isAuthorizated = useSelector(userIsAuthorizatedSelector);\n  const user = useSelector(userUserSelector);\n\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      dispatch(getRefreshAction());\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isAuthorizated) {\n      dispatch(getUserAction());\n\n      socket.on('on-connect', () => {\n        dispatch(getUserAction());\n      });\n    }\n  }, [isAuthorizated]);\n\n  useEffect(() => {\n    if (user?.id) {\n      socket.emit('on-connect', user.id);\n    }\n  }, [user?.id]);\n\n  // useEffect(() => {\n  //   if (userId) {\n  //     socket.on('on-connect', () => {\n  //       dispatch(getUsers());\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-disconnect', () => {\n  //       dispatch(getUsers());\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-add-invite-to-friends', () => {\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-add-to-friends', () => {\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-remove-from-friends', () => {\n  //       dispatch(getFriendsAction());\n  //     });\n\n  //     socket.on('on-remove-invite-to-friends', () => {\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n  //   }\n  // }, [userId]);\n\n  // if (isLoading) {\n  //   return <Loader />;\n  // }\n\n  return <App isAuthorizated={isAuthorizated} />;\n};\n\nexport { AppContainer };\n","import { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material';\nimport { injectGlobal } from '@emotion/css';\nimport { store } from 'core/store';\nimport { AppContainer } from 'core/containers/app-container';\nimport { theme } from 'core/theme';\nimport { ToastContainer } from 'react-toastify';\nimport { injectStyle } from 'react-toastify/dist/inject-style';\n\nconst Root = () => {\n  injectGlobal`\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n\n    html {\n      box-sizing: border-box;\n    }\n\n    html,\n    body,\n    .root {\n      height: 100%;\n    }\n\n    body {\n      margin: 0;\n      background: radial-gradient(105.05% 99.28% at 50% 29.72%, #8c9eff 0%, #536dfe 42.9%, #536dfe 61.7%, #3d5afe 84.71%, #304ffe 100%);\n      background-repeat: no-repeat;\n    }\n\n    input:-webkit-autofill,\n    input:-webkit-autofill:hover,\n    input:-webkit-autofill:focus,\n    input:-webkit-autofill:active {\n      box-shadow: 0 0 0 30px #ffffff inset;\n    }\n  `;\n\n  injectStyle();\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <HashRouter>\n          <AppContainer />\n          <ToastContainer theme=\"light\" />\n        </HashRouter>\n      </ThemeProvider>\n    </Provider>\n  );\n};\n\nrender(<Root />, document.querySelector('.root'));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkvideo_calls\"] = globalThis[\"webpackChunkvideo_calls\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [248], () => (__webpack_require__(606)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","API_URL","ApiUrl","Authorization","Refresh","Registration","Logout","User","postAuthorizationService","params","axiosInstance","request","method","url","data","getRefreshService","withCredentials","postRegistrationService","postLogoutService","getUserService","patchUserService","postUsersService","baseURL","interceptors","use","config","headers","localStorage","getItem","response","error","originalRequest","status","setItem","accessToken","console","log","removeItem","addMessageToChannel","channel","message","post","getApprovals","get","getChannelMessages","getChannels","getInvites","getFriendsAction","userSlice","name","initialState","isAuthorizated","isLoading","user","users","friends","invites","approvals","isCall","isIncomingCall","isCallAccepted","isCallCanceled","channels","channelMessages","reducers","setAuthorization","state","payload","setIsLoading","setUser","setUsers","setIsCall","setIsIncomingCall","setIsCallAccepted","setIsCallCanceled","extraReducers","builder","addCase","fulfilled","actions","userReducer","reducer","postAuthorizationAction","getRefreshAction","postRegistrationAction","postLogoutAction","getUserAction","patchUserAction","postUsersAction","postAuthorizationSaga","getRefreshSaga","postRegistrationSaga","postLogoutSaga","getUserSaga","patchUserSaga","postUsersSaga","sagas","type","sagaMiddleware","store","middleware","run","map","saga","userIsAuthorizatedSelector","userIsLoadingSelector","userUserSelector","userUsersSelector","userFriendsSelector","userInvitesSelector","userApprovalsSelector","userChannelMessagesSelector","TextFieldMemoized","memo","props","theme","createTheme","palette","primary","light","main","dark","AuthorizationLayoutMemoized","children","Box","sx","display","alignItems","justifyContent","height","AuthorizationMemoized","dispatch","navigate","email","setEmail","useState","password","setPassword","isShowPassword","setIsShowPassword","width","gridTemplateColumns","borderRadius","border","grey","overflow","className","src","alt","padding","backgroundColor","common","white","rowGap","Typography","variant","id","label","value","onChange","event","target","placeholder","autoComplete","fullWidth","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","LoadingButton","color","size","loading","Link","cursor","underline","preventDefault","RegistrationMemoized","setName","TextField","PublicRoutesMemoized","path","element","to","ButtonMemoized","disableElevation","NavigationMemoized","alignContent","Tooltip","title","arrow","placement","Group","Dashboard","Divider","Settings","socket","io","transports","UserMemoized","channelId","columnGap","success","Badge","overlap","anchorOrigin","vertical","horizontal","Avatar","DeleteOutline","UserControlMemoized","isMic","setIsMic","isVideocam","setIsVideocam","default_color","image","slice","Mic","MicOff","Videocam","VideocamOff","FriendsMemoized","pathname","usersMessages","setUsersMessages","useEffect","gridTemplateRows","borderBottom","margin","overflowY","key","userData","_id","includes","MessagesMemoized","setMessage","setChannel","author","text","UserSettingsMemoized","location","ProfileMemoized","backgroundImage","ChannelsLayoutMemoized","Array","from","keys","ChannelsMemoized","UserFriendsMemoized","anchorEl","setAnchorEl","Chat","Call","currentTarget","MoreVert","Menu","open","Boolean","onClose","MenuListProps","MenuItem","friendId","AllFriendsMemoized","length","friend","FriendsOnlineMemoized","UserAddToFriendsMemoized","FriendsInvitesMemoized","invite","UserApprovalsMemoized","FriendsApprovalsMemoized","approval","UserAddInviteToFriendsMemoized","setSearchValue","AddToFriendsMemoized","searchValue","UserProfileMemoized","setColor","setImage","isDefaultColor","setIsDefaultColor","isFieldsChanged","setIsFieldsChanged","minutes","seconds","timer","setTimer","interval","setInterval","prevValue","clearInterval","Math","floor","toString","padStart","Number","useTimer","imageInput","useRef","handleEscapeKeyDown","document","addEventListener","removeEventListener","inputProps","ref","input","current","files","fileReader","FileReader","readAsDataURL","onload","String","result","focused","Snackbar","Slide","TransitionComponent","left","transform","reason","action","top","right","textAlign","fill","CancelOutlined","fontSize","click","Check","Colorize","multiline","rows","disableRipple","maxHeight","boxShadow","background","backgroundSize","backgroundRepeat","backgroundPosition","content","backdropFilter","fontFamily","textTransform","AddPhotoAlternateOutlined","component","paddingBottom","Edit","ModalChangeUserNameMemoized","isOpen","Modal","onBackdropClick","disableEnforceFocus","Close","UserAccountMemoized","isEmailShow","setIsEmailShow","isModalChangeUserName","setIsModalChangeUserName","justifyItems","bottom","firstPartEndIndex","search","join","getHiddenUserEmail","phone","PrivateRoutesMemoized","AppMemoized","AppContainer","Root","ThemeProvider","render","querySelector","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","j","Object","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","scriptUrl","importScripts","currentScript","scripts","getElementsByTagName","Error","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}