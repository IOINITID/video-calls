{"version":3,"file":"scripts/51.a641234c4fbda20afa7e.js","mappings":"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","sources":["webpack://video-calls/./src/core/components/messages/messages.tsx","webpack://video-calls/./src/core/components/navigation/navigation.tsx","webpack://video-calls/./node_modules/@mui/icons-material/esm/MicOff.js","webpack://video-calls/./node_modules/@mui/icons-material/esm/VideocamOff.js","webpack://video-calls/./src/core/components/user-control/user-control.tsx","webpack://video-calls/./node_modules/@mui/icons-material/esm/DeleteOutline.js","webpack://video-calls/./src/core/components/user/user.tsx"],"sourcesContent":["import { memo, useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Navigation } from '../../components/navigation';\nimport { UserControl } from '../../components/user-control';\nimport { User } from '../../components/user';\nimport { Button } from '../../components/button';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { TextField } from '../text-field';\nimport { socket } from '../../utils/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userChannelMessagesSelector, userIdSelector } from '../../../modules/user/store/selectors';\nimport { getChannelMessages } from '../../services/get-channel-messages';\n\nconst Messages = () => {\n  const navigate = useNavigate();\n\n  const userId = useSelector(userIdSelector);\n  const dispatch = useDispatch();\n\n  const channelMessages = useSelector(userChannelMessagesSelector);\n\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n  const [message, setMessage] = useState('');\n  const [channel, setChannel] = useState<string>('');\n\n  // Добавляет сообщение в канал\n  const handleSendMessage = () => {\n    if (channel && message) {\n      // dispatch(addMessageToChannel({ channel, message }));\n\n      // ON-MESSAGE - событие отправки сообщения в канал\n      socket.emit('on-message', channel, message, userId);\n\n      setMessage('');\n    }\n  };\n\n  useEffect(() => {\n    const getPersonalMessage = async () => {\n      const response = await axiosInstance.post('/get-personal-messages-channels');\n\n      setUsersMessages(response.data);\n    };\n\n    getPersonalMessage();\n\n    // ON-CHANNEL-JOIN - событие подключения пользователей к комнате\n    socket.on('on-channel-join', (message: string, channel: string) => {\n      console.log('Сообщение в канале:', message);\n      setChannel(channel);\n\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n\n    if (channel) {\n      dispatch(getChannelMessages({ channel }));\n    }\n\n    socket.on('on-message', (channel: string) => {\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log('channelMessages', channelMessages);\n  }, [channelMessages]);\n\n  useEffect(() => {\n    console.log('usersMessages', usersMessages);\n  }, [usersMessages]);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends/all-friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Сообщения */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateRows: '1fr max-content',\n            rowGap: '16px',\n            margin: '24px 16px',\n            backgroundColor: theme.palette.common.white,\n            borderRadius: '8px',\n            padding: '16px',\n            overflow: 'hidden',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              overflow: 'hidden',\n              gridTemplateRows: 'max-content 1fr',\n              rowGap: '16px',\n            }}\n          >\n            <Typography>Сообщения:</Typography>\n            <Box sx={{ display: 'grid', overflow: 'scroll', rowGap: '8px', alignContent: 'start', height: '100%' }}>\n              {channelMessages?.map((message) => {\n                return (\n                  <Box\n                    key={message._id}\n                    sx={{\n                      padding: '8px',\n                      border: '1px solid #000000',\n                      display: 'grid',\n                      borderRadius: '8px',\n                    }}\n                  >\n                    <User\n                      id={message._id}\n                      name={message.author.name}\n                      status={message.author.status}\n                      email={message.author.email}\n                    />\n                    <Typography>{message.text}</Typography>\n                  </Box>\n                );\n              })}\n            </Box>\n          </Box>\n          <Box sx={{ display: 'grid', gridTemplateColumns: '1fr max-content', columnGap: '16px' }}>\n            <TextField\n              type=\"text\"\n              id=\"message\"\n              name=\"message\"\n              label=\"Сообщение\"\n              value={message}\n              onChange={(event) => setMessage(event.target.value)}\n              placeholder=\"Введите текст сообщения\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n              Отправить сообщение\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const MessagesMemoized = memo(Messages);\n","import { memo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Group, Dashboard, Settings } from '@mui/icons-material';\nimport { Box, Divider, Tooltip } from '@mui/material';\nimport { theme } from '../../theme';\n\nconst Navigation = () => {\n  const navigate = useNavigate();\n\n  //  TODO: Добавить Drawer компонент\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        rowGap: '24px',\n        height: '100%',\n        alignContent: 'start',\n        padding: '25px 16px',\n        justifyContent: 'center',\n      }}\n    >\n      <Box sx={{ display: 'grid', rowGap: '16px' }}>\n        <Tooltip title=\"Друзья\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/friends')}\n          >\n            <Group />\n          </Box>\n        </Tooltip>\n        <Tooltip title=\"Каналы\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/channels')}\n          >\n            <Dashboard />\n          </Box>\n        </Tooltip>\n      </Box>\n      <Divider />\n      <Tooltip title=\"Профиль\" arrow placement=\"right\">\n        <Box\n          sx={{\n            display: 'grid',\n            padding: '8px',\n            backgroundColor: theme.palette.grey[400],\n            cursor: 'pointer',\n            borderRadius: '8px',\n            justifyContent: 'center',\n            width: '40px',\n          }}\n          onClick={() => navigate('/profile')}\n        >\n          <Settings />\n        </Box>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport const NavigationMemoized = memo(Navigation);\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 11h-1.7c0 .74-.16 1.43-.43 2.05l1.23 1.23c.56-.98.9-2.09.9-3.28zm-4.02.17c0-.06.02-.11.02-.17V5c0-1.66-1.34-3-3-3S9 3.34 9 5v.18l5.98 5.99zM4.27 3 3 4.27l6.01 6.01V11c0 1.66 1.33 3 2.99 3 .22 0 .44-.03.65-.08l1.66 1.66c-.71.33-1.5.52-2.31.52-2.76 0-5.3-2.1-5.3-5.1H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c.91-.13 1.77-.45 2.54-.9L19.73 21 21 19.73 4.27 3z\"\n}), 'MicOff');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m21 6.5-4 4V7c0-.55-.45-1-1-1H9.82L21 17.18V6.5zM3.27 2 2 3.27 4.73 6H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.21 0 .39-.08.54-.18L19.73 21 21 19.73 3.27 2z\"\n}), 'VideocamOff');","import { memo } from 'react';\nimport { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { MicOff, Settings, VideocamOff } from '@mui/icons-material';\nimport { useSelector } from 'react-redux';\nimport { userIdSelector, userNameSelector, userStatusSelector } from '../../../modules/user/store/selectors';\n\nconst UserControl = () => {\n  const userName = useSelector(userNameSelector);\n  const userId = useSelector(userIdSelector);\n  const userStatus = useSelector(userStatusSelector);\n\n  return (\n    <Box sx={{ display: 'grid', alignItems: 'center', backgroundColor: theme.palette.grey[300], padding: '12px 20px' }}>\n      <Box sx={{ display: 'grid', columnGap: '8px', gridTemplateColumns: '40px 1fr 104px' }}>\n        {/* Аватар пользователя */}\n        <Box\n          sx={{\n            '.MuiBadge-badge': {\n              border: `1px solid ${theme.palette.common.white}`,\n            },\n            '.MuiBadge-colorSuccess': {\n              backgroundColor: theme.palette.success.light,\n            },\n            '.MuiBadge-colorError': {\n              backgroundColor: theme.palette.error.light,\n            },\n          }}\n        >\n          <Badge\n            overlap=\"circular\"\n            variant=\"dot\"\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            color={userStatus === 'online' ? 'success' : 'error'}\n          >\n            <Avatar sx={{ backgroundColor: colors.deepPurple[500] }}></Avatar>\n          </Badge>\n        </Box>\n        {/* Имя пользователя */}\n        <Box>\n          <Typography variant=\"body2\">{userName}</Typography>\n          <Typography sx={{ color: theme.palette.grey[500] }} variant=\"caption\">\n            #{userId.slice(-4)}\n          </Typography>\n        </Box>\n        {/* Кнопки управления */}\n        <Box sx={{ display: 'grid', columnGap: '16px', gridTemplateColumns: 'repeat(3, 24px)', alignItems: 'center' }}>\n          <MicOff sx={{ color: theme.palette.grey[700] }} />\n          <VideocamOff sx={{ color: theme.palette.grey[700] }} />\n          <Settings sx={{ color: theme.palette.grey[700] }} />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserControlMemoized = memo(UserControl);\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9zm7.5-5-1-1h-5l-1 1H5v2h14V4z\"\n}), 'DeleteOutline');","import { memo } from 'react';\nimport { Avatar, colors, Badge, Box, Typography, IconButton } from '@mui/material';\nimport { theme } from '../../theme';\nimport { DeleteOutline } from '@mui/icons-material';\nimport { socket } from '../../utils/socket';\nimport { useSelector } from 'react-redux';\nimport { userIdSelector } from '../../../modules/user/store/selectors';\nimport { useNavigate } from 'react-router-dom';\n\nconst User = ({\n  name,\n  status,\n  channelId,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  email: string;\n  channelId?: string;\n}) => {\n  const userId = useSelector(userIdSelector);\n  const navigate = useNavigate();\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr max-content',\n        columnGap: '8px',\n        alignItems: 'center',\n        padding: '8px 12px',\n        borderRadius: '8px',\n        cursor: 'pointer',\n        ':hover': {\n          backgroundColor: theme.palette.grey[300],\n          '.delete-icon': {\n            display: 'grid',\n          },\n        },\n        '.MuiBadge-badge': {\n          border: `1px solid ${theme.palette.common.white}`,\n        },\n        '.MuiBadge-colorSuccess': {\n          backgroundColor: theme.palette.success.light,\n        },\n        '.MuiBadge-colorError': {\n          backgroundColor: theme.palette.error.light,\n        },\n      }}\n      onClick={() => {\n        socket.emit('on-channel-join', channelId, userId);\n        navigate('/messages');\n      }}\n    >\n      <Badge\n        overlap=\"circular\"\n        variant=\"dot\"\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        color={status === 'online' ? 'success' : 'error'}\n      >\n        <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n      </Badge>\n      <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n        <Typography variant=\"body2\">{name ? name : ''}</Typography>\n        <Typography variant=\"caption\">В сети</Typography>\n      </Box>\n      <Box className=\"delete-icon\" sx={{ display: 'none' }}>\n        <IconButton>\n          <DeleteOutline sx={{ color: theme.palette.grey[700] }} />\n        </IconButton>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserMemoized = memo(User);\n"],"names":["MessagesMemoized","memo","navigate","userId","dispatch","channelMessages","usersMessages","setUsersMessages","useState","message","setMessage","channel","setChannel","useEffect","response","data","socket","console","log","Box","sx","display","gridTemplateColumns","height","backgroundColor","theme","gridTemplateRows","overflow","padding","borderBottom","Typography","variant","fullWidth","onClick","margin","overflowY","width","border","borderRadius","rowGap","map","value","key","userData","_id","id","name","status","email","channelId","alignContent","author","text","columnGap","type","label","onChange","event","target","placeholder","color","NavigationMemoized","justifyContent","Tooltip","title","arrow","placement","cursor","Group","Dashboard","Divider","Settings","createSvgIcon","d","UserControlMemoized","userName","userStatus","alignItems","Badge","overlap","anchorOrigin","vertical","horizontal","Avatar","slice","MicOff","VideocamOff","UserMemoized","className","IconButton","DeleteOutline"],"sourceRoot":""}