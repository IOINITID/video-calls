{"version":3,"file":"scripts/397.cde28ae0602be6147de8.js","mappings":"8TAOA,MAkFaA,GAAiC,IAAAC,OAlFf,EAC7BC,GAAAA,EACAC,KAAAA,EACAC,OAAAA,EACAC,eAAAA,KAQE,gBAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,oBAAqB,kBACrBC,WAAY,WAGd,gBAACJ,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,oBAAqB,kBACrBE,UAAW,MACXD,WAAY,SACZE,QAAS,WACTC,aAAc,MACdC,OAAQ,UACR,kBAAmB,CACjBC,OAAQ,aAAaC,EAAA,0BAEvB,yBAA0B,CACxBC,gBAAiBD,EAAA,yBAEnB,uBAAwB,CACtBC,gBAAiBD,EAAA,yBAIrB,gBAACE,EAAA,EAAD,CACEC,QAAQ,WACRC,QAAQ,MACRC,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDC,MAAkB,WAAXpB,EAAsB,UAAY,SAEzC,gBAACqB,EAAA,EAAD,CAAQlB,GAAI,CAAEU,gBAAiB,aAEjC,gBAACX,EAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQC,oBAAqB,gBAC/C,gBAACiB,EAAA,EAAD,CAAYN,QAAQ,SAASjB,GAAc,IAC3C,gBAACuB,EAAA,EAAD,CAAYN,QAAQ,WAAsB,WAAXhB,EAAsB,SAAW,eAIpE,gBAACE,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,oBAAqB,yBACrBE,UAAW,OACXD,WAAY,SACZiB,eAAgB,QAGlB,gBAAC,IAAD,CACEP,QAAQ,YACRI,MAAM,UACNI,QAAS,KAAY,mB,EAAA,YACnBvB,EAAe,IAEf,MAAMwB,QAAiB,SAAmB,yBAA0B,CAAEC,SAAU5B,IAIhF,OAFA6B,EAAA,OAAY,2BAA4B7B,GAEjC2B,EAASG,M,+KAPG,iB,mBAStB,yB,cCxET,MAwDaC,GAAuB,IAAAhC,OAxDf,KACnB,MAAMiC,GAAW,UACXC,GAAQ,QAAY,OAEnBC,EAAa/B,IAAkB,IAAAgC,UAAS,IAM/C,OAJA,IAAAC,YAAU,KACRJ,GAAS,QAAe,CAAEE,YAAAA,OACzB,CAACA,IAGF,gBAAC9B,EAAA,EAAD,CAAKC,GAAI,CAAEK,QAAS,eAAgB2B,OAAQ,oBAC1C,gBAAC,IAAD,CACEC,WAAS,EACTC,KAAK,QACLC,YAAY,mBACZC,MAAOP,EACPQ,SAAWC,GAAUxC,EAAewC,EAAMC,OAAOH,SAEnD,gBAACrC,EAAA,EAAD,CACEC,GAAI,CACFK,QAAS,eACT2B,OAAQ,kBACR/B,QAAS,OACTuC,aAAc,QACdC,OAAQ,MACRC,UAAW,SACX,uBAAwB,CACtBC,MAAO,OAET,6BAA8B,CAC5BjC,gBAAiB,QAEnB,6BAA8B,CAC5BA,gBAAiBD,EAAA,oBACjBD,OAAQ,aAAaC,EAAA,sBACrBH,aAAc,SAIjBsB,EAAMgB,KAAKC,GAER,gBAAC,EAAD,CACEC,IAAKD,EAAKE,IACVpD,GAAIkD,EAAKE,IACTnD,KAAMiD,EAAKjD,KACXC,OAAQgD,EAAKhD,OACbC,eAAAA","sources":["webpack://video-calls/./src/core/components/user-add-invite-to-friends/user-add-invite-to-friends.tsx","webpack://video-calls/./src/core/components/add-to-friends/add-to-friends.tsx"],"sourcesContent":["import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { Dispatch, memo, SetStateAction } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddInviteToFriends = ({\n  id,\n  name,\n  status,\n  setSearchValue,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  setSearchValue: Dispatch<SetStateAction<string>>;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(1, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            setSearchValue('');\n\n            const response = await axiosInstance.post('/add-invite-to-friends', { friendId: id });\n\n            socket.emit('on-add-invite-to-friends', id);\n\n            return response.data;\n          }}\n        >\n          Добавить в друзья\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddInviteToFriendsMemoized = memo(UserAddInviteToFriends);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo, useState, useEffect } from 'react';\nimport { userUsersSelector } from '../../../modules/user/store/selectors';\nimport { TextField } from '../text-field';\nimport { getUsersAction } from '../../../modules/user/store/actions';\nimport { UserAddInviteToFriends } from '../user-add-invite-to-friends';\n\nconst AddToFriends = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(userUsersSelector);\n\n  const [searchValue, setSearchValue] = useState('');\n\n  useEffect(() => {\n    dispatch(getUsersAction({ searchValue }));\n  }, [searchValue]);\n\n  return (\n    <Box sx={{ padding: '0 8px 0 16px', margin: '16px 8px 16px 0' }}>\n      <TextField\n        fullWidth\n        size=\"small\"\n        placeholder=\"Поиск по друзьям\"\n        value={searchValue}\n        onChange={(event) => setSearchValue(event.target.value)}\n      />\n      <Box\n        sx={{\n          padding: '0 8px 0 16px',\n          margin: '16px 8px 16px 0',\n          display: 'grid',\n          alignContent: 'start',\n          rowGap: '8px',\n          overflowY: 'scroll',\n          '&::-webkit-scrollbar': {\n            width: '4px',\n          },\n          '&::-webkit-scrollbar-track': {\n            backgroundColor: 'none',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.grey[300],\n            border: `1px solid ${theme.palette.grey[500]}`,\n            borderRadius: '8px',\n          },\n        }}\n      >\n        {users.map((user) => {\n          return (\n            <UserAddInviteToFriends\n              key={user._id}\n              id={user._id}\n              name={user.name}\n              status={user.status}\n              setSearchValue={setSearchValue}\n            />\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AddToFriendsMemoized = memo(AddToFriends);\n"],"names":["UserAddInviteToFriendsMemoized","memo","id","name","status","setSearchValue","Box","sx","display","gridTemplateColumns","alignItems","columnGap","padding","borderRadius","cursor","border","theme","backgroundColor","Badge","overlap","variant","anchorOrigin","vertical","horizontal","color","Avatar","Typography","justifyContent","onClick","response","friendId","socket","data","AddToFriendsMemoized","dispatch","users","searchValue","useState","useEffect","margin","fullWidth","size","placeholder","value","onChange","event","target","alignContent","rowGap","overflowY","width","map","user","key","_id"],"sourceRoot":""}