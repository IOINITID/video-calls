{"version":3,"file":"scripts/main.996c478d83c6439d0127.js","mappings":"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","sources":["webpack://video-calls/webpack/runtime/chunk loaded","webpack://video-calls/./src/core/constants/index.ts","webpack://video-calls/./src/modules/user/services/constants/index.ts","webpack://video-calls/./src/modules/user/services/index.ts","webpack://video-calls/./src/core/utils/axios-instance.ts","webpack://video-calls/./src/core/services/add-message-to-channel.ts","webpack://video-calls/./src/core/services/get-approvals.ts","webpack://video-calls/./src/core/services/get-channel-messages.ts","webpack://video-calls/./src/core/services/get-channels.ts","webpack://video-calls/./src/core/services/get-invites.ts","webpack://video-calls/./src/modules/friends/store/actions.ts","webpack://video-calls/./src/modules/friends/services/get-friends-service.ts","webpack://video-calls/./src/modules/user/store/user.ts","webpack://video-calls/./src/modules/user/store/actions.ts","webpack://video-calls/./src/modules/user/store/sagas.ts","webpack://video-calls/./src/core/store/sagas.ts","webpack://video-calls/./src/core/store/index.ts","webpack://video-calls/./src/modules/user/store/selectors.ts","webpack://video-calls/./src/core/components/text-field/text-field.tsx","webpack://video-calls/./src/core/theme/index.ts","webpack://video-calls/./src/core/assets/images/authorization-image.jpg","webpack://video-calls/./src/core/layouts/authorization-layout/authorization-layout.tsx","webpack://video-calls/./src/modules/user/pages/authorization/authorization.tsx","webpack://video-calls/./src/modules/user/pages/registration/registration.tsx","webpack://video-calls/./src/core/routes/public-routes/public-routes.tsx","webpack://video-calls/./src/core/components/button/button.tsx","webpack://video-calls/./src/core/components/navigation/navigation.tsx","webpack://video-calls/./src/core/utils/socket.ts","webpack://video-calls/./src/core/components/user/user.tsx","webpack://video-calls/./src/core/components/user-control/user-control.tsx","webpack://video-calls/./src/modules/friends/pages/friends/friends.tsx","webpack://video-calls/./src/core/components/messages/messages.tsx","webpack://video-calls/./src/modules/profile/pages/profile/profile.tsx","webpack://video-calls/./src/core/layouts/channels-layout/channels-layout.tsx","webpack://video-calls/./src/modules/channels/pages/channels/channels.tsx","webpack://video-calls/./src/core/components/user-friends/user-friends.tsx","webpack://video-calls/./src/core/components/all-friends/all-friends.tsx","webpack://video-calls/./src/core/components/friends-online/friends-online.tsx","webpack://video-calls/./src/core/components/user-add-to-friends/user-add-to-friends.tsx","webpack://video-calls/./src/core/components/friends-invites/friends-invites.tsx","webpack://video-calls/./src/core/components/user-approvals/user-approvals.tsx","webpack://video-calls/./src/core/components/friends-approvals/friends-approvals.tsx","webpack://video-calls/./src/core/components/user-add-invite-to-friends/user-add-invite-to-friends.tsx","webpack://video-calls/./src/core/components/add-to-friends/add-to-friends.tsx","webpack://video-calls/./src/core/routes/private-routes/private-routes.tsx","webpack://video-calls/./src/core/components/app/app.tsx","webpack://video-calls/./src/core/containers/app-container/app-container.tsx","webpack://video-calls/./src/index.tsx","webpack://video-calls/webpack/bootstrap","webpack://video-calls/webpack/runtime/compat get default export","webpack://video-calls/webpack/runtime/define property getters","webpack://video-calls/webpack/runtime/global","webpack://video-calls/webpack/runtime/hasOwnProperty shorthand","webpack://video-calls/webpack/runtime/make namespace object","webpack://video-calls/webpack/runtime/publicPath","webpack://video-calls/webpack/runtime/jsonp chunk loading","webpack://video-calls/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export const DeviceWidth = {\n  Desktop: 1440,\n  Tablet: 768,\n  Mobile: 320,\n};\n\nexport const Retina = {\n  Dppx: 1.5,\n  Dpi: 144,\n};\n\nexport const API_URL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:8080'\n    : 'https://ioinitid-video-calls-server.herokuapp.com';\n\nexport const APPLICATION_URL =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://ioinitid.github.io/video-calls';\n","import { API_URL } from 'core/constants';\n\nexport const ApiUrl = {\n  Authorization: 'user/authorization',\n  Refresh: `${API_URL}/api/user/refresh`,\n  Registration: 'user/registration',\n  Logout: 'user/logout',\n  User: 'user/user',\n};\n","import axios from 'axios';\nimport { axiosInstance } from 'core/utils/axios-instance';\nimport { postAuthorizationAction, postRegistrationAction, postUsersAction } from '../store/actions';\nimport { ApiUrl } from './constants';\nimport { Authorization, User } from './types';\n\n/**\n * Service for user authorization.\n */\nexport const postAuthorizationService = (params: ReturnType<typeof postAuthorizationAction>['payload']) => {\n  return axiosInstance.request<Authorization>({\n    method: 'POST',\n    url: ApiUrl.Authorization,\n    data: params,\n  });\n};\n\n/**\n * Service for user authorization refresh.\n */\nexport const getRefreshService = () => {\n  return axios.request<Authorization>({\n    method: 'GET',\n    url: ApiUrl.Refresh,\n    withCredentials: true,\n  });\n};\n\n/**\n * Service for user registration.\n */\nexport const postRegistrationService = (params: ReturnType<typeof postRegistrationAction>['payload']) => {\n  return axiosInstance.request<Authorization>({\n    method: 'POST',\n    url: ApiUrl.Registration,\n    data: params,\n  });\n};\n\n/**\n * Service for user logout.\n */\nexport const postLogoutService = () => {\n  return axiosInstance.request<never>({\n    method: 'GET',\n    url: ApiUrl.Logout,\n  });\n};\n\n/**\n * Service for getting user data.\n */\nexport const getUserService = () => {\n  return axiosInstance.request<User>({\n    method: 'GET',\n    url: ApiUrl.User,\n  });\n};\n\n/**\n * Service for getting user by name.\n */\nexport const postUsersService = (params: ReturnType<typeof postUsersAction>['payload']) => {\n  return axiosInstance.request<User[]>({\n    method: 'POST',\n    url: '/user/users',\n    data: params,\n  });\n};\n","import axios from 'axios';\nimport { getRefreshService, postLogoutService } from 'modules/user/services';\nimport { API_URL } from '../constants';\n\nconst axiosInstance = axios.create({\n  withCredentials: true,\n  baseURL: `${API_URL}/api`,\n});\n\naxiosInstance.interceptors.request.use((config) => {\n  if (config.headers) {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n  }\n\n  return config;\n});\n\naxiosInstance.interceptors.response.use(\n  (config) => {\n    return config;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401) {\n      try {\n        const response = await getRefreshService();\n\n        localStorage.setItem('token', response.data.accessToken);\n\n        return axiosInstance.request(originalRequest);\n      } catch (error) {\n        console.log(error);\n\n        await postLogoutService();\n\n        localStorage.removeItem('token');\n      }\n    }\n\n    throw error;\n  }\n);\n\nexport { axiosInstance };\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const addMessageToChannel = createAsyncThunk(\n  'user/addMessageToChannel',\n  async ({ channel, message }: { channel: string; message: string }) => {\n    const response = await axiosInstance.post('/add-message-to-channel', { channel, message });\n\n    return response.data;\n  }\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getApprovals = createAsyncThunk('user/getApprovals', async () => {\n  const response = await axiosInstance.get('/approvals');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getChannelMessages = createAsyncThunk(\n  'user/getChannelMessages',\n  async ({ channel }: { channel: string }) => {\n    const response = await axiosInstance.post('/get-channel-messages', { channel });\n\n    return response.data;\n  }\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getChannels = createAsyncThunk('user/getChannels', async () => {\n  const response = await axiosInstance.get('/get-channels');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { axiosInstance } from '../utils/axios-instance';\n\nexport const getInvites = createAsyncThunk('user/getInvites', async () => {\n  const response = await axiosInstance.get('/invites');\n\n  return response.data;\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getFriendsService } from '../services';\n\nexport const getFriendsAction = createAsyncThunk('user/getFriendsAction', getFriendsService);\n","import { axiosInstance } from '../../../core/utils/axios-instance';\n\nconst getFriendsService = async () => {\n  const response = await axiosInstance.get('/friends');\n\n  return response.data;\n};\n\nexport { getFriendsService };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { addMessageToChannel } from 'core/services/add-message-to-channel';\nimport { getApprovals } from 'core/services/get-approvals';\nimport { getChannelMessages } from 'core/services/get-channel-messages';\nimport { getChannels } from 'core/services/get-channels';\nimport { getInvites } from 'core/services/get-invites';\nimport { getFriendsAction } from 'modules/friends/store/actions';\nimport { User } from '../services/types';\nimport { ChannelResponse, MessageResponse, UserResponse, UserState } from './types';\n\nconst initialState: UserState = {\n  isAuthorizated: false,\n  isLoading: false,\n  user: undefined,\n  users: undefined,\n  // TODO: Обновление store\n  friends: [],\n  invites: [],\n  approvals: [],\n  isCall: false,\n  isIncomingCall: false,\n  isCallAccepted: false,\n  isCallCanceled: false,\n  channels: [],\n  channelMessages: [],\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setAuthorization: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isAuthorizated = payload;\n    },\n    setIsLoading: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isLoading = payload;\n    },\n    setUser: (state: UserState, { payload }: PayloadAction<User>) => {\n      state.user = payload;\n    },\n    setUsers: (state: UserState, { payload }: PayloadAction<User[]>) => {\n      state.users = payload;\n    },\n    setIsCall: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCall = payload;\n    },\n    setIsIncomingCall: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isIncomingCall = payload;\n    },\n    setIsCallAccepted: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCallAccepted = payload;\n    },\n    setIsCallCanceled: (state: UserState, { payload }: PayloadAction<boolean>) => {\n      state.isCallCanceled = payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getFriendsAction.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.friends = payload;\n    });\n    builder.addCase(getInvites.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.invites = payload;\n    });\n    builder.addCase(getApprovals.fulfilled, (state: UserState, { payload }: PayloadAction<UserResponse[]>) => {\n      state.approvals = payload;\n    });\n    builder.addCase(getChannels.fulfilled, (state: UserState, { payload }: PayloadAction<ChannelResponse[]>) => {\n      state.channels = payload;\n    });\n    builder.addCase(getChannelMessages.fulfilled, (state: UserState, { payload }: PayloadAction<MessageResponse[]>) => {\n      state.channelMessages = payload;\n    });\n    builder.addCase(addMessageToChannel.fulfilled, (state: UserState, { payload }: PayloadAction<MessageResponse>) => {\n      state.channelMessages = [...state.channelMessages, payload];\n    });\n  },\n});\n\nexport const {\n  setAuthorization,\n  setIsLoading,\n  setUser,\n  setUsers,\n  setIsCall,\n  setIsIncomingCall,\n  setIsCallAccepted,\n  setIsCallCanceled,\n} = userSlice.actions;\n\nexport const userReducer = userSlice.reducer;\n","import { createAction } from '@reduxjs/toolkit';\n\n/**\n * Action for user authorization.\n */\nexport const postAuthorizationAction =\n  createAction<{ email: string; password: string }>('user/postAuthorizationAction');\n\n/**\n * Action for user authorization refresh.\n */\nexport const getRefreshAction = createAction('user/getRefreshAction');\n\n/**\n * Action for user registration.\n */\nexport const postRegistrationAction =\n  createAction<{ email: string; name: string; password: string }>('user/postRegistrationAction');\n\n/**\n * Action for user logout.\n */\nexport const postLogoutAction = createAction('user/postLogoutAction');\n\n/**\n * Action for getting user data.\n */\nexport const getUserAction = createAction('user/getUserAction');\n\n/**\n * Action for getting user by name.\n */\nexport const postUsersAction = createAction<{ searchValue: string }>('user/getUsersAction');\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport {\n  getRefreshAction,\n  getUserAction,\n  postAuthorizationAction,\n  postLogoutAction,\n  postRegistrationAction,\n  postUsersAction,\n} from './actions';\nimport { setAuthorization, setIsLoading, setUser, setUsers } from './user';\nimport {\n  getRefreshService,\n  getUserService,\n  postAuthorizationService,\n  postLogoutService,\n  postRegistrationService,\n  postUsersService,\n} from 'modules/user/services';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\n\n/**\n * Saga for user authorization.\n */\nconst postAuthorizationSaga = function* ({ payload }: ReturnType<typeof postAuthorizationAction>): SagaIterator {\n  try {\n    yield put(setIsLoading(true));\n    const response: Awaited<ReturnType<typeof postAuthorizationService>> = yield call(\n      postAuthorizationService,\n      payload\n    );\n    yield put(setIsLoading(false));\n    yield put(setAuthorization(true));\n    localStorage.setItem('token', response.data.accessToken);\n  } catch (error) {\n    console.error(error);\n    yield put(setIsLoading(false));\n    if (axios.isAxiosError(error)) {\n      return toast.error(error.response?.data.message); // TODO: Добавить тип для ошибки\n    }\n    toast.error('Ошибка авторизации. Проверьте логин и пароль.');\n  }\n};\n\n/**\n * Saga for user authorization refresh.\n */\nconst getRefreshSaga = function* (): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof getRefreshService>> = yield call(getRefreshService);\n    yield put(setAuthorization(true));\n    localStorage.setItem('token', response.data.accessToken);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user registration.\n */\nconst postRegistrationSaga = function* ({ payload }: ReturnType<typeof postRegistrationAction>): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof postRegistrationService>> = yield call(postRegistrationService, payload);\n    yield put(setAuthorization(true));\n    localStorage.setItem('token', response.data.accessToken);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user logout.\n */\nconst postLogoutSaga = function* (): SagaIterator {\n  try {\n    yield call(postLogoutService);\n    yield put(setAuthorization(false));\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for getting user data.\n */\nconst getUserSaga = function* (): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof getUserService>> = yield call(getUserService);\n    yield put(setUser(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for getting user by name.\n */\nconst postUsersSaga = function* ({ payload }: ReturnType<typeof postUsersAction>): SagaIterator {\n  try {\n    const response: Awaited<ReturnType<typeof postUsersService>> = yield call(postUsersService, payload);\n    yield put(setUsers(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n/**\n * Saga for user module sagas.\n */\nconst userSaga = function* (): SagaIterator {\n  yield all([\n    takeEvery(postAuthorizationAction.type, postAuthorizationSaga),\n    takeEvery(getRefreshAction.type, getRefreshSaga),\n    takeEvery(postRegistrationAction.type, postRegistrationSaga),\n    takeEvery(postLogoutAction.type, postLogoutSaga),\n    takeEvery(getUserAction.type, getUserSaga),\n    takeEvery(postUsersAction.type, postUsersSaga),\n  ]);\n};\n\nexport { userSaga };\n","import { all, fork } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { userSaga } from 'modules/user/store/sagas';\n\nconst sagas = [userSaga];\n\n/**\n * Saga for all modules sagas.\n */\nconst rootSaga = function* (): SagaIterator {\n  yield all(sagas.map((saga) => fork(saga)));\n};\n\nexport { rootSaga };\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { userReducer } from 'modules/user/store';\nimport { rootSaga } from 'core/store/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport { store };\n","import { RootState } from '../../../core/store/types';\n\nexport const userIsAuthorizatedSelector = (state: RootState) => state.user.isAuthorizated;\nexport const userIsLoadingSelector = (state: RootState) => state.user.isLoading;\nexport const userUserSelector = (state: RootState) => state.user.user;\nexport const userUsersSelector = (state: RootState) => state.user.users;\n\nexport const userFriendsSelector = (state: RootState) => state.user.friends;\nexport const userInvitesSelector = (state: RootState) => state.user.invites;\nexport const userApprovalsSelector = (state: RootState) => state.user.approvals;\nexport const userIsCallSelector = (state: RootState) => state.user.isCall;\nexport const userIsIncomingCallSelector = (state: RootState) => state.user.isIncomingCall;\nexport const userIsCallAcceptedSelector = (state: RootState) => state.user.isCallAccepted;\nexport const userIsCallCanceledSelector = (state: RootState) => state.user.isCallCanceled;\nexport const userChannelsSelector = (state: RootState) => state.user.channels;\nexport const userChannelMessagesSelector = (state: RootState) => state.user.channelMessages;\n","import { memo } from 'react';\nimport { TextField as MUITextField, TextFieldProps as MUITextFieldProps } from '@mui/material';\n\nconst TextField = ({ ...props }: MUITextFieldProps) => {\n  return <MUITextField {...props} />;\n};\n\nexport const TextFieldMemoized = memo(TextField);\n","import { createTheme, colors } from '@mui/material';\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      light: colors.indigo.A400,\n      main: colors.indigo[500],\n      dark: colors.indigo[800],\n    },\n  },\n});\n","export default __webpack_public_path__ + \"assets/images/authorization-image.6642b50856b9fc50fde3936da1774bf9.jpg\";","import { Box } from '@mui/material';\nimport { memo, ReactElement } from 'react';\n\nconst AuthorizationLayout = ({ children }: { children: ReactElement }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100%',\n      }}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport const AuthorizationLayoutMemoized = memo(AuthorizationLayout);\n","import { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from 'core/components/text-field';\nimport { Box, InputAdornment, IconButton, Typography, Link } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { theme } from 'core/theme';\nimport { useNavigate } from 'react-router-dom';\nimport { postAuthorizationAction } from 'modules/user/store/actions';\nimport authorizationImage from 'core/assets/images/authorization-image.jpg';\nimport { AuthorizationLayout } from 'core/layouts/authorization-layout';\nimport { css } from '@emotion/css';\nimport { LoadingButton } from '@mui/lab';\nimport { userIsLoadingSelector } from 'modules/user/store/selectors';\n\nconst Authorization = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const isLoading = useSelector(userIsLoadingSelector);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  return (\n    <AuthorizationLayout>\n      <Box\n        sx={{\n          display: 'grid',\n          width: '920px',\n          gridTemplateColumns: '448px 472px',\n          borderRadius: '20px',\n          border: `1px solid ${theme.palette.grey[300]}`,\n          overflow: 'hidden',\n        }}\n      >\n        <Box>\n          <img\n            className={css`\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n            `}\n            src={authorizationImage}\n            alt=\"Илюстрация.\"\n          />\n        </Box>\n        <Box sx={{ padding: '48px 56px', backgroundColor: `${theme.palette.common.white}` }}>\n          <Box sx={{ display: 'grid', rowGap: '16px' }}>\n            <Box sx={{ display: 'grid', rowGap: '32px' }}>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"h5\">Войти в свой профиль</Typography>\n                <Box sx={{ display: 'grid', rowGap: '24px' }}>\n                  <TextField\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Адрес электронной почты\"\n                    value={email}\n                    onChange={(event) => setEmail(event.target.value)}\n                    placeholder=\"Введите ваш email\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type={isShowPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Пароль\"\n                    value={password}\n                    onChange={(event) => setPassword(event.target.value)}\n                    placeholder=\"Введите ваш пароль\"\n                    autoComplete=\"off\"\n                    fullWidth\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={() => setIsShowPassword(!isShowPassword)}>\n                            {isShowPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Box>\n              <LoadingButton\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                loading={isLoading}\n                onClick={() => {\n                  dispatch(postAuthorizationAction({ email, password }));\n                }}\n              >\n                Войти\n              </LoadingButton>\n            </Box>\n            <Typography variant=\"subtitle2\">\n              У Вас ещё нет профиля?{' '}\n              <Link\n                sx={{ cursor: 'pointer' }}\n                underline=\"hover\"\n                onClick={(event) => {\n                  event.preventDefault();\n\n                  navigate('/registration');\n                }}\n              >\n                Зарегистрироваться\n              </Link>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </AuthorizationLayout>\n  );\n};\n\nexport const AuthorizationMemoized = memo(Authorization);\n","import { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Typography, TextField, InputAdornment, IconButton, Link } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { theme } from 'core/theme';\nimport { useNavigate } from 'react-router-dom';\nimport { postRegistrationAction } from 'modules/user/store/actions';\nimport authorizationImage from 'core/assets/images/authorization-image.jpg';\nimport { AuthorizationLayout } from 'core/layouts/authorization-layout';\nimport { css } from '@emotion/css';\nimport { LoadingButton } from '@mui/lab';\nimport { userIsLoadingSelector } from 'modules/user/store/selectors';\n\nconst Registration = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const isLoading = useSelector(userIsLoadingSelector);\n\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  return (\n    <AuthorizationLayout>\n      <Box\n        sx={{\n          display: 'grid',\n          width: '920px',\n          gridTemplateColumns: '448px 472px',\n          borderRadius: '20px',\n          border: `1px solid ${theme.palette.grey[300]}`,\n          overflow: 'hidden',\n        }}\n      >\n        <Box>\n          <img\n            className={css`\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n            `}\n            src={authorizationImage}\n            alt=\"Илюстрация.\"\n          />\n        </Box>\n        <Box sx={{ padding: '48px 56px', backgroundColor: `${theme.palette.common.white}` }}>\n          <Box sx={{ display: 'grid', rowGap: '16px' }}>\n            <Box sx={{ display: 'grid', rowGap: '24px' }}>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"h5\">Создать учётную запись</Typography>\n                <Box sx={{ display: 'grid', rowGap: '24px' }}>\n                  <TextField\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Адрес электронной почты\"\n                    value={email}\n                    onChange={(event) => setEmail(event.target.value)}\n                    placeholder=\"Введите ваш email\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    label=\"Имя пользователя\"\n                    value={name}\n                    onChange={(event) => setName(event.target.value)}\n                    placeholder=\"Введите ваше имя\"\n                    autoComplete=\"off\"\n                    fullWidth\n                  />\n                  <TextField\n                    type={isShowPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Пароль\"\n                    value={password}\n                    onChange={(event) => setPassword(event.target.value)}\n                    placeholder=\"Введите ваш пароль\"\n                    autoComplete=\"off\"\n                    fullWidth\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton onClick={() => setIsShowPassword(!isShowPassword)}>\n                            {isShowPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Box>\n              <Box sx={{ display: 'grid', rowGap: '32px' }}>\n                <Typography variant=\"caption\" color={theme.palette.grey[500]}>\n                  Регистрируясь, Вы соглашаетесь с{' '}\n                  <Link sx={{ cursor: 'pointer' }} underline=\"hover\">\n                    политикой обработки персональных данных\n                  </Link>\n                </Typography>\n                <LoadingButton\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  loading={isLoading}\n                  onClick={() => {\n                    dispatch(postRegistrationAction({ email, name, password }));\n                  }}\n                >\n                  Зарегистрироваться\n                </LoadingButton>\n              </Box>\n            </Box>\n            <Typography variant=\"subtitle2\">\n              <Link\n                sx={{ cursor: 'pointer' }}\n                underline=\"hover\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  navigate('/authorization');\n                }}\n              >\n                Уже зарегистрированы?\n              </Link>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </AuthorizationLayout>\n  );\n};\n\nexport const RegistrationMemoized = memo(Registration);\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Authorization } from 'modules/user/pages/authorization';\nimport { Registration } from 'modules/user/pages/registration';\n\nconst PublicRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"authorization\" element={<Authorization />} />\n      <Route path=\"registration\" element={<Registration />} />\n      <Route path=\"*\" element={<Navigate to=\"authorization\" />} />\n    </Routes>\n  );\n};\n\nexport const PublicRoutesMemoized = memo(PublicRoutes);\n","import { Button as MUIButton, ButtonProps as MUIButtonProps } from '@mui/material';\nimport { memo } from 'react';\n\nconst Button = ({ children, ...props }: MUIButtonProps) => {\n  return (\n    <MUIButton disableElevation {...props}>\n      {children}\n    </MUIButton>\n  );\n};\n\nexport const ButtonMemoized = memo(Button);\n","import { memo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Group, Dashboard, Settings } from '@mui/icons-material';\nimport { Box, Divider, Tooltip } from '@mui/material';\nimport { theme } from '../../theme';\n\nconst Navigation = () => {\n  const navigate = useNavigate();\n\n  //  TODO: Добавить Drawer компонент\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        rowGap: '24px',\n        height: '100%',\n        alignContent: 'start',\n        padding: '25px 16px',\n        justifyContent: 'center',\n      }}\n    >\n      <Box sx={{ display: 'grid', rowGap: '16px' }}>\n        <Tooltip title=\"Друзья\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/friends')}\n          >\n            <Group />\n          </Box>\n        </Tooltip>\n        <Tooltip title=\"Каналы\" arrow placement=\"right\">\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              backgroundColor: theme.palette.grey[400],\n              cursor: 'pointer',\n              borderRadius: '8px',\n              justifyContent: 'center',\n              width: '40px',\n            }}\n            onClick={() => navigate('/channels')}\n          >\n            <Dashboard />\n          </Box>\n        </Tooltip>\n      </Box>\n      <Divider />\n      <Tooltip title=\"Профиль\" arrow placement=\"right\">\n        <Box\n          sx={{\n            display: 'grid',\n            padding: '8px',\n            backgroundColor: theme.palette.grey[400],\n            cursor: 'pointer',\n            borderRadius: '8px',\n            justifyContent: 'center',\n            width: '40px',\n          }}\n          onClick={() => navigate('/profile')}\n        >\n          <Settings />\n        </Box>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport const NavigationMemoized = memo(Navigation);\n","import { io } from 'socket.io-client';\nimport { API_URL } from '../constants';\n\nconst socket = io(API_URL, {\n  transports: ['websocket'],\n});\n\nexport { socket };\n","import { memo } from 'react';\nimport { Avatar, colors, Badge, Box, Typography, IconButton } from '@mui/material';\nimport { theme } from '../../theme';\nimport { DeleteOutline } from '@mui/icons-material';\nimport { socket } from '../../utils/socket';\nimport { useSelector } from 'react-redux';\nimport { userUserSelector } from '../../../modules/user/store/selectors';\nimport { useNavigate } from 'react-router-dom';\n\nconst User = ({\n  name,\n  status,\n  channelId,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  email: string;\n  channelId?: string;\n}) => {\n  const user = useSelector(userUserSelector);\n  const navigate = useNavigate();\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr max-content',\n        columnGap: '8px',\n        alignItems: 'center',\n        padding: '8px 12px',\n        borderRadius: '8px',\n        cursor: 'pointer',\n        ':hover': {\n          backgroundColor: theme.palette.grey[300],\n          '.delete-icon': {\n            display: 'grid',\n          },\n        },\n        '.MuiBadge-badge': {\n          border: `1px solid ${theme.palette.common.white}`,\n        },\n        '.MuiBadge-colorSuccess': {\n          backgroundColor: theme.palette.success.light,\n        },\n        '.MuiBadge-colorError': {\n          backgroundColor: theme.palette.error.light,\n        },\n      }}\n      onClick={() => {\n        socket.emit('on-channel-join', channelId, user?.id);\n        navigate('/messages');\n      }}\n    >\n      <Badge\n        overlap=\"circular\"\n        variant=\"dot\"\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        color={status === 'online' ? 'success' : 'error'}\n      >\n        <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n      </Badge>\n      <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n        <Typography variant=\"body2\">{name ? name : ''}</Typography>\n        <Typography variant=\"caption\">В сети</Typography>\n      </Box>\n      <Box className=\"delete-icon\" sx={{ display: 'none' }}>\n        <IconButton>\n          <DeleteOutline sx={{ color: theme.palette.grey[700] }} />\n        </IconButton>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserMemoized = memo(User);\n","import { memo, useState } from 'react';\nimport { Avatar, Badge, Box, colors, IconButton, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Mic, MicOff, Videocam, VideocamOff } from '@mui/icons-material';\nimport { useSelector } from 'react-redux';\nimport { userUserSelector } from '../../../modules/user/store/selectors';\n\nconst UserControl = () => {\n  const user = useSelector(userUserSelector);\n\n  const [isMic, setIsMic] = useState(false);\n  const [isVideocam, setIsVideocam] = useState(false);\n\n  return (\n    <Box sx={{ display: 'grid', alignItems: 'center', backgroundColor: theme.palette.grey[300], padding: '12px 20px' }}>\n      <Box sx={{ display: 'grid', columnGap: '8px', gridTemplateColumns: '40px 1fr 96px' }}>\n        {/* Аватар пользователя */}\n        <Box\n          sx={{\n            '.MuiBadge-badge': {\n              border: `1px solid ${theme.palette.common.white}`,\n            },\n            '.MuiBadge-colorSuccess': {\n              backgroundColor: theme.palette.success.light,\n            },\n            '.MuiBadge-colorError': {\n              backgroundColor: theme.palette.error.light,\n            },\n          }}\n        >\n          <Badge\n            overlap=\"circular\"\n            variant=\"dot\"\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            color={user?.status === 'online' ? 'success' : 'error'}\n          >\n            <Avatar sx={{ backgroundColor: colors.deepPurple[500] }}></Avatar>\n          </Badge>\n        </Box>\n        {/* Имя пользователя */}\n        <Box>\n          <Typography variant=\"body2\">{user?.name}</Typography>\n          <Typography sx={{ color: theme.palette.grey[500] }} variant=\"caption\">\n            #{user?.id.slice(-4)}\n          </Typography>\n        </Box>\n        {/* Кнопки управления */}\n        <Box sx={{ display: 'grid', columnGap: '16px', gridTemplateColumns: 'repeat(2, 40px)', alignItems: 'center' }}>\n          <IconButton onClick={() => setIsMic(!isMic)}>\n            {isMic ? (\n              <Mic sx={{ color: theme.palette.grey[700] }} />\n            ) : (\n              <MicOff sx={{ color: theme.palette.grey[700] }} />\n            )}\n          </IconButton>\n          <IconButton onClick={() => setIsVideocam(!isVideocam)}>\n            {isVideocam ? (\n              <Videocam sx={{ color: theme.palette.grey[700] }} />\n            ) : (\n              <VideocamOff sx={{ color: theme.palette.grey[700] }} />\n            )}\n          </IconButton>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserControlMemoized = memo(UserControl);\n","import { Box, Typography } from '@mui/material';\nimport { Button } from 'core/components/button';\nimport { Navigation } from 'core/components/navigation';\nimport { User } from 'core/components/user';\nimport { UserControl } from 'core/components/user-control';\nimport { theme } from 'core/theme';\n// import { axiosInstance } from 'core/utils/axios-instance';\nimport { memo, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\n\nconst Friends = () => {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n\n  useEffect(() => {\n    // const getPersonalMessage = async () => {\n    //   const response = await axiosInstance.post('/get-personal-messages-channels');\n    //   setUsersMessages(response.data);\n    // };\n    // getPersonalMessage();\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px 1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Навигация по разделу друзья */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(2, max-content)',\n            columnGap: '24px',\n            padding: '16px 24px',\n            borderBottom: `1px solid ${theme.palette.grey[400]}`,\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">Друзья</Typography>\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(5, max-content)',\n              columnGap: '8px',\n            }}\n          >\n            <Button\n              variant={pathname.includes('all-friends') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('all-friends')}\n            >\n              Все друзья\n            </Button>\n            <Button\n              variant={pathname.includes('friends-online') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-online')}\n            >\n              В сети\n            </Button>\n            <Button\n              variant={pathname.includes('friends-invites') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-invites')}\n            >\n              Заявки\n            </Button>\n            <Button\n              variant={pathname.includes('friends-approvals') ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => navigate('friends-approvals')}\n            >\n              Ожидание\n            </Button>\n            <Button\n              variant={pathname.includes('add-to-friends') ? 'contained' : 'outlined'}\n              color=\"success\"\n              onClick={() => navigate('add-to-friends')}\n            >\n              Добавить в друзья\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const FriendsMemoized = memo(Friends);\n","import { memo, useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from 'core/theme';\nimport { Navigation } from 'core/components/navigation';\nimport { UserControl } from 'core/components/user-control';\nimport { User } from 'core/components/user';\nimport { Button } from 'core/components/button';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { axiosInstance } from 'core/utils/axios-instance';\nimport { TextField } from 'core/components/text-field';\nimport { socket } from 'core/utils/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userChannelMessagesSelector, userUserSelector } from 'modules/user/store/selectors';\nimport { getChannelMessages } from 'core/services/get-channel-messages';\n\nconst Messages = () => {\n  const navigate = useNavigate();\n\n  const user = useSelector(userUserSelector);\n  const dispatch = useDispatch();\n\n  const channelMessages = useSelector(userChannelMessagesSelector);\n\n  const [usersMessages, setUsersMessages] = useState<any[]>();\n  const [message, setMessage] = useState('');\n  const [channel, setChannel] = useState<string>('');\n\n  // Добавляет сообщение в канал\n  const handleSendMessage = () => {\n    if (channel && message) {\n      // dispatch(addMessageToChannel({ channel, message }));\n\n      // ON-MESSAGE - событие отправки сообщения в канал\n      socket.emit('on-message', channel, message, user?.id);\n\n      setMessage('');\n    }\n  };\n\n  useEffect(() => {\n    const getPersonalMessage = async () => {\n      const response = await axiosInstance.post('/get-personal-messages-channels');\n\n      setUsersMessages(response.data);\n    };\n\n    // getPersonalMessage();\n\n    // ON-CHANNEL-JOIN - событие подключения пользователей к комнате\n    socket.on('on-channel-join', (message: string, channel: string) => {\n      console.log('Сообщение в канале:', message);\n      setChannel(channel);\n\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n\n    if (channel) {\n      dispatch(getChannelMessages({ channel }));\n    }\n\n    socket.on('on-message', (channel: string) => {\n      if (channel) {\n        dispatch(getChannelMessages({ channel }));\n      }\n    });\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px max-content 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Личные сообщения</Typography>\n        </Box>\n        {/* Друзья */}\n        <Box sx={{ padding: '16px' }}>\n          <Button fullWidth variant=\"contained\" onClick={() => navigate('/friends/all-friends')}>\n            Друзья\n          </Button>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box\n          sx={{\n            margin: '28px 4px',\n            overflowY: 'scroll',\n            '&::-webkit-scrollbar': {\n              width: '4px',\n            },\n            '&::-webkit-scrollbar-track': {\n              backgroundColor: 'none',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: theme.palette.grey[300],\n              border: `1px solid ${theme.palette.grey[500]}`,\n              borderRadius: '8px',\n            },\n          }}\n        >\n          <Box sx={{ display: 'grid', rowGap: '12px', padding: '0 4px' }}>\n            {usersMessages?.map((value: any) => {\n              return (\n                <User\n                  key={value.userData._id}\n                  id={value.userData._id}\n                  name={value.userData.name}\n                  status={value.userData.status}\n                  email={value.userData.email}\n                  channelId={value.value._id}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок друзья */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '1fr',\n          backgroundColor: theme.palette.grey[500],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Сообщения */}\n        <Box\n          sx={{\n            display: 'grid',\n            gridTemplateRows: '1fr max-content',\n            rowGap: '16px',\n            margin: '24px 16px',\n            backgroundColor: theme.palette.common.white,\n            borderRadius: '8px',\n            padding: '16px',\n            overflow: 'hidden',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'grid',\n              padding: '8px',\n              overflow: 'hidden',\n              gridTemplateRows: 'max-content 1fr',\n              rowGap: '16px',\n            }}\n          >\n            <Typography>Сообщения:</Typography>\n            <Box sx={{ display: 'grid', overflow: 'scroll', rowGap: '8px', alignContent: 'start', height: '100%' }}>\n              {channelMessages?.map((message) => {\n                return (\n                  <Box\n                    key={message._id}\n                    sx={{\n                      padding: '8px',\n                      border: '1px solid #000000',\n                      display: 'grid',\n                      borderRadius: '8px',\n                    }}\n                  >\n                    <User\n                      id={message._id}\n                      name={message.author.name}\n                      status={message.author.status}\n                      email={message.author.email}\n                    />\n                    <Typography>{message.text}</Typography>\n                  </Box>\n                );\n              })}\n            </Box>\n          </Box>\n          <Box sx={{ display: 'grid', gridTemplateColumns: '1fr max-content', columnGap: '16px' }}>\n            <TextField\n              type=\"text\"\n              id=\"message\"\n              name=\"message\"\n              label=\"Сообщение\"\n              value={message}\n              onChange={(event) => setMessage(event.target.value)}\n              placeholder=\"Введите текст сообщения\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\n              Отправить сообщение\n            </Button>\n          </Box>\n        </Box>\n        {/* Содержимое вкладки */}\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n\nexport const MessagesMemoized = memo(Messages);\n","import { memo, useState } from 'react';\nimport { Box, Typography, Link } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userUserSelector } from 'modules/user/store/selectors';\nimport { useNavigate } from 'react-router-dom';\nimport { Navigation } from 'core/components/navigation';\nimport { Button } from 'core/components/button';\nimport { postLogoutAction } from 'modules/user/store/actions';\nimport { socket } from 'core/utils/socket';\nimport { theme } from 'core/theme';\nimport { TextField } from 'core/components/text-field';\n\nconst Profile = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const user = useSelector(userUserSelector);\n\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content 1fr', height: '100%' }}>\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      <Box>\n        <Typography variant=\"h5\">Ваш email: {user?.email}</Typography>\n        <TextField\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          label=\"Адрес электронной почты\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          placeholder=\"Введите ваш email\"\n          autoComplete=\"off\"\n          fullWidth\n        />\n        <Typography variant=\"h5\">Ваше имя: {user?.name}</Typography>\n        <TextField\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          label=\"Имя пользователя\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          placeholder=\"Введите ваше имя\"\n          autoComplete=\"off\"\n          fullWidth\n        />\n        {/* TODO: Нужен пароль (скрытый или последние символы) */}\n        <Typography variant=\"h5\">Ваш пароль:</Typography>\n        <TextField\n          type=\"text\"\n          id=\"password\"\n          name=\"password\"\n          label=\"Пароль\"\n          value={password}\n          onChange={(event) => setPassword(event.target.value)}\n          placeholder=\"Введите ваш пароль\"\n          autoComplete=\"off\"\n          fullWidth\n        />\n        {/* TODO: Нужен статус */}\n        <Typography variant=\"h5\">Статус:</Typography>\n        {/* TODO: Нужна дата рождения */}\n        <Typography variant=\"h5\">Дата рождения:</Typography>\n        {/* TODO: Нужен аватар */}\n        <Typography variant=\"h5\">Ваш аватар:</Typography>\n        <Typography variant=\"h5\">\n          <Link sx={{ cursor: 'pointer' }} underline=\"hover\" onClick={() => navigate(-1)}>\n            Назад\n          </Link>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              dispatch(postLogoutAction());\n\n              socket.emit('on-disconnect', user?.id);\n            }}\n          >\n            Выйти из аккаунта\n          </Button>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport const ProfileMemoized = memo(Profile);\n","import { memo } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { Navigation } from '../../components/navigation';\nimport { UserControl } from '../../components/user-control';\n\nconst ChannelsLayout = () => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: '72px 376px 1fr',\n        height: '100%',\n        backgroundColor: theme.palette.common.white,\n      }}\n    >\n      {/* Навигация */}\n      <Box sx={{ backgroundColor: theme.palette.grey[200] }}>\n        <Navigation />\n      </Box>\n      {/* Личные сообщения*/}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateRows: '72px 1fr 64px',\n          backgroundColor: theme.palette.grey[400],\n          overflow: 'hidden',\n        }}\n      >\n        {/* Заголовок  */}\n        <Box sx={{ padding: '24px 20px', borderBottom: `1px solid ${theme.palette.grey[600]}` }}>\n          <Typography variant=\"h6\">Каналы</Typography>\n        </Box>\n        {/* Список сообщений от пользователей */}\n        <Box sx={{ padding: '0 8px', margin: '28px 0', overflow: 'scroll' }}>\n          <Box sx={{ display: 'grid', rowGap: '12px' }}>\n            {Array.from(Array(25).keys()).map((value) => {\n              return <Box key={value} />;\n            })}\n          </Box>\n        </Box>\n        {/* Управление пользователем */}\n        <UserControl />\n      </Box>\n      {/* Блок текстовых сообщений или видеочата */}\n      <Box sx={{ backgroundColor: theme.palette.grey[600] }}></Box>\n    </Box>\n  );\n};\n\nexport const ChannelsLayoutMemoized = memo(ChannelsLayout);\n","import { memo } from 'react';\nimport { ChannelsLayout } from '../../../../core/layouts/channels-layout';\n\nconst Channels = () => {\n  return <ChannelsLayout />;\n};\n\nexport const ChannelsMemoized = memo(Channels);\n","import { Avatar, Badge, Box, colors, Menu, MenuItem, Typography } from '@mui/material';\nimport { memo, useState } from 'react';\nimport { Chat, Call, MoreVert } from '@mui/icons-material';\nimport { theme } from '../../theme';\nimport { socket } from '../../utils/socket';\nimport { axiosInstance } from '../../utils/axios-instance';\n\nconst UserFriends = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLDivElement | null>(null);\n\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 24px)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Box sx={{ cursor: 'pointer' }}>\n          <Chat />\n        </Box>\n        <Box sx={{ cursor: 'pointer' }}>\n          <Call />\n        </Box>\n        <Box sx={{ cursor: 'pointer' }} onClick={(event) => setAnchorEl(event.currentTarget)}>\n          <MoreVert />\n        </Box>\n      </Box>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuItem onClick={() => setAnchorEl(null)}>Написать</MenuItem>\n        <MenuItem onClick={() => setAnchorEl(null)}>Позвонить</MenuItem>\n        <MenuItem\n          onClick={async () => {\n            setAnchorEl(null);\n\n            const response = await axiosInstance.post('/remove-from-friends', { friendId: id });\n\n            socket.emit('on-remove-from-friends', id); // Отправка события пользователю, которого удаляют из друзей\n\n            return response.data;\n          }}\n        >\n          Удалить из друзей\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport const UserFriendsMemoized = memo(UserFriends);\n","import { useSelector } from 'react-redux';\nimport { Box, Typography } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userFriendsSelector } from '../../../modules/user/store/selectors';\nimport { UserFriends } from '../user-friends';\n\nconst AllFriends = () => {\n  const friends = useSelector(userFriendsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      <Box sx={{ padding: '8px 12px' }}>\n        <Typography variant=\"h6\">Все друзья: {friends.length > 0 ? friends.length : 0}</Typography>\n      </Box>\n      <Box sx={{ display: 'grid', alignContent: 'start', rowGap: '8px' }}>\n        {friends.map((friend) => {\n          return <UserFriends key={friend._id} id={friend._id} name={friend.name} status={friend.status} />;\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AllFriendsMemoized = memo(AllFriends);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userFriendsSelector } from '../../../modules/user/store/selectors';\nimport { UserFriends } from '../user-friends';\n\nconst FriendsOnline = () => {\n  const friends = useSelector(userFriendsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {friends.map((friend) => {\n        return friend.status === 'online' ? (\n          <UserFriends key={friend._id} id={friend._id} name={friend.name} status={friend.status} />\n        ) : null;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsOnlineMemoized = memo(FriendsOnline);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddToFriends = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/add-to-friends', { friendId: id });\n\n            socket.emit('on-add-to-friends', id); // Отправка события пользователю который ждет принятие приглашения\n\n            return response.data;\n          }}\n        >\n          Добавить\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/remove-invite-to-friends', { friendId: id });\n\n            socket.emit('on-remove-invite-to-friends', id); // Отправка события пользователю который ждет принятия или отклонения приглашения\n\n            return response.data;\n          }}\n        >\n          Отклонить\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddToFriendsMemoized = memo(UserAddToFriends);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userInvitesSelector } from '../../../modules/user/store/selectors';\nimport { UserAddToFriends } from '../user-add-to-friends';\n\nconst FriendsInvites = () => {\n  const invites = useSelector(userInvitesSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {invites.map((invite) => {\n        return <UserAddToFriends key={invite._id} id={invite._id} name={invite.name} status={invite.status} />;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsInvitesMemoized = memo(FriendsInvites);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserApprovals = ({ id, name, status }: { id: string; name: string; status: string }) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Typography variant=\"body1\">Ожидает добавления в друзья</Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            const response = await axiosInstance.post('/remove-invite-to-friends', { friendId: id });\n\n            socket.emit('on-remove-invite-to-friends', id); // Отправка события пользователю который ждет принятия или отклонения приглашения\n\n            return response.data;\n          }}\n        >\n          Отклонить\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserApprovalsMemoized = memo(UserApprovals);\n","import { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo } from 'react';\nimport { userApprovalsSelector } from '../../../modules/user/store/selectors';\nimport { UserApprovals } from '../user-approvals';\n\nconst FriendsApprovals = () => {\n  const approvals = useSelector(userApprovalsSelector);\n\n  return (\n    <Box\n      sx={{\n        padding: '0 8px 0 16px',\n        margin: '16px 8px 16px 0',\n        display: 'grid',\n        alignContent: 'start',\n        rowGap: '8px',\n        overflowY: 'scroll',\n        '&::-webkit-scrollbar': {\n          width: '4px',\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: 'none',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: theme.palette.grey[300],\n          border: `1px solid ${theme.palette.grey[500]}`,\n          borderRadius: '8px',\n        },\n      }}\n    >\n      {approvals.map((approval) => {\n        return <UserApprovals key={approval._id} id={approval._id} name={approval.name} status={approval.status} />;\n      })}\n    </Box>\n  );\n};\n\nexport const FriendsApprovalsMemoized = memo(FriendsApprovals);\n","import { Avatar, Badge, Box, colors, Typography } from '@mui/material';\nimport { Dispatch, memo, SetStateAction } from 'react';\nimport { theme } from '../../theme';\nimport { axiosInstance } from '../../utils/axios-instance';\nimport { socket } from '../../utils/socket';\nimport { Button } from '../button';\n\nconst UserAddInviteToFriends = ({\n  id,\n  name,\n  status,\n  setSearchValue,\n}: {\n  id: string;\n  name: string;\n  status: string;\n  setSearchValue: Dispatch<SetStateAction<string>>;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'max-content 1fr',\n        alignItems: 'center',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content 1fr',\n          columnGap: '8px',\n          alignItems: 'center',\n          padding: '8px 12px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          '.MuiBadge-badge': {\n            border: `1px solid ${theme.palette.common.white}`,\n          },\n          '.MuiBadge-colorSuccess': {\n            backgroundColor: theme.palette.success.light,\n          },\n          '.MuiBadge-colorError': {\n            backgroundColor: theme.palette.error.light,\n          },\n        }}\n      >\n        <Badge\n          overlap=\"circular\"\n          variant=\"dot\"\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          color={status === 'online' ? 'success' : 'error'}\n        >\n          <Avatar sx={{ backgroundColor: colors.deepPurple[500] }} />\n        </Badge>\n        <Box sx={{ display: 'grid', gridTemplateColumns: 'max-content' }}>\n          <Typography variant=\"body2\">{name ? name : ''}</Typography>\n          <Typography variant=\"caption\">{status === 'online' ? 'В сети' : 'Не в сети'}</Typography>\n        </Box>\n      </Box>\n      {/* Кнопки взаимодействия с пользователем */}\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(1, max-content)',\n          columnGap: '24px',\n          alignItems: 'center',\n          justifyContent: 'end',\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={async () => {\n            setSearchValue('');\n\n            const response = await axiosInstance.post('/add-invite-to-friends', { friendId: id });\n\n            socket.emit('on-add-invite-to-friends', id);\n\n            return response.data;\n          }}\n        >\n          Добавить в друзья\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport const UserAddInviteToFriendsMemoized = memo(UserAddInviteToFriends);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { theme } from '../../theme';\nimport { memo, useState, useEffect } from 'react';\nimport { userUsersSelector } from '../../../modules/user/store/selectors';\nimport { TextField } from '../text-field';\nimport { postUsersAction } from '../../../modules/user/store/actions';\nimport { UserAddInviteToFriends } from '../user-add-invite-to-friends';\n\nconst AddToFriends = () => {\n  const dispatch = useDispatch();\n\n  const users = useSelector(userUsersSelector);\n\n  const [searchValue, setSearchValue] = useState('');\n\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(postUsersAction({ searchValue }));\n    }\n  }, [searchValue]);\n\n  return (\n    <Box sx={{ padding: '0 8px 0 16px', margin: '16px 8px 16px 0' }}>\n      <TextField\n        fullWidth\n        size=\"small\"\n        placeholder=\"Поиск по друзьям\"\n        value={searchValue}\n        onChange={(event) => setSearchValue(event.target.value)}\n      />\n      <Box\n        sx={{\n          padding: '0 8px 0 16px',\n          margin: '16px 8px 16px 0',\n          display: 'grid',\n          alignContent: 'start',\n          rowGap: '8px',\n          overflowY: 'scroll',\n          '&::-webkit-scrollbar': {\n            width: '4px',\n          },\n          '&::-webkit-scrollbar-track': {\n            backgroundColor: 'none',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.grey[300],\n            border: `1px solid ${theme.palette.grey[500]}`,\n            borderRadius: '8px',\n          },\n        }}\n      >\n        {users?.map((user) => {\n          return (\n            <UserAddInviteToFriends\n              key={user.id}\n              id={user.id}\n              name={user.name}\n              status={user.status}\n              setSearchValue={setSearchValue}\n            />\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport const AddToFriendsMemoized = memo(AddToFriends);\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Friends } from 'modules/friends/pages/friends';\nimport { Messages } from 'core/components/messages';\nimport { Profile } from 'modules/profile/pages/profile';\nimport { Channels } from 'modules/channels/pages/channels';\nimport { AllFriends } from 'core/components/all-friends';\nimport { FriendsOnline } from 'core/components/friends-online';\nimport { FriendsInvites } from 'core/components/friends-invites';\nimport { FriendsApprovals } from 'core/components/friends-approvals';\nimport { AddToFriends } from 'core/components/add-to-friends';\n\nconst PrivateRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"friends\" element={<Friends />}>\n        <Route path=\"all-friends\" element={<AllFriends />} />\n        <Route path=\"friends-online\" element={<FriendsOnline />} />\n        <Route path=\"friends-invites\" element={<FriendsInvites />} />\n        <Route path=\"friends-approvals\" element={<FriendsApprovals />} />\n        <Route path=\"add-to-friends\" element={<AddToFriends />} />\n      </Route>\n      <Route path=\"messages\" element={<Messages />} />\n      <Route path=\"profile\" element={<Profile />} />\n      <Route path=\"channels\" element={<Channels />} />\n      <Route path=\"*\" element={<Navigate to=\"friends/all-friends\" />} />\n    </Routes>\n  );\n};\n\nexport const PrivateRoutesMemoized = memo(PrivateRoutes);\n","import { memo } from 'react';\nimport { PrivateRoutes, PublicRoutes } from 'core/routes';\n\ntype AppProps = {\n  isAuthorizated: boolean;\n};\n\nconst App = ({ isAuthorizated }: AppProps) => {\n  return isAuthorizated ? <PrivateRoutes /> : <PublicRoutes />;\n};\n\nexport const AppMemoized = memo(App);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userIsAuthorizatedSelector, userUserSelector } from 'modules/user/store/selectors';\nimport { App } from 'core/components/app';\nimport { getRefreshAction, getUserAction } from 'modules/user/store/actions';\nimport { socket } from 'core/utils/socket';\n\nconst AppContainer = () => {\n  const dispatch = useDispatch();\n\n  const isAuthorizated = useSelector(userIsAuthorizatedSelector);\n  const user = useSelector(userUserSelector);\n\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      dispatch(getRefreshAction());\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isAuthorizated) {\n      dispatch(getUserAction());\n\n      socket.on('on-connect', () => {\n        dispatch(getUserAction());\n      });\n    }\n  }, [isAuthorizated]);\n\n  useEffect(() => {\n    if (user?.id) {\n      socket.emit('on-connect', user.id);\n    }\n  }, [user?.id]);\n\n  // useEffect(() => {\n  //   if (userId) {\n  //     socket.on('on-connect', () => {\n  //       dispatch(getUsers());\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-disconnect', () => {\n  //       dispatch(getUsers());\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-add-invite-to-friends', () => {\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-add-to-friends', () => {\n  //       dispatch(getFriendsAction());\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n\n  //     socket.on('on-remove-from-friends', () => {\n  //       dispatch(getFriendsAction());\n  //     });\n\n  //     socket.on('on-remove-invite-to-friends', () => {\n  //       dispatch(getInvites());\n  //       dispatch(getApprovals());\n  //     });\n  //   }\n  // }, [userId]);\n\n  // if (isLoading) {\n  //   return <Loader />;\n  // }\n\n  return <App isAuthorizated={isAuthorizated} />;\n};\n\nexport { AppContainer };\n","import { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material';\nimport { injectGlobal } from '@emotion/css';\nimport { store } from 'core/store';\nimport { AppContainer } from 'core/containers/app-container';\nimport { theme } from 'core/theme';\nimport { ToastContainer } from 'react-toastify';\nimport { injectStyle } from 'react-toastify/dist/inject-style';\n\nconst Root = () => {\n  injectGlobal`\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n\n    html {\n      box-sizing: border-box;\n    }\n\n    html,\n    body,\n    .root {\n      height: 100%;\n    }\n\n    body {\n      margin: 0;\n      background: radial-gradient(105.05% 99.28% at 50% 29.72%, #8c9eff 0%, #536dfe 42.9%, #536dfe 61.7%, #3d5afe 84.71%, #304ffe 100%);\n      background-repeat: no-repeat;\n    }\n\n    input:-webkit-autofill,\n    input:-webkit-autofill:hover,\n    input:-webkit-autofill:focus,\n    input:-webkit-autofill:active {\n      box-shadow: 0 0 0 30px #ffffff inset;\n    }\n  `;\n\n  injectStyle();\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <HashRouter>\n          <AppContainer />\n          <ToastContainer theme=\"light\" />\n        </HashRouter>\n      </ThemeProvider>\n    </Provider>\n  );\n};\n\nrender(<Root />, document.querySelector('.root'));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkvideo_calls\"] = globalThis[\"webpackChunkvideo_calls\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [628], () => (__webpack_require__(5134)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","API_URL","ApiUrl","Authorization","Refresh","Registration","Logout","User","postAuthorizationService","params","axiosInstance","request","method","url","data","getRefreshService","withCredentials","postRegistrationService","postLogoutService","getUserService","postUsersService","baseURL","interceptors","use","config","headers","localStorage","getItem","response","error","originalRequest","status","setItem","accessToken","console","log","removeItem","addMessageToChannel","channel","message","post","getApprovals","get","getChannelMessages","getChannels","getInvites","getFriendsAction","userSlice","name","initialState","isAuthorizated","isLoading","user","users","friends","invites","approvals","isCall","isIncomingCall","isCallAccepted","isCallCanceled","channels","channelMessages","reducers","setAuthorization","state","payload","setIsLoading","setUser","setUsers","setIsCall","setIsIncomingCall","setIsCallAccepted","setIsCallCanceled","extraReducers","builder","addCase","fulfilled","actions","userReducer","reducer","postAuthorizationAction","getRefreshAction","postRegistrationAction","postLogoutAction","getUserAction","postUsersAction","postAuthorizationSaga","getRefreshSaga","postRegistrationSaga","postLogoutSaga","getUserSaga","postUsersSaga","sagas","type","sagaMiddleware","store","middleware","run","map","saga","userIsAuthorizatedSelector","userIsLoadingSelector","userUserSelector","userUsersSelector","userFriendsSelector","userInvitesSelector","userApprovalsSelector","userChannelMessagesSelector","TextFieldMemoized","memo","props","theme","createTheme","palette","primary","light","main","dark","AuthorizationLayoutMemoized","children","Box","sx","display","alignItems","justifyContent","height","AuthorizationMemoized","dispatch","navigate","email","setEmail","useState","password","setPassword","isShowPassword","setIsShowPassword","width","gridTemplateColumns","borderRadius","border","grey","overflow","className","src","alt","padding","backgroundColor","common","white","rowGap","Typography","variant","id","label","value","onChange","event","target","placeholder","autoComplete","fullWidth","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","LoadingButton","color","size","loading","Link","cursor","underline","preventDefault","RegistrationMemoized","setName","TextField","PublicRoutesMemoized","path","element","to","ButtonMemoized","disableElevation","NavigationMemoized","alignContent","Tooltip","title","arrow","placement","Group","Dashboard","Divider","Settings","socket","io","transports","UserMemoized","channelId","columnGap","success","Badge","overlap","anchorOrigin","vertical","horizontal","Avatar","DeleteOutline","UserControlMemoized","isMic","setIsMic","isVideocam","setIsVideocam","slice","Mic","MicOff","Videocam","VideocamOff","FriendsMemoized","pathname","usersMessages","setUsersMessages","useEffect","gridTemplateRows","borderBottom","margin","overflowY","key","userData","_id","includes","MessagesMemoized","setMessage","setChannel","author","text","ProfileMemoized","ChannelsLayoutMemoized","Array","from","keys","ChannelsMemoized","UserFriendsMemoized","anchorEl","setAnchorEl","Chat","Call","currentTarget","MoreVert","Menu","open","Boolean","onClose","MenuListProps","MenuItem","friendId","AllFriendsMemoized","length","friend","FriendsOnlineMemoized","UserAddToFriendsMemoized","FriendsInvitesMemoized","invite","UserApprovalsMemoized","FriendsApprovalsMemoized","approval","UserAddInviteToFriendsMemoized","setSearchValue","AddToFriendsMemoized","searchValue","PrivateRoutesMemoized","AppMemoized","AppContainer","Root","ThemeProvider","render","document","querySelector","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","j","Object","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}